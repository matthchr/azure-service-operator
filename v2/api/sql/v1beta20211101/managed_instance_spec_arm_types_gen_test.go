// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedInstance_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstance_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstance_Spec_ARM, ManagedInstance_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstance_Spec_ARM runs a test to see if a specific instance of ManagedInstance_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstance_Spec_ARM(subject ManagedInstance_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstance_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstance_Spec_ARM instances for property testing - lazily instantiated by
// ManagedInstance_Spec_ARMGenerator()
var managedInstance_Spec_ARMGenerator gopter.Gen

// ManagedInstance_Spec_ARMGenerator returns a generator of ManagedInstance_Spec_ARM instances for property testing.
// We first initialize managedInstance_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedInstance_Spec_ARMGenerator() gopter.Gen {
	if managedInstance_Spec_ARMGenerator != nil {
		return managedInstance_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstance_Spec_ARM(generators)
	managedInstance_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstance_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstance_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedInstance_Spec_ARM(generators)
	managedInstance_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstance_Spec_ARM{}), generators)

	return managedInstance_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstance_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstance_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedInstance_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedInstance_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ResourceIdentity_ARMGenerator())
	gens["Properties"] = gen.PtrOf(ManagedInstanceProperties_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_ARMGenerator())
}

func Test_ManagedInstanceProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstanceProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstanceProperties_ARM, ManagedInstanceProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstanceProperties_ARM runs a test to see if a specific instance of ManagedInstanceProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstanceProperties_ARM(subject ManagedInstanceProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstanceProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstanceProperties_ARM instances for property testing - lazily instantiated by
// ManagedInstanceProperties_ARMGenerator()
var managedInstanceProperties_ARMGenerator gopter.Gen

// ManagedInstanceProperties_ARMGenerator returns a generator of ManagedInstanceProperties_ARM instances for property testing.
// We first initialize managedInstanceProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedInstanceProperties_ARMGenerator() gopter.Gen {
	if managedInstanceProperties_ARMGenerator != nil {
		return managedInstanceProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstanceProperties_ARM(generators)
	managedInstanceProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstanceProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstanceProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedInstanceProperties_ARM(generators)
	managedInstanceProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstanceProperties_ARM{}), generators)

	return managedInstanceProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstanceProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstanceProperties_ARM(gens map[string]gopter.Gen) {
	gens["AdministratorLogin"] = gen.PtrOf(gen.AlphaString())
	gens["AdministratorLoginPassword"] = gen.PtrOf(gen.AlphaString())
	gens["Collation"] = gen.PtrOf(gen.AlphaString())
	gens["DnsZonePartner"] = gen.PtrOf(gen.AlphaString())
	gens["InstancePoolId"] = gen.PtrOf(gen.AlphaString())
	gens["KeyId"] = gen.PtrOf(gen.AlphaString())
	gens["LicenseType"] = gen.PtrOf(gen.OneConstOf(ManagedInstanceProperties_LicenseType_BasePrice, ManagedInstanceProperties_LicenseType_LicenseIncluded))
	gens["MaintenanceConfigurationId"] = gen.PtrOf(gen.AlphaString())
	gens["ManagedInstanceCreateMode"] = gen.PtrOf(gen.OneConstOf(ManagedInstanceProperties_ManagedInstanceCreateMode_Default, ManagedInstanceProperties_ManagedInstanceCreateMode_PointInTimeRestore))
	gens["MinimalTlsVersion"] = gen.PtrOf(gen.AlphaString())
	gens["PrimaryUserAssignedIdentityId"] = gen.PtrOf(gen.AlphaString())
	gens["ProxyOverride"] = gen.PtrOf(gen.OneConstOf(ManagedInstanceProperties_ProxyOverride_Default, ManagedInstanceProperties_ProxyOverride_Proxy, ManagedInstanceProperties_ProxyOverride_Redirect))
	gens["PublicDataEndpointEnabled"] = gen.PtrOf(gen.Bool())
	gens["RequestedBackupStorageRedundancy"] = gen.PtrOf(gen.OneConstOf(
		ManagedInstanceProperties_RequestedBackupStorageRedundancy_Geo,
		ManagedInstanceProperties_RequestedBackupStorageRedundancy_GeoZone,
		ManagedInstanceProperties_RequestedBackupStorageRedundancy_Local,
		ManagedInstanceProperties_RequestedBackupStorageRedundancy_Zone))
	gens["RestorePointInTime"] = gen.PtrOf(gen.AlphaString())
	gens["SourceManagedInstanceId"] = gen.PtrOf(gen.AlphaString())
	gens["StorageSizeInGB"] = gen.PtrOf(gen.Int())
	gens["SubnetId"] = gen.PtrOf(gen.AlphaString())
	gens["TimezoneId"] = gen.PtrOf(gen.AlphaString())
	gens["VCores"] = gen.PtrOf(gen.Int())
	gens["ZoneRedundant"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagedInstanceProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedInstanceProperties_ARM(gens map[string]gopter.Gen) {
	gens["Administrators"] = gen.PtrOf(ManagedInstanceExternalAdministrator_ARMGenerator())
	gens["ServicePrincipal"] = gen.PtrOf(ServicePrincipal_ARMGenerator())
}

func Test_ResourceIdentity_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceIdentity_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceIdentity_ARM, ResourceIdentity_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceIdentity_ARM runs a test to see if a specific instance of ResourceIdentity_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceIdentity_ARM(subject ResourceIdentity_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceIdentity_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceIdentity_ARM instances for property testing - lazily instantiated by
// ResourceIdentity_ARMGenerator()
var resourceIdentity_ARMGenerator gopter.Gen

// ResourceIdentity_ARMGenerator returns a generator of ResourceIdentity_ARM instances for property testing.
func ResourceIdentity_ARMGenerator() gopter.Gen {
	if resourceIdentity_ARMGenerator != nil {
		return resourceIdentity_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceIdentity_ARM(generators)
	resourceIdentity_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceIdentity_ARM{}), generators)

	return resourceIdentity_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceIdentity_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceIdentity_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ResourceIdentity_Type_None,
		ResourceIdentity_Type_SystemAssigned,
		ResourceIdentity_Type_SystemAssignedUserAssigned,
		ResourceIdentity_Type_UserAssigned))
}

func Test_Sku_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_ARM, Sku_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_ARM runs a test to see if a specific instance of Sku_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_ARM(subject Sku_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_ARM instances for property testing - lazily instantiated by Sku_ARMGenerator()
var sku_ARMGenerator gopter.Gen

// Sku_ARMGenerator returns a generator of Sku_ARM instances for property testing.
func Sku_ARMGenerator() gopter.Gen {
	if sku_ARMGenerator != nil {
		return sku_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_ARM(generators)
	sku_ARMGenerator = gen.Struct(reflect.TypeOf(Sku_ARM{}), generators)

	return sku_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedInstanceExternalAdministrator_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstanceExternalAdministrator_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstanceExternalAdministrator_ARM, ManagedInstanceExternalAdministrator_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstanceExternalAdministrator_ARM runs a test to see if a specific instance of ManagedInstanceExternalAdministrator_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstanceExternalAdministrator_ARM(subject ManagedInstanceExternalAdministrator_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstanceExternalAdministrator_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstanceExternalAdministrator_ARM instances for property testing - lazily instantiated by
// ManagedInstanceExternalAdministrator_ARMGenerator()
var managedInstanceExternalAdministrator_ARMGenerator gopter.Gen

// ManagedInstanceExternalAdministrator_ARMGenerator returns a generator of ManagedInstanceExternalAdministrator_ARM instances for property testing.
func ManagedInstanceExternalAdministrator_ARMGenerator() gopter.Gen {
	if managedInstanceExternalAdministrator_ARMGenerator != nil {
		return managedInstanceExternalAdministrator_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstanceExternalAdministrator_ARM(generators)
	managedInstanceExternalAdministrator_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstanceExternalAdministrator_ARM{}), generators)

	return managedInstanceExternalAdministrator_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstanceExternalAdministrator_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstanceExternalAdministrator_ARM(gens map[string]gopter.Gen) {
	gens["AdministratorType"] = gen.PtrOf(gen.OneConstOf(ManagedInstanceExternalAdministrator_AdministratorType_ActiveDirectory))
	gens["AzureADOnlyAuthentication"] = gen.PtrOf(gen.Bool())
	gens["Login"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalType"] = gen.PtrOf(gen.OneConstOf(ManagedInstanceExternalAdministrator_PrincipalType_Application, ManagedInstanceExternalAdministrator_PrincipalType_Group, ManagedInstanceExternalAdministrator_PrincipalType_User))
	gens["Sid"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ServicePrincipal_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServicePrincipal_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServicePrincipal_ARM, ServicePrincipal_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServicePrincipal_ARM runs a test to see if a specific instance of ServicePrincipal_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServicePrincipal_ARM(subject ServicePrincipal_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServicePrincipal_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServicePrincipal_ARM instances for property testing - lazily instantiated by
// ServicePrincipal_ARMGenerator()
var servicePrincipal_ARMGenerator gopter.Gen

// ServicePrincipal_ARMGenerator returns a generator of ServicePrincipal_ARM instances for property testing.
func ServicePrincipal_ARMGenerator() gopter.Gen {
	if servicePrincipal_ARMGenerator != nil {
		return servicePrincipal_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServicePrincipal_ARM(generators)
	servicePrincipal_ARMGenerator = gen.Struct(reflect.TypeOf(ServicePrincipal_ARM{}), generators)

	return servicePrincipal_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServicePrincipal_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServicePrincipal_ARM(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ServicePrincipal_Type_None, ServicePrincipal_Type_SystemAssigned))
}
