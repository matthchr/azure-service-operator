// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"encoding/json"
	v20211101s "github.com/Azure/azure-service-operator/v2/api/sql/v1beta20211101storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedInstances_Database_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagedInstances_Database to hub returns original",
		prop.ForAll(RunResourceConversionTestForManagedInstances_Database, ManagedInstances_DatabaseGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForManagedInstances_Database tests if a specific instance of ManagedInstances_Database round trips to the hub storage version and back losslessly
func RunResourceConversionTestForManagedInstances_Database(subject ManagedInstances_Database) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20211101s.ManagedInstances_Database
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual ManagedInstances_Database
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagedInstances_Database_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagedInstances_Database to ManagedInstances_Database via AssignProperties_To_ManagedInstances_Database & AssignProperties_From_ManagedInstances_Database returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagedInstances_Database, ManagedInstances_DatabaseGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagedInstances_Database tests if a specific instance of ManagedInstances_Database can be assigned to v1beta20211101storage and back losslessly
func RunPropertyAssignmentTestForManagedInstances_Database(subject ManagedInstances_Database) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.ManagedInstances_Database
	err := copied.AssignProperties_To_ManagedInstances_Database(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagedInstances_Database
	err = actual.AssignProperties_From_ManagedInstances_Database(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagedInstances_Database_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstances_Database via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstances_Database, ManagedInstances_DatabaseGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstances_Database runs a test to see if a specific instance of ManagedInstances_Database round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstances_Database(subject ManagedInstances_Database) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstances_Database
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstances_Database instances for property testing - lazily instantiated by
// ManagedInstances_DatabaseGenerator()
var managedInstances_DatabaseGenerator gopter.Gen

// ManagedInstances_DatabaseGenerator returns a generator of ManagedInstances_Database instances for property testing.
func ManagedInstances_DatabaseGenerator() gopter.Gen {
	if managedInstances_DatabaseGenerator != nil {
		return managedInstances_DatabaseGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedInstances_Database(generators)
	managedInstances_DatabaseGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_Database{}), generators)

	return managedInstances_DatabaseGenerator
}

// AddRelatedPropertyGeneratorsForManagedInstances_Database is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedInstances_Database(gens map[string]gopter.Gen) {
	gens["Spec"] = ManagedInstances_Database_SpecGenerator()
	gens["Status"] = ManagedInstances_Database_STATUSGenerator()
}

func Test_ManagedInstances_Database_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagedInstances_Database_Spec to ManagedInstances_Database_Spec via AssignProperties_To_ManagedInstances_Database_Spec & AssignProperties_From_ManagedInstances_Database_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagedInstances_Database_Spec, ManagedInstances_Database_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagedInstances_Database_Spec tests if a specific instance of ManagedInstances_Database_Spec can be assigned to v1beta20211101storage and back losslessly
func RunPropertyAssignmentTestForManagedInstances_Database_Spec(subject ManagedInstances_Database_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.ManagedInstances_Database_Spec
	err := copied.AssignProperties_To_ManagedInstances_Database_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagedInstances_Database_Spec
	err = actual.AssignProperties_From_ManagedInstances_Database_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagedInstances_Database_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstances_Database_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstances_Database_Spec, ManagedInstances_Database_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstances_Database_Spec runs a test to see if a specific instance of ManagedInstances_Database_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstances_Database_Spec(subject ManagedInstances_Database_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstances_Database_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstances_Database_Spec instances for property testing - lazily instantiated by
// ManagedInstances_Database_SpecGenerator()
var managedInstances_Database_SpecGenerator gopter.Gen

// ManagedInstances_Database_SpecGenerator returns a generator of ManagedInstances_Database_Spec instances for property testing.
func ManagedInstances_Database_SpecGenerator() gopter.Gen {
	if managedInstances_Database_SpecGenerator != nil {
		return managedInstances_Database_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstances_Database_Spec(generators)
	managedInstances_Database_SpecGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_Database_Spec{}), generators)

	return managedInstances_Database_SpecGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstances_Database_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstances_Database_Spec(gens map[string]gopter.Gen) {
	gens["AutoCompleteRestore"] = gen.PtrOf(gen.Bool())
	gens["AzureName"] = gen.AlphaString()
	gens["CatalogCollation"] = gen.PtrOf(gen.OneConstOf(ManagedDatabaseProperties_CatalogCollation_DATABASE_DEFAULT, ManagedDatabaseProperties_CatalogCollation_SQL_Latin1_General_CP1_CI_AS))
	gens["Collation"] = gen.PtrOf(gen.AlphaString())
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(
		ManagedDatabaseProperties_CreateMode_Default,
		ManagedDatabaseProperties_CreateMode_PointInTimeRestore,
		ManagedDatabaseProperties_CreateMode_Recovery,
		ManagedDatabaseProperties_CreateMode_RestoreExternalBackup,
		ManagedDatabaseProperties_CreateMode_RestoreLongTermRetentionBackup))
	gens["LastBackupName"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["RestorePointInTime"] = gen.PtrOf(gen.AlphaString())
	gens["StorageContainerSasToken"] = gen.PtrOf(gen.AlphaString())
	gens["StorageContainerUri"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

func Test_ManagedInstances_Database_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagedInstances_Database_STATUS to ManagedInstances_Database_STATUS via AssignProperties_To_ManagedInstances_Database_STATUS & AssignProperties_From_ManagedInstances_Database_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagedInstances_Database_STATUS, ManagedInstances_Database_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagedInstances_Database_STATUS tests if a specific instance of ManagedInstances_Database_STATUS can be assigned to v1beta20211101storage and back losslessly
func RunPropertyAssignmentTestForManagedInstances_Database_STATUS(subject ManagedInstances_Database_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.ManagedInstances_Database_STATUS
	err := copied.AssignProperties_To_ManagedInstances_Database_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagedInstances_Database_STATUS
	err = actual.AssignProperties_From_ManagedInstances_Database_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagedInstances_Database_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstances_Database_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstances_Database_STATUS, ManagedInstances_Database_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstances_Database_STATUS runs a test to see if a specific instance of ManagedInstances_Database_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstances_Database_STATUS(subject ManagedInstances_Database_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstances_Database_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstances_Database_STATUS instances for property testing - lazily instantiated by
// ManagedInstances_Database_STATUSGenerator()
var managedInstances_Database_STATUSGenerator gopter.Gen

// ManagedInstances_Database_STATUSGenerator returns a generator of ManagedInstances_Database_STATUS instances for property testing.
func ManagedInstances_Database_STATUSGenerator() gopter.Gen {
	if managedInstances_Database_STATUSGenerator != nil {
		return managedInstances_Database_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstances_Database_STATUS(generators)
	managedInstances_Database_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_Database_STATUS{}), generators)

	return managedInstances_Database_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstances_Database_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstances_Database_STATUS(gens map[string]gopter.Gen) {
	gens["AutoCompleteRestore"] = gen.PtrOf(gen.Bool())
	gens["CatalogCollation"] = gen.PtrOf(gen.OneConstOf(ManagedDatabaseProperties_CatalogCollation_STATUS_DATABASE_DEFAULT, ManagedDatabaseProperties_CatalogCollation_STATUS_SQL_Latin1_General_CP1_CI_AS))
	gens["Collation"] = gen.PtrOf(gen.AlphaString())
	gens["CreateMode"] = gen.PtrOf(gen.OneConstOf(
		ManagedDatabaseProperties_CreateMode_STATUS_Default,
		ManagedDatabaseProperties_CreateMode_STATUS_PointInTimeRestore,
		ManagedDatabaseProperties_CreateMode_STATUS_Recovery,
		ManagedDatabaseProperties_CreateMode_STATUS_RestoreExternalBackup,
		ManagedDatabaseProperties_CreateMode_STATUS_RestoreLongTermRetentionBackup))
	gens["CreationDate"] = gen.PtrOf(gen.AlphaString())
	gens["DefaultSecondaryLocation"] = gen.PtrOf(gen.AlphaString())
	gens["EarliestRestorePoint"] = gen.PtrOf(gen.AlphaString())
	gens["FailoverGroupId"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["LastBackupName"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["LongTermRetentionBackupResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["RecoverableDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["RestorableDroppedDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["RestorePointInTime"] = gen.PtrOf(gen.AlphaString())
	gens["SourceDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.OneConstOf(
		ManagedDatabaseProperties_Status_STATUS_Creating,
		ManagedDatabaseProperties_Status_STATUS_Inaccessible,
		ManagedDatabaseProperties_Status_STATUS_Offline,
		ManagedDatabaseProperties_Status_STATUS_Online,
		ManagedDatabaseProperties_Status_STATUS_Restoring,
		ManagedDatabaseProperties_Status_STATUS_Shutdown,
		ManagedDatabaseProperties_Status_STATUS_Updating))
	gens["StorageContainerSasToken"] = gen.PtrOf(gen.AlphaString())
	gens["StorageContainerUri"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}
