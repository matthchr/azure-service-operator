// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedInstances_VulnerabilityAssessment_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstances_VulnerabilityAssessment_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstances_VulnerabilityAssessment_STATUS_ARM, ManagedInstances_VulnerabilityAssessment_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstances_VulnerabilityAssessment_STATUS_ARM runs a test to see if a specific instance of ManagedInstances_VulnerabilityAssessment_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstances_VulnerabilityAssessment_STATUS_ARM(subject ManagedInstances_VulnerabilityAssessment_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstances_VulnerabilityAssessment_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstances_VulnerabilityAssessment_STATUS_ARM instances for property testing - lazily instantiated
// by ManagedInstances_VulnerabilityAssessment_STATUS_ARMGenerator()
var managedInstances_VulnerabilityAssessment_STATUS_ARMGenerator gopter.Gen

// ManagedInstances_VulnerabilityAssessment_STATUS_ARMGenerator returns a generator of ManagedInstances_VulnerabilityAssessment_STATUS_ARM instances for property testing.
// We first initialize managedInstances_VulnerabilityAssessment_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedInstances_VulnerabilityAssessment_STATUS_ARMGenerator() gopter.Gen {
	if managedInstances_VulnerabilityAssessment_STATUS_ARMGenerator != nil {
		return managedInstances_VulnerabilityAssessment_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstances_VulnerabilityAssessment_STATUS_ARM(generators)
	managedInstances_VulnerabilityAssessment_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_VulnerabilityAssessment_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstances_VulnerabilityAssessment_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedInstances_VulnerabilityAssessment_STATUS_ARM(generators)
	managedInstances_VulnerabilityAssessment_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_VulnerabilityAssessment_STATUS_ARM{}), generators)

	return managedInstances_VulnerabilityAssessment_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstances_VulnerabilityAssessment_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstances_VulnerabilityAssessment_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedInstances_VulnerabilityAssessment_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedInstances_VulnerabilityAssessment_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARMGenerator())
}

func Test_ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM, ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM runs a test to see if a specific instance of ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM(subject ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARMGenerator()
var managedInstanceVulnerabilityAssessmentProperties_STATUS_ARMGenerator gopter.Gen

// ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARMGenerator returns a generator of ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM instances for property testing.
// We first initialize managedInstanceVulnerabilityAssessmentProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARMGenerator() gopter.Gen {
	if managedInstanceVulnerabilityAssessmentProperties_STATUS_ARMGenerator != nil {
		return managedInstanceVulnerabilityAssessmentProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM(generators)
	managedInstanceVulnerabilityAssessmentProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM(generators)
	managedInstanceVulnerabilityAssessmentProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM{}), generators)

	return managedInstanceVulnerabilityAssessmentProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["StorageAccountAccessKey"] = gen.PtrOf(gen.AlphaString())
	gens["StorageContainerPath"] = gen.PtrOf(gen.AlphaString())
	gens["StorageContainerSasKey"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedInstanceVulnerabilityAssessmentProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RecurringScans"] = gen.PtrOf(VulnerabilityAssessmentRecurringScansProperties_STATUS_ARMGenerator())
}

func Test_VulnerabilityAssessmentRecurringScansProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of VulnerabilityAssessmentRecurringScansProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForVulnerabilityAssessmentRecurringScansProperties_STATUS_ARM, VulnerabilityAssessmentRecurringScansProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForVulnerabilityAssessmentRecurringScansProperties_STATUS_ARM runs a test to see if a specific instance of VulnerabilityAssessmentRecurringScansProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForVulnerabilityAssessmentRecurringScansProperties_STATUS_ARM(subject VulnerabilityAssessmentRecurringScansProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual VulnerabilityAssessmentRecurringScansProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of VulnerabilityAssessmentRecurringScansProperties_STATUS_ARM instances for property testing - lazily
// instantiated by VulnerabilityAssessmentRecurringScansProperties_STATUS_ARMGenerator()
var vulnerabilityAssessmentRecurringScansProperties_STATUS_ARMGenerator gopter.Gen

// VulnerabilityAssessmentRecurringScansProperties_STATUS_ARMGenerator returns a generator of VulnerabilityAssessmentRecurringScansProperties_STATUS_ARM instances for property testing.
func VulnerabilityAssessmentRecurringScansProperties_STATUS_ARMGenerator() gopter.Gen {
	if vulnerabilityAssessmentRecurringScansProperties_STATUS_ARMGenerator != nil {
		return vulnerabilityAssessmentRecurringScansProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForVulnerabilityAssessmentRecurringScansProperties_STATUS_ARM(generators)
	vulnerabilityAssessmentRecurringScansProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(VulnerabilityAssessmentRecurringScansProperties_STATUS_ARM{}), generators)

	return vulnerabilityAssessmentRecurringScansProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForVulnerabilityAssessmentRecurringScansProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForVulnerabilityAssessmentRecurringScansProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EmailSubscriptionAdmins"] = gen.PtrOf(gen.Bool())
	gens["Emails"] = gen.SliceOf(gen.AlphaString())
	gens["IsEnabled"] = gen.PtrOf(gen.Bool())
}
