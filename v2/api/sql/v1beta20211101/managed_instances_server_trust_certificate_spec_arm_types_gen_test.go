// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedInstances_ServerTrustCertificate_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstances_ServerTrustCertificate_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstances_ServerTrustCertificate_Spec_ARM, ManagedInstances_ServerTrustCertificate_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstances_ServerTrustCertificate_Spec_ARM runs a test to see if a specific instance of ManagedInstances_ServerTrustCertificate_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstances_ServerTrustCertificate_Spec_ARM(subject ManagedInstances_ServerTrustCertificate_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstances_ServerTrustCertificate_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstances_ServerTrustCertificate_Spec_ARM instances for property testing - lazily instantiated by
// ManagedInstances_ServerTrustCertificate_Spec_ARMGenerator()
var managedInstances_ServerTrustCertificate_Spec_ARMGenerator gopter.Gen

// ManagedInstances_ServerTrustCertificate_Spec_ARMGenerator returns a generator of ManagedInstances_ServerTrustCertificate_Spec_ARM instances for property testing.
// We first initialize managedInstances_ServerTrustCertificate_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedInstances_ServerTrustCertificate_Spec_ARMGenerator() gopter.Gen {
	if managedInstances_ServerTrustCertificate_Spec_ARMGenerator != nil {
		return managedInstances_ServerTrustCertificate_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstances_ServerTrustCertificate_Spec_ARM(generators)
	managedInstances_ServerTrustCertificate_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_ServerTrustCertificate_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstances_ServerTrustCertificate_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedInstances_ServerTrustCertificate_Spec_ARM(generators)
	managedInstances_ServerTrustCertificate_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_ServerTrustCertificate_Spec_ARM{}), generators)

	return managedInstances_ServerTrustCertificate_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstances_ServerTrustCertificate_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstances_ServerTrustCertificate_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForManagedInstances_ServerTrustCertificate_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedInstances_ServerTrustCertificate_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ServerTrustCertificateProperties_ARMGenerator())
}

func Test_ServerTrustCertificateProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServerTrustCertificateProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServerTrustCertificateProperties_ARM, ServerTrustCertificateProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServerTrustCertificateProperties_ARM runs a test to see if a specific instance of ServerTrustCertificateProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServerTrustCertificateProperties_ARM(subject ServerTrustCertificateProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServerTrustCertificateProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServerTrustCertificateProperties_ARM instances for property testing - lazily instantiated by
// ServerTrustCertificateProperties_ARMGenerator()
var serverTrustCertificateProperties_ARMGenerator gopter.Gen

// ServerTrustCertificateProperties_ARMGenerator returns a generator of ServerTrustCertificateProperties_ARM instances for property testing.
func ServerTrustCertificateProperties_ARMGenerator() gopter.Gen {
	if serverTrustCertificateProperties_ARMGenerator != nil {
		return serverTrustCertificateProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServerTrustCertificateProperties_ARM(generators)
	serverTrustCertificateProperties_ARMGenerator = gen.Struct(reflect.TypeOf(ServerTrustCertificateProperties_ARM{}), generators)

	return serverTrustCertificateProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServerTrustCertificateProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServerTrustCertificateProperties_ARM(gens map[string]gopter.Gen) {
	gens["PublicBlob"] = gen.PtrOf(gen.AlphaString())
}
