// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"fmt"
	v20211101s "github.com/Azure/azure-service-operator/v2/api/sql/v1beta20211101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/SyncGroups.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}
type Servers_Databases_SyncGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Servers_Databases_SyncGroup_Spec   `json:"spec,omitempty"`
	Status            Servers_Databases_SyncGroup_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Servers_Databases_SyncGroup{}

// GetConditions returns the conditions of the resource
func (group *Servers_Databases_SyncGroup) GetConditions() conditions.Conditions {
	return group.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (group *Servers_Databases_SyncGroup) SetConditions(conditions conditions.Conditions) {
	group.Status.Conditions = conditions
}

var _ conversion.Convertible = &Servers_Databases_SyncGroup{}

// ConvertFrom populates our Servers_Databases_SyncGroup from the provided hub Servers_Databases_SyncGroup
func (group *Servers_Databases_SyncGroup) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20211101s.Servers_Databases_SyncGroup)
	if !ok {
		return fmt.Errorf("expected sql/v1beta20211101storage/Servers_Databases_SyncGroup but received %T instead", hub)
	}

	return group.AssignProperties_From_Servers_Databases_SyncGroup(source)
}

// ConvertTo populates the provided hub Servers_Databases_SyncGroup from our Servers_Databases_SyncGroup
func (group *Servers_Databases_SyncGroup) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20211101s.Servers_Databases_SyncGroup)
	if !ok {
		return fmt.Errorf("expected sql/v1beta20211101storage/Servers_Databases_SyncGroup but received %T instead", hub)
	}

	return group.AssignProperties_To_Servers_Databases_SyncGroup(destination)
}

// +kubebuilder:webhook:path=/mutate-sql-azure-com-v1beta20211101-servers_databases_syncgroup,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=sql.azure.com,resources=servers_databases_syncgroups,verbs=create;update,versions=v1beta20211101,name=default.v1beta20211101.servers_databases_syncgroups.sql.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Servers_Databases_SyncGroup{}

// Default applies defaults to the Servers_Databases_SyncGroup resource
func (group *Servers_Databases_SyncGroup) Default() {
	group.defaultImpl()
	var temp interface{} = group
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (group *Servers_Databases_SyncGroup) defaultAzureName() {
	if group.Spec.AzureName == "" {
		group.Spec.AzureName = group.Name
	}
}

// defaultImpl applies the code generated defaults to the Servers_Databases_SyncGroup resource
func (group *Servers_Databases_SyncGroup) defaultImpl() { group.defaultAzureName() }

var _ genruntime.KubernetesResource = &Servers_Databases_SyncGroup{}

// AzureName returns the Azure name of the resource
func (group *Servers_Databases_SyncGroup) AzureName() string {
	return group.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (group Servers_Databases_SyncGroup) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (group *Servers_Databases_SyncGroup) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (group *Servers_Databases_SyncGroup) GetSpec() genruntime.ConvertibleSpec {
	return &group.Spec
}

// GetStatus returns the status of this resource
func (group *Servers_Databases_SyncGroup) GetStatus() genruntime.ConvertibleStatus {
	return &group.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Sql/servers/databases/syncGroups"
func (group *Servers_Databases_SyncGroup) GetType() string {
	return "Microsoft.Sql/servers/databases/syncGroups"
}

// NewEmptyStatus returns a new empty (blank) status
func (group *Servers_Databases_SyncGroup) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Servers_Databases_SyncGroup_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (group *Servers_Databases_SyncGroup) Owner() *genruntime.ResourceReference {
	ownerGroup, ownerKind := genruntime.LookupOwnerGroupKind(group.Spec)
	return &genruntime.ResourceReference{
		Group: ownerGroup,
		Kind:  ownerKind,
		Name:  group.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (group *Servers_Databases_SyncGroup) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Servers_Databases_SyncGroup_STATUS); ok {
		group.Status = *st
		return nil
	}

	// Convert status to required version
	var st Servers_Databases_SyncGroup_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	group.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-sql-azure-com-v1beta20211101-servers_databases_syncgroup,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=sql.azure.com,resources=servers_databases_syncgroups,verbs=create;update,versions=v1beta20211101,name=validate.v1beta20211101.servers_databases_syncgroups.sql.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Servers_Databases_SyncGroup{}

// ValidateCreate validates the creation of the resource
func (group *Servers_Databases_SyncGroup) ValidateCreate() error {
	validations := group.createValidations()
	var temp interface{} = group
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (group *Servers_Databases_SyncGroup) ValidateDelete() error {
	validations := group.deleteValidations()
	var temp interface{} = group
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (group *Servers_Databases_SyncGroup) ValidateUpdate(old runtime.Object) error {
	validations := group.updateValidations()
	var temp interface{} = group
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (group *Servers_Databases_SyncGroup) createValidations() []func() error {
	return []func() error{group.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (group *Servers_Databases_SyncGroup) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (group *Servers_Databases_SyncGroup) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return group.validateResourceReferences()
		},
		group.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (group *Servers_Databases_SyncGroup) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&group.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (group *Servers_Databases_SyncGroup) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*Servers_Databases_SyncGroup)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, group)
}

// AssignProperties_From_Servers_Databases_SyncGroup populates our Servers_Databases_SyncGroup from the provided source Servers_Databases_SyncGroup
func (group *Servers_Databases_SyncGroup) AssignProperties_From_Servers_Databases_SyncGroup(source *v20211101s.Servers_Databases_SyncGroup) error {

	// ObjectMeta
	group.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Servers_Databases_SyncGroup_Spec
	err := spec.AssignProperties_From_Servers_Databases_SyncGroup_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Servers_Databases_SyncGroup_Spec() to populate field Spec")
	}
	group.Spec = spec

	// Status
	var status Servers_Databases_SyncGroup_STATUS
	err = status.AssignProperties_From_Servers_Databases_SyncGroup_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Servers_Databases_SyncGroup_STATUS() to populate field Status")
	}
	group.Status = status

	// No error
	return nil
}

// AssignProperties_To_Servers_Databases_SyncGroup populates the provided destination Servers_Databases_SyncGroup from our Servers_Databases_SyncGroup
func (group *Servers_Databases_SyncGroup) AssignProperties_To_Servers_Databases_SyncGroup(destination *v20211101s.Servers_Databases_SyncGroup) error {

	// ObjectMeta
	destination.ObjectMeta = *group.ObjectMeta.DeepCopy()

	// Spec
	var spec v20211101s.Servers_Databases_SyncGroup_Spec
	err := group.Spec.AssignProperties_To_Servers_Databases_SyncGroup_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Servers_Databases_SyncGroup_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20211101s.Servers_Databases_SyncGroup_STATUS
	err = group.Status.AssignProperties_To_Servers_Databases_SyncGroup_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Servers_Databases_SyncGroup_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (group *Servers_Databases_SyncGroup) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: group.Spec.OriginalVersion(),
		Kind:    "Servers_Databases_SyncGroup",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/SyncGroups.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}
type Servers_Databases_SyncGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Servers_Databases_SyncGroup `json:"items"`
}

type Servers_Databases_SyncGroup_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// ConflictLoggingRetentionInDays: Conflict logging retention period.
	ConflictLoggingRetentionInDays *int `json:"conflictLoggingRetentionInDays,omitempty"`

	// ConflictResolutionPolicy: Conflict resolution policy of the sync group.
	ConflictResolutionPolicy *SyncGroupProperties_ConflictResolutionPolicy `json:"conflictResolutionPolicy,omitempty"`

	// EnableConflictLogging: If conflict logging is enabled.
	EnableConflictLogging *bool `json:"enableConflictLogging,omitempty"`

	// HubDatabasePassword: Password for the sync group hub database credential.
	HubDatabasePassword *genruntime.SecretReference `json:"hubDatabasePassword,omitempty"`

	// HubDatabaseUserName: User name for the sync group hub database credential.
	HubDatabaseUserName *string `json:"hubDatabaseUserName,omitempty"`

	// Interval: Sync interval of the sync group.
	Interval *int `json:"interval,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a sql.azure.com/Servers_Database resource
	Owner *genruntime.KnownResourceReference `group:"sql.azure.com" json:"owner,omitempty" kind:"Servers_Database"`

	// Schema: Sync schema of the sync group.
	Schema *SyncGroupSchema `json:"schema,omitempty"`

	// Sku: The name and capacity of the SKU.
	Sku *Sku `json:"sku,omitempty"`

	// SyncDatabaseReference: ARM resource id of the sync database in the sync group.
	SyncDatabaseReference *genruntime.ResourceReference `armReference:"SyncDatabaseId" json:"syncDatabaseReference,omitempty"`

	// UsePrivateLinkConnection: If use private link connection is enabled.
	UsePrivateLinkConnection *bool `json:"usePrivateLinkConnection,omitempty"`
}

var _ genruntime.ARMTransformer = &Servers_Databases_SyncGroup_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (group *Servers_Databases_SyncGroup_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if group == nil {
		return nil, nil
	}
	result := &Servers_Databases_SyncGroup_Spec_ARM{}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if group.ConflictLoggingRetentionInDays != nil ||
		group.ConflictResolutionPolicy != nil ||
		group.EnableConflictLogging != nil ||
		group.HubDatabasePassword != nil ||
		group.HubDatabaseUserName != nil ||
		group.Interval != nil ||
		group.Schema != nil ||
		group.SyncDatabaseReference != nil ||
		group.UsePrivateLinkConnection != nil {
		result.Properties = &SyncGroupProperties_ARM{}
	}
	if group.ConflictLoggingRetentionInDays != nil {
		conflictLoggingRetentionInDays := *group.ConflictLoggingRetentionInDays
		result.Properties.ConflictLoggingRetentionInDays = &conflictLoggingRetentionInDays
	}
	if group.ConflictResolutionPolicy != nil {
		conflictResolutionPolicy := *group.ConflictResolutionPolicy
		result.Properties.ConflictResolutionPolicy = &conflictResolutionPolicy
	}
	if group.EnableConflictLogging != nil {
		enableConflictLogging := *group.EnableConflictLogging
		result.Properties.EnableConflictLogging = &enableConflictLogging
	}
	if group.HubDatabasePassword != nil {
		hubDatabasePasswordSecret, err := resolved.ResolvedSecrets.Lookup(*group.HubDatabasePassword)
		if err != nil {
			return nil, errors.Wrap(err, "looking up secret for property HubDatabasePassword")
		}
		hubDatabasePassword := hubDatabasePasswordSecret
		result.Properties.HubDatabasePassword = &hubDatabasePassword
	}
	if group.HubDatabaseUserName != nil {
		hubDatabaseUserName := *group.HubDatabaseUserName
		result.Properties.HubDatabaseUserName = &hubDatabaseUserName
	}
	if group.Interval != nil {
		interval := *group.Interval
		result.Properties.Interval = &interval
	}
	if group.Schema != nil {
		schema_ARM, err := (*group.Schema).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		schema := *schema_ARM.(*SyncGroupSchema_ARM)
		result.Properties.Schema = &schema
	}
	if group.SyncDatabaseReference != nil {
		syncDatabaseIdARMID, err := resolved.ResolvedReferences.Lookup(*group.SyncDatabaseReference)
		if err != nil {
			return nil, err
		}
		syncDatabaseId := syncDatabaseIdARMID
		result.Properties.SyncDatabaseId = &syncDatabaseId
	}
	if group.UsePrivateLinkConnection != nil {
		usePrivateLinkConnection := *group.UsePrivateLinkConnection
		result.Properties.UsePrivateLinkConnection = &usePrivateLinkConnection
	}

	// Set property ‘Sku’:
	if group.Sku != nil {
		sku_ARM, err := (*group.Sku).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		sku := *sku_ARM.(*Sku_ARM)
		result.Sku = &sku
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (group *Servers_Databases_SyncGroup_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Servers_Databases_SyncGroup_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (group *Servers_Databases_SyncGroup_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Servers_Databases_SyncGroup_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Servers_Databases_SyncGroup_Spec_ARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	group.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘ConflictLoggingRetentionInDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ConflictLoggingRetentionInDays != nil {
			conflictLoggingRetentionInDays := *typedInput.Properties.ConflictLoggingRetentionInDays
			group.ConflictLoggingRetentionInDays = &conflictLoggingRetentionInDays
		}
	}

	// Set property ‘ConflictResolutionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ConflictResolutionPolicy != nil {
			conflictResolutionPolicy := *typedInput.Properties.ConflictResolutionPolicy
			group.ConflictResolutionPolicy = &conflictResolutionPolicy
		}
	}

	// Set property ‘EnableConflictLogging’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableConflictLogging != nil {
			enableConflictLogging := *typedInput.Properties.EnableConflictLogging
			group.EnableConflictLogging = &enableConflictLogging
		}
	}

	// no assignment for property ‘HubDatabasePassword’

	// Set property ‘HubDatabaseUserName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HubDatabaseUserName != nil {
			hubDatabaseUserName := *typedInput.Properties.HubDatabaseUserName
			group.HubDatabaseUserName = &hubDatabaseUserName
		}
	}

	// Set property ‘Interval’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Interval != nil {
			interval := *typedInput.Properties.Interval
			group.Interval = &interval
		}
	}

	// Set property ‘Owner’:
	group.Owner = &genruntime.KnownResourceReference{Name: owner.Name}

	// Set property ‘Schema’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Schema != nil {
			var schema1 SyncGroupSchema
			err := schema1.PopulateFromARM(owner, *typedInput.Properties.Schema)
			if err != nil {
				return err
			}
			schema := schema1
			group.Schema = &schema
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		group.Sku = &sku
	}

	// no assignment for property ‘SyncDatabaseReference’

	// Set property ‘UsePrivateLinkConnection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UsePrivateLinkConnection != nil {
			usePrivateLinkConnection := *typedInput.Properties.UsePrivateLinkConnection
			group.UsePrivateLinkConnection = &usePrivateLinkConnection
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Servers_Databases_SyncGroup_Spec{}

// ConvertSpecFrom populates our Servers_Databases_SyncGroup_Spec from the provided source
func (group *Servers_Databases_SyncGroup_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20211101s.Servers_Databases_SyncGroup_Spec)
	if ok {
		// Populate our instance from source
		return group.AssignProperties_From_Servers_Databases_SyncGroup_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20211101s.Servers_Databases_SyncGroup_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = group.AssignProperties_From_Servers_Databases_SyncGroup_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Servers_Databases_SyncGroup_Spec
func (group *Servers_Databases_SyncGroup_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20211101s.Servers_Databases_SyncGroup_Spec)
	if ok {
		// Populate destination from our instance
		return group.AssignProperties_To_Servers_Databases_SyncGroup_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20211101s.Servers_Databases_SyncGroup_Spec{}
	err := group.AssignProperties_To_Servers_Databases_SyncGroup_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Servers_Databases_SyncGroup_Spec populates our Servers_Databases_SyncGroup_Spec from the provided source Servers_Databases_SyncGroup_Spec
func (group *Servers_Databases_SyncGroup_Spec) AssignProperties_From_Servers_Databases_SyncGroup_Spec(source *v20211101s.Servers_Databases_SyncGroup_Spec) error {

	// AzureName
	group.AzureName = source.AzureName

	// ConflictLoggingRetentionInDays
	group.ConflictLoggingRetentionInDays = genruntime.ClonePointerToInt(source.ConflictLoggingRetentionInDays)

	// ConflictResolutionPolicy
	if source.ConflictResolutionPolicy != nil {
		conflictResolutionPolicy := SyncGroupProperties_ConflictResolutionPolicy(*source.ConflictResolutionPolicy)
		group.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		group.ConflictResolutionPolicy = nil
	}

	// EnableConflictLogging
	if source.EnableConflictLogging != nil {
		enableConflictLogging := *source.EnableConflictLogging
		group.EnableConflictLogging = &enableConflictLogging
	} else {
		group.EnableConflictLogging = nil
	}

	// HubDatabasePassword
	if source.HubDatabasePassword != nil {
		hubDatabasePassword := source.HubDatabasePassword.Copy()
		group.HubDatabasePassword = &hubDatabasePassword
	} else {
		group.HubDatabasePassword = nil
	}

	// HubDatabaseUserName
	group.HubDatabaseUserName = genruntime.ClonePointerToString(source.HubDatabaseUserName)

	// Interval
	group.Interval = genruntime.ClonePointerToInt(source.Interval)

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		group.Owner = &owner
	} else {
		group.Owner = nil
	}

	// Schema
	if source.Schema != nil {
		var schema SyncGroupSchema
		err := schema.AssignProperties_From_SyncGroupSchema(source.Schema)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SyncGroupSchema() to populate field Schema")
		}
		group.Schema = &schema
	} else {
		group.Schema = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku
		err := sku.AssignProperties_From_Sku(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Sku() to populate field Sku")
		}
		group.Sku = &sku
	} else {
		group.Sku = nil
	}

	// SyncDatabaseReference
	if source.SyncDatabaseReference != nil {
		syncDatabaseReference := source.SyncDatabaseReference.Copy()
		group.SyncDatabaseReference = &syncDatabaseReference
	} else {
		group.SyncDatabaseReference = nil
	}

	// UsePrivateLinkConnection
	if source.UsePrivateLinkConnection != nil {
		usePrivateLinkConnection := *source.UsePrivateLinkConnection
		group.UsePrivateLinkConnection = &usePrivateLinkConnection
	} else {
		group.UsePrivateLinkConnection = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Servers_Databases_SyncGroup_Spec populates the provided destination Servers_Databases_SyncGroup_Spec from our Servers_Databases_SyncGroup_Spec
func (group *Servers_Databases_SyncGroup_Spec) AssignProperties_To_Servers_Databases_SyncGroup_Spec(destination *v20211101s.Servers_Databases_SyncGroup_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = group.AzureName

	// ConflictLoggingRetentionInDays
	destination.ConflictLoggingRetentionInDays = genruntime.ClonePointerToInt(group.ConflictLoggingRetentionInDays)

	// ConflictResolutionPolicy
	if group.ConflictResolutionPolicy != nil {
		conflictResolutionPolicy := string(*group.ConflictResolutionPolicy)
		destination.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		destination.ConflictResolutionPolicy = nil
	}

	// EnableConflictLogging
	if group.EnableConflictLogging != nil {
		enableConflictLogging := *group.EnableConflictLogging
		destination.EnableConflictLogging = &enableConflictLogging
	} else {
		destination.EnableConflictLogging = nil
	}

	// HubDatabasePassword
	if group.HubDatabasePassword != nil {
		hubDatabasePassword := group.HubDatabasePassword.Copy()
		destination.HubDatabasePassword = &hubDatabasePassword
	} else {
		destination.HubDatabasePassword = nil
	}

	// HubDatabaseUserName
	destination.HubDatabaseUserName = genruntime.ClonePointerToString(group.HubDatabaseUserName)

	// Interval
	destination.Interval = genruntime.ClonePointerToInt(group.Interval)

	// OriginalVersion
	destination.OriginalVersion = group.OriginalVersion()

	// Owner
	if group.Owner != nil {
		owner := group.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Schema
	if group.Schema != nil {
		var schema v20211101s.SyncGroupSchema
		err := group.Schema.AssignProperties_To_SyncGroupSchema(&schema)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SyncGroupSchema() to populate field Schema")
		}
		destination.Schema = &schema
	} else {
		destination.Schema = nil
	}

	// Sku
	if group.Sku != nil {
		var sku v20211101s.Sku
		err := group.Sku.AssignProperties_To_Sku(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Sku() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SyncDatabaseReference
	if group.SyncDatabaseReference != nil {
		syncDatabaseReference := group.SyncDatabaseReference.Copy()
		destination.SyncDatabaseReference = &syncDatabaseReference
	} else {
		destination.SyncDatabaseReference = nil
	}

	// UsePrivateLinkConnection
	if group.UsePrivateLinkConnection != nil {
		usePrivateLinkConnection := *group.UsePrivateLinkConnection
		destination.UsePrivateLinkConnection = &usePrivateLinkConnection
	} else {
		destination.UsePrivateLinkConnection = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (group *Servers_Databases_SyncGroup_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (group *Servers_Databases_SyncGroup_Spec) SetAzureName(azureName string) {
	group.AzureName = azureName
}

type Servers_Databases_SyncGroup_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// ConflictLoggingRetentionInDays: Conflict logging retention period.
	ConflictLoggingRetentionInDays *int `json:"conflictLoggingRetentionInDays,omitempty"`

	// ConflictResolutionPolicy: Conflict resolution policy of the sync group.
	ConflictResolutionPolicy *SyncGroupProperties_ConflictResolutionPolicy_STATUS `json:"conflictResolutionPolicy,omitempty"`

	// EnableConflictLogging: If conflict logging is enabled.
	EnableConflictLogging *bool `json:"enableConflictLogging,omitempty"`

	// HubDatabaseUserName: User name for the sync group hub database credential.
	HubDatabaseUserName *string `json:"hubDatabaseUserName,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Interval: Sync interval of the sync group.
	Interval *int `json:"interval,omitempty"`

	// LastSyncTime: Last sync time of the sync group.
	LastSyncTime *string `json:"lastSyncTime,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// PrivateEndpointName: Private endpoint name of the sync group if use private link connection is enabled.
	PrivateEndpointName *string `json:"privateEndpointName,omitempty"`

	// Schema: Sync schema of the sync group.
	Schema *SyncGroupSchema_STATUS `json:"schema,omitempty"`

	// Sku: The name and capacity of the SKU.
	Sku *Sku_STATUS `json:"sku,omitempty"`

	// SyncDatabaseId: ARM resource id of the sync database in the sync group.
	SyncDatabaseId *string `json:"syncDatabaseId,omitempty"`

	// SyncState: Sync state of the sync group.
	SyncState *SyncGroupProperties_SyncState_STATUS `json:"syncState,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`

	// UsePrivateLinkConnection: If use private link connection is enabled.
	UsePrivateLinkConnection *bool `json:"usePrivateLinkConnection,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Servers_Databases_SyncGroup_STATUS{}

// ConvertStatusFrom populates our Servers_Databases_SyncGroup_STATUS from the provided source
func (group *Servers_Databases_SyncGroup_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20211101s.Servers_Databases_SyncGroup_STATUS)
	if ok {
		// Populate our instance from source
		return group.AssignProperties_From_Servers_Databases_SyncGroup_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20211101s.Servers_Databases_SyncGroup_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = group.AssignProperties_From_Servers_Databases_SyncGroup_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Servers_Databases_SyncGroup_STATUS
func (group *Servers_Databases_SyncGroup_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20211101s.Servers_Databases_SyncGroup_STATUS)
	if ok {
		// Populate destination from our instance
		return group.AssignProperties_To_Servers_Databases_SyncGroup_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20211101s.Servers_Databases_SyncGroup_STATUS{}
	err := group.AssignProperties_To_Servers_Databases_SyncGroup_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Servers_Databases_SyncGroup_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (group *Servers_Databases_SyncGroup_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Servers_Databases_SyncGroup_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (group *Servers_Databases_SyncGroup_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Servers_Databases_SyncGroup_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Servers_Databases_SyncGroup_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘ConflictLoggingRetentionInDays’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ConflictLoggingRetentionInDays != nil {
			conflictLoggingRetentionInDays := *typedInput.Properties.ConflictLoggingRetentionInDays
			group.ConflictLoggingRetentionInDays = &conflictLoggingRetentionInDays
		}
	}

	// Set property ‘ConflictResolutionPolicy’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ConflictResolutionPolicy != nil {
			conflictResolutionPolicy := *typedInput.Properties.ConflictResolutionPolicy
			group.ConflictResolutionPolicy = &conflictResolutionPolicy
		}
	}

	// Set property ‘EnableConflictLogging’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EnableConflictLogging != nil {
			enableConflictLogging := *typedInput.Properties.EnableConflictLogging
			group.EnableConflictLogging = &enableConflictLogging
		}
	}

	// Set property ‘HubDatabaseUserName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.HubDatabaseUserName != nil {
			hubDatabaseUserName := *typedInput.Properties.HubDatabaseUserName
			group.HubDatabaseUserName = &hubDatabaseUserName
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		group.Id = &id
	}

	// Set property ‘Interval’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Interval != nil {
			interval := *typedInput.Properties.Interval
			group.Interval = &interval
		}
	}

	// Set property ‘LastSyncTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastSyncTime != nil {
			lastSyncTime := *typedInput.Properties.LastSyncTime
			group.LastSyncTime = &lastSyncTime
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		group.Name = &name
	}

	// Set property ‘PrivateEndpointName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateEndpointName != nil {
			privateEndpointName := *typedInput.Properties.PrivateEndpointName
			group.PrivateEndpointName = &privateEndpointName
		}
	}

	// Set property ‘Schema’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Schema != nil {
			var schema1 SyncGroupSchema_STATUS
			err := schema1.PopulateFromARM(owner, *typedInput.Properties.Schema)
			if err != nil {
				return err
			}
			schema := schema1
			group.Schema = &schema
		}
	}

	// Set property ‘Sku’:
	if typedInput.Sku != nil {
		var sku1 Sku_STATUS
		err := sku1.PopulateFromARM(owner, *typedInput.Sku)
		if err != nil {
			return err
		}
		sku := sku1
		group.Sku = &sku
	}

	// Set property ‘SyncDatabaseId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SyncDatabaseId != nil {
			syncDatabaseId := *typedInput.Properties.SyncDatabaseId
			group.SyncDatabaseId = &syncDatabaseId
		}
	}

	// Set property ‘SyncState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SyncState != nil {
			syncState := *typedInput.Properties.SyncState
			group.SyncState = &syncState
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		group.Type = &typeVar
	}

	// Set property ‘UsePrivateLinkConnection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UsePrivateLinkConnection != nil {
			usePrivateLinkConnection := *typedInput.Properties.UsePrivateLinkConnection
			group.UsePrivateLinkConnection = &usePrivateLinkConnection
		}
	}

	// No error
	return nil
}

// AssignProperties_From_Servers_Databases_SyncGroup_STATUS populates our Servers_Databases_SyncGroup_STATUS from the provided source Servers_Databases_SyncGroup_STATUS
func (group *Servers_Databases_SyncGroup_STATUS) AssignProperties_From_Servers_Databases_SyncGroup_STATUS(source *v20211101s.Servers_Databases_SyncGroup_STATUS) error {

	// Conditions
	group.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// ConflictLoggingRetentionInDays
	group.ConflictLoggingRetentionInDays = genruntime.ClonePointerToInt(source.ConflictLoggingRetentionInDays)

	// ConflictResolutionPolicy
	if source.ConflictResolutionPolicy != nil {
		conflictResolutionPolicy := SyncGroupProperties_ConflictResolutionPolicy_STATUS(*source.ConflictResolutionPolicy)
		group.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		group.ConflictResolutionPolicy = nil
	}

	// EnableConflictLogging
	if source.EnableConflictLogging != nil {
		enableConflictLogging := *source.EnableConflictLogging
		group.EnableConflictLogging = &enableConflictLogging
	} else {
		group.EnableConflictLogging = nil
	}

	// HubDatabaseUserName
	group.HubDatabaseUserName = genruntime.ClonePointerToString(source.HubDatabaseUserName)

	// Id
	group.Id = genruntime.ClonePointerToString(source.Id)

	// Interval
	group.Interval = genruntime.ClonePointerToInt(source.Interval)

	// LastSyncTime
	group.LastSyncTime = genruntime.ClonePointerToString(source.LastSyncTime)

	// Name
	group.Name = genruntime.ClonePointerToString(source.Name)

	// PrivateEndpointName
	group.PrivateEndpointName = genruntime.ClonePointerToString(source.PrivateEndpointName)

	// Schema
	if source.Schema != nil {
		var schema SyncGroupSchema_STATUS
		err := schema.AssignProperties_From_SyncGroupSchema_STATUS(source.Schema)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_SyncGroupSchema_STATUS() to populate field Schema")
		}
		group.Schema = &schema
	} else {
		group.Schema = nil
	}

	// Sku
	if source.Sku != nil {
		var sku Sku_STATUS
		err := sku.AssignProperties_From_Sku_STATUS(source.Sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_Sku_STATUS() to populate field Sku")
		}
		group.Sku = &sku
	} else {
		group.Sku = nil
	}

	// SyncDatabaseId
	group.SyncDatabaseId = genruntime.ClonePointerToString(source.SyncDatabaseId)

	// SyncState
	if source.SyncState != nil {
		syncState := SyncGroupProperties_SyncState_STATUS(*source.SyncState)
		group.SyncState = &syncState
	} else {
		group.SyncState = nil
	}

	// Type
	group.Type = genruntime.ClonePointerToString(source.Type)

	// UsePrivateLinkConnection
	if source.UsePrivateLinkConnection != nil {
		usePrivateLinkConnection := *source.UsePrivateLinkConnection
		group.UsePrivateLinkConnection = &usePrivateLinkConnection
	} else {
		group.UsePrivateLinkConnection = nil
	}

	// No error
	return nil
}

// AssignProperties_To_Servers_Databases_SyncGroup_STATUS populates the provided destination Servers_Databases_SyncGroup_STATUS from our Servers_Databases_SyncGroup_STATUS
func (group *Servers_Databases_SyncGroup_STATUS) AssignProperties_To_Servers_Databases_SyncGroup_STATUS(destination *v20211101s.Servers_Databases_SyncGroup_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(group.Conditions)

	// ConflictLoggingRetentionInDays
	destination.ConflictLoggingRetentionInDays = genruntime.ClonePointerToInt(group.ConflictLoggingRetentionInDays)

	// ConflictResolutionPolicy
	if group.ConflictResolutionPolicy != nil {
		conflictResolutionPolicy := string(*group.ConflictResolutionPolicy)
		destination.ConflictResolutionPolicy = &conflictResolutionPolicy
	} else {
		destination.ConflictResolutionPolicy = nil
	}

	// EnableConflictLogging
	if group.EnableConflictLogging != nil {
		enableConflictLogging := *group.EnableConflictLogging
		destination.EnableConflictLogging = &enableConflictLogging
	} else {
		destination.EnableConflictLogging = nil
	}

	// HubDatabaseUserName
	destination.HubDatabaseUserName = genruntime.ClonePointerToString(group.HubDatabaseUserName)

	// Id
	destination.Id = genruntime.ClonePointerToString(group.Id)

	// Interval
	destination.Interval = genruntime.ClonePointerToInt(group.Interval)

	// LastSyncTime
	destination.LastSyncTime = genruntime.ClonePointerToString(group.LastSyncTime)

	// Name
	destination.Name = genruntime.ClonePointerToString(group.Name)

	// PrivateEndpointName
	destination.PrivateEndpointName = genruntime.ClonePointerToString(group.PrivateEndpointName)

	// Schema
	if group.Schema != nil {
		var schema v20211101s.SyncGroupSchema_STATUS
		err := group.Schema.AssignProperties_To_SyncGroupSchema_STATUS(&schema)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_SyncGroupSchema_STATUS() to populate field Schema")
		}
		destination.Schema = &schema
	} else {
		destination.Schema = nil
	}

	// Sku
	if group.Sku != nil {
		var sku v20211101s.Sku_STATUS
		err := group.Sku.AssignProperties_To_Sku_STATUS(&sku)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_Sku_STATUS() to populate field Sku")
		}
		destination.Sku = &sku
	} else {
		destination.Sku = nil
	}

	// SyncDatabaseId
	destination.SyncDatabaseId = genruntime.ClonePointerToString(group.SyncDatabaseId)

	// SyncState
	if group.SyncState != nil {
		syncState := string(*group.SyncState)
		destination.SyncState = &syncState
	} else {
		destination.SyncState = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(group.Type)

	// UsePrivateLinkConnection
	if group.UsePrivateLinkConnection != nil {
		usePrivateLinkConnection := *group.UsePrivateLinkConnection
		destination.UsePrivateLinkConnection = &usePrivateLinkConnection
	} else {
		destination.UsePrivateLinkConnection = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"HubWin","MemberWin"}
type SyncGroupProperties_ConflictResolutionPolicy string

const (
	SyncGroupProperties_ConflictResolutionPolicy_HubWin    = SyncGroupProperties_ConflictResolutionPolicy("HubWin")
	SyncGroupProperties_ConflictResolutionPolicy_MemberWin = SyncGroupProperties_ConflictResolutionPolicy("MemberWin")
)

type SyncGroupProperties_ConflictResolutionPolicy_STATUS string

const (
	SyncGroupProperties_ConflictResolutionPolicy_STATUS_HubWin    = SyncGroupProperties_ConflictResolutionPolicy_STATUS("HubWin")
	SyncGroupProperties_ConflictResolutionPolicy_STATUS_MemberWin = SyncGroupProperties_ConflictResolutionPolicy_STATUS("MemberWin")
)

type SyncGroupProperties_SyncState_STATUS string

const (
	SyncGroupProperties_SyncState_STATUS_Error       = SyncGroupProperties_SyncState_STATUS("Error")
	SyncGroupProperties_SyncState_STATUS_Good        = SyncGroupProperties_SyncState_STATUS("Good")
	SyncGroupProperties_SyncState_STATUS_NotReady    = SyncGroupProperties_SyncState_STATUS("NotReady")
	SyncGroupProperties_SyncState_STATUS_Progressing = SyncGroupProperties_SyncState_STATUS("Progressing")
	SyncGroupProperties_SyncState_STATUS_Warning     = SyncGroupProperties_SyncState_STATUS("Warning")
)

// Properties of sync group schema.
type SyncGroupSchema struct {
	// MasterSyncMemberName: Name of master sync member where the schema is from.
	MasterSyncMemberName *string `json:"masterSyncMemberName,omitempty"`

	// Tables: List of tables in sync group schema.
	Tables []SyncGroupSchemaTable `json:"tables,omitempty"`
}

var _ genruntime.ARMTransformer = &SyncGroupSchema{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (schema *SyncGroupSchema) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if schema == nil {
		return nil, nil
	}
	result := &SyncGroupSchema_ARM{}

	// Set property ‘MasterSyncMemberName’:
	if schema.MasterSyncMemberName != nil {
		masterSyncMemberName := *schema.MasterSyncMemberName
		result.MasterSyncMemberName = &masterSyncMemberName
	}

	// Set property ‘Tables’:
	for _, item := range schema.Tables {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Tables = append(result.Tables, *item_ARM.(*SyncGroupSchemaTable_ARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (schema *SyncGroupSchema) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SyncGroupSchema_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (schema *SyncGroupSchema) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SyncGroupSchema_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SyncGroupSchema_ARM, got %T", armInput)
	}

	// Set property ‘MasterSyncMemberName’:
	if typedInput.MasterSyncMemberName != nil {
		masterSyncMemberName := *typedInput.MasterSyncMemberName
		schema.MasterSyncMemberName = &masterSyncMemberName
	}

	// Set property ‘Tables’:
	for _, item := range typedInput.Tables {
		var item1 SyncGroupSchemaTable
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		schema.Tables = append(schema.Tables, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_SyncGroupSchema populates our SyncGroupSchema from the provided source SyncGroupSchema
func (schema *SyncGroupSchema) AssignProperties_From_SyncGroupSchema(source *v20211101s.SyncGroupSchema) error {

	// MasterSyncMemberName
	schema.MasterSyncMemberName = genruntime.ClonePointerToString(source.MasterSyncMemberName)

	// Tables
	if source.Tables != nil {
		tableList := make([]SyncGroupSchemaTable, len(source.Tables))
		for tableIndex, tableItem := range source.Tables {
			// Shadow the loop variable to avoid aliasing
			tableItem := tableItem
			var table SyncGroupSchemaTable
			err := table.AssignProperties_From_SyncGroupSchemaTable(&tableItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SyncGroupSchemaTable() to populate field Tables")
			}
			tableList[tableIndex] = table
		}
		schema.Tables = tableList
	} else {
		schema.Tables = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SyncGroupSchema populates the provided destination SyncGroupSchema from our SyncGroupSchema
func (schema *SyncGroupSchema) AssignProperties_To_SyncGroupSchema(destination *v20211101s.SyncGroupSchema) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MasterSyncMemberName
	destination.MasterSyncMemberName = genruntime.ClonePointerToString(schema.MasterSyncMemberName)

	// Tables
	if schema.Tables != nil {
		tableList := make([]v20211101s.SyncGroupSchemaTable, len(schema.Tables))
		for tableIndex, tableItem := range schema.Tables {
			// Shadow the loop variable to avoid aliasing
			tableItem := tableItem
			var table v20211101s.SyncGroupSchemaTable
			err := tableItem.AssignProperties_To_SyncGroupSchemaTable(&table)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SyncGroupSchemaTable() to populate field Tables")
			}
			tableList[tableIndex] = table
		}
		destination.Tables = tableList
	} else {
		destination.Tables = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Properties of sync group schema.
type SyncGroupSchema_STATUS struct {
	// MasterSyncMemberName: Name of master sync member where the schema is from.
	MasterSyncMemberName *string `json:"masterSyncMemberName,omitempty"`

	// Tables: List of tables in sync group schema.
	Tables []SyncGroupSchemaTable_STATUS `json:"tables,omitempty"`
}

var _ genruntime.FromARMConverter = &SyncGroupSchema_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (schema *SyncGroupSchema_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SyncGroupSchema_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (schema *SyncGroupSchema_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SyncGroupSchema_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SyncGroupSchema_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘MasterSyncMemberName’:
	if typedInput.MasterSyncMemberName != nil {
		masterSyncMemberName := *typedInput.MasterSyncMemberName
		schema.MasterSyncMemberName = &masterSyncMemberName
	}

	// Set property ‘Tables’:
	for _, item := range typedInput.Tables {
		var item1 SyncGroupSchemaTable_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		schema.Tables = append(schema.Tables, item1)
	}

	// No error
	return nil
}

// AssignProperties_From_SyncGroupSchema_STATUS populates our SyncGroupSchema_STATUS from the provided source SyncGroupSchema_STATUS
func (schema *SyncGroupSchema_STATUS) AssignProperties_From_SyncGroupSchema_STATUS(source *v20211101s.SyncGroupSchema_STATUS) error {

	// MasterSyncMemberName
	schema.MasterSyncMemberName = genruntime.ClonePointerToString(source.MasterSyncMemberName)

	// Tables
	if source.Tables != nil {
		tableList := make([]SyncGroupSchemaTable_STATUS, len(source.Tables))
		for tableIndex, tableItem := range source.Tables {
			// Shadow the loop variable to avoid aliasing
			tableItem := tableItem
			var table SyncGroupSchemaTable_STATUS
			err := table.AssignProperties_From_SyncGroupSchemaTable_STATUS(&tableItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SyncGroupSchemaTable_STATUS() to populate field Tables")
			}
			tableList[tableIndex] = table
		}
		schema.Tables = tableList
	} else {
		schema.Tables = nil
	}

	// No error
	return nil
}

// AssignProperties_To_SyncGroupSchema_STATUS populates the provided destination SyncGroupSchema_STATUS from our SyncGroupSchema_STATUS
func (schema *SyncGroupSchema_STATUS) AssignProperties_To_SyncGroupSchema_STATUS(destination *v20211101s.SyncGroupSchema_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// MasterSyncMemberName
	destination.MasterSyncMemberName = genruntime.ClonePointerToString(schema.MasterSyncMemberName)

	// Tables
	if schema.Tables != nil {
		tableList := make([]v20211101s.SyncGroupSchemaTable_STATUS, len(schema.Tables))
		for tableIndex, tableItem := range schema.Tables {
			// Shadow the loop variable to avoid aliasing
			tableItem := tableItem
			var table v20211101s.SyncGroupSchemaTable_STATUS
			err := tableItem.AssignProperties_To_SyncGroupSchemaTable_STATUS(&table)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SyncGroupSchemaTable_STATUS() to populate field Tables")
			}
			tableList[tableIndex] = table
		}
		destination.Tables = tableList
	} else {
		destination.Tables = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Properties of table in sync group schema.
type SyncGroupSchemaTable struct {
	// Columns: List of columns in sync group schema.
	Columns []SyncGroupSchemaTableColumn `json:"columns,omitempty"`

	// QuotedName: Quoted name of sync group schema table.
	QuotedName *string `json:"quotedName,omitempty"`
}

var _ genruntime.ARMTransformer = &SyncGroupSchemaTable{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (table *SyncGroupSchemaTable) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if table == nil {
		return nil, nil
	}
	result := &SyncGroupSchemaTable_ARM{}

	// Set property ‘Columns’:
	for _, item := range table.Columns {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Columns = append(result.Columns, *item_ARM.(*SyncGroupSchemaTableColumn_ARM))
	}

	// Set property ‘QuotedName’:
	if table.QuotedName != nil {
		quotedName := *table.QuotedName
		result.QuotedName = &quotedName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (table *SyncGroupSchemaTable) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SyncGroupSchemaTable_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (table *SyncGroupSchemaTable) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SyncGroupSchemaTable_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SyncGroupSchemaTable_ARM, got %T", armInput)
	}

	// Set property ‘Columns’:
	for _, item := range typedInput.Columns {
		var item1 SyncGroupSchemaTableColumn
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		table.Columns = append(table.Columns, item1)
	}

	// Set property ‘QuotedName’:
	if typedInput.QuotedName != nil {
		quotedName := *typedInput.QuotedName
		table.QuotedName = &quotedName
	}

	// No error
	return nil
}

// AssignProperties_From_SyncGroupSchemaTable populates our SyncGroupSchemaTable from the provided source SyncGroupSchemaTable
func (table *SyncGroupSchemaTable) AssignProperties_From_SyncGroupSchemaTable(source *v20211101s.SyncGroupSchemaTable) error {

	// Columns
	if source.Columns != nil {
		columnList := make([]SyncGroupSchemaTableColumn, len(source.Columns))
		for columnIndex, columnItem := range source.Columns {
			// Shadow the loop variable to avoid aliasing
			columnItem := columnItem
			var column SyncGroupSchemaTableColumn
			err := column.AssignProperties_From_SyncGroupSchemaTableColumn(&columnItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SyncGroupSchemaTableColumn() to populate field Columns")
			}
			columnList[columnIndex] = column
		}
		table.Columns = columnList
	} else {
		table.Columns = nil
	}

	// QuotedName
	table.QuotedName = genruntime.ClonePointerToString(source.QuotedName)

	// No error
	return nil
}

// AssignProperties_To_SyncGroupSchemaTable populates the provided destination SyncGroupSchemaTable from our SyncGroupSchemaTable
func (table *SyncGroupSchemaTable) AssignProperties_To_SyncGroupSchemaTable(destination *v20211101s.SyncGroupSchemaTable) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Columns
	if table.Columns != nil {
		columnList := make([]v20211101s.SyncGroupSchemaTableColumn, len(table.Columns))
		for columnIndex, columnItem := range table.Columns {
			// Shadow the loop variable to avoid aliasing
			columnItem := columnItem
			var column v20211101s.SyncGroupSchemaTableColumn
			err := columnItem.AssignProperties_To_SyncGroupSchemaTableColumn(&column)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SyncGroupSchemaTableColumn() to populate field Columns")
			}
			columnList[columnIndex] = column
		}
		destination.Columns = columnList
	} else {
		destination.Columns = nil
	}

	// QuotedName
	destination.QuotedName = genruntime.ClonePointerToString(table.QuotedName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Properties of table in sync group schema.
type SyncGroupSchemaTable_STATUS struct {
	// Columns: List of columns in sync group schema.
	Columns []SyncGroupSchemaTableColumn_STATUS `json:"columns,omitempty"`

	// QuotedName: Quoted name of sync group schema table.
	QuotedName *string `json:"quotedName,omitempty"`
}

var _ genruntime.FromARMConverter = &SyncGroupSchemaTable_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (table *SyncGroupSchemaTable_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SyncGroupSchemaTable_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (table *SyncGroupSchemaTable_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SyncGroupSchemaTable_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SyncGroupSchemaTable_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘Columns’:
	for _, item := range typedInput.Columns {
		var item1 SyncGroupSchemaTableColumn_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		table.Columns = append(table.Columns, item1)
	}

	// Set property ‘QuotedName’:
	if typedInput.QuotedName != nil {
		quotedName := *typedInput.QuotedName
		table.QuotedName = &quotedName
	}

	// No error
	return nil
}

// AssignProperties_From_SyncGroupSchemaTable_STATUS populates our SyncGroupSchemaTable_STATUS from the provided source SyncGroupSchemaTable_STATUS
func (table *SyncGroupSchemaTable_STATUS) AssignProperties_From_SyncGroupSchemaTable_STATUS(source *v20211101s.SyncGroupSchemaTable_STATUS) error {

	// Columns
	if source.Columns != nil {
		columnList := make([]SyncGroupSchemaTableColumn_STATUS, len(source.Columns))
		for columnIndex, columnItem := range source.Columns {
			// Shadow the loop variable to avoid aliasing
			columnItem := columnItem
			var column SyncGroupSchemaTableColumn_STATUS
			err := column.AssignProperties_From_SyncGroupSchemaTableColumn_STATUS(&columnItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_SyncGroupSchemaTableColumn_STATUS() to populate field Columns")
			}
			columnList[columnIndex] = column
		}
		table.Columns = columnList
	} else {
		table.Columns = nil
	}

	// QuotedName
	table.QuotedName = genruntime.ClonePointerToString(source.QuotedName)

	// No error
	return nil
}

// AssignProperties_To_SyncGroupSchemaTable_STATUS populates the provided destination SyncGroupSchemaTable_STATUS from our SyncGroupSchemaTable_STATUS
func (table *SyncGroupSchemaTable_STATUS) AssignProperties_To_SyncGroupSchemaTable_STATUS(destination *v20211101s.SyncGroupSchemaTable_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Columns
	if table.Columns != nil {
		columnList := make([]v20211101s.SyncGroupSchemaTableColumn_STATUS, len(table.Columns))
		for columnIndex, columnItem := range table.Columns {
			// Shadow the loop variable to avoid aliasing
			columnItem := columnItem
			var column v20211101s.SyncGroupSchemaTableColumn_STATUS
			err := columnItem.AssignProperties_To_SyncGroupSchemaTableColumn_STATUS(&column)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_SyncGroupSchemaTableColumn_STATUS() to populate field Columns")
			}
			columnList[columnIndex] = column
		}
		destination.Columns = columnList
	} else {
		destination.Columns = nil
	}

	// QuotedName
	destination.QuotedName = genruntime.ClonePointerToString(table.QuotedName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Properties of column in sync group table.
type SyncGroupSchemaTableColumn struct {
	// DataSize: Data size of the column.
	DataSize *string `json:"dataSize,omitempty"`

	// DataType: Data type of the column.
	DataType *string `json:"dataType,omitempty"`

	// QuotedName: Quoted name of sync group table column.
	QuotedName *string `json:"quotedName,omitempty"`
}

var _ genruntime.ARMTransformer = &SyncGroupSchemaTableColumn{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (column *SyncGroupSchemaTableColumn) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if column == nil {
		return nil, nil
	}
	result := &SyncGroupSchemaTableColumn_ARM{}

	// Set property ‘DataSize’:
	if column.DataSize != nil {
		dataSize := *column.DataSize
		result.DataSize = &dataSize
	}

	// Set property ‘DataType’:
	if column.DataType != nil {
		dataType := *column.DataType
		result.DataType = &dataType
	}

	// Set property ‘QuotedName’:
	if column.QuotedName != nil {
		quotedName := *column.QuotedName
		result.QuotedName = &quotedName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (column *SyncGroupSchemaTableColumn) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SyncGroupSchemaTableColumn_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (column *SyncGroupSchemaTableColumn) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SyncGroupSchemaTableColumn_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SyncGroupSchemaTableColumn_ARM, got %T", armInput)
	}

	// Set property ‘DataSize’:
	if typedInput.DataSize != nil {
		dataSize := *typedInput.DataSize
		column.DataSize = &dataSize
	}

	// Set property ‘DataType’:
	if typedInput.DataType != nil {
		dataType := *typedInput.DataType
		column.DataType = &dataType
	}

	// Set property ‘QuotedName’:
	if typedInput.QuotedName != nil {
		quotedName := *typedInput.QuotedName
		column.QuotedName = &quotedName
	}

	// No error
	return nil
}

// AssignProperties_From_SyncGroupSchemaTableColumn populates our SyncGroupSchemaTableColumn from the provided source SyncGroupSchemaTableColumn
func (column *SyncGroupSchemaTableColumn) AssignProperties_From_SyncGroupSchemaTableColumn(source *v20211101s.SyncGroupSchemaTableColumn) error {

	// DataSize
	column.DataSize = genruntime.ClonePointerToString(source.DataSize)

	// DataType
	column.DataType = genruntime.ClonePointerToString(source.DataType)

	// QuotedName
	column.QuotedName = genruntime.ClonePointerToString(source.QuotedName)

	// No error
	return nil
}

// AssignProperties_To_SyncGroupSchemaTableColumn populates the provided destination SyncGroupSchemaTableColumn from our SyncGroupSchemaTableColumn
func (column *SyncGroupSchemaTableColumn) AssignProperties_To_SyncGroupSchemaTableColumn(destination *v20211101s.SyncGroupSchemaTableColumn) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DataSize
	destination.DataSize = genruntime.ClonePointerToString(column.DataSize)

	// DataType
	destination.DataType = genruntime.ClonePointerToString(column.DataType)

	// QuotedName
	destination.QuotedName = genruntime.ClonePointerToString(column.QuotedName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Properties of column in sync group table.
type SyncGroupSchemaTableColumn_STATUS struct {
	// DataSize: Data size of the column.
	DataSize *string `json:"dataSize,omitempty"`

	// DataType: Data type of the column.
	DataType *string `json:"dataType,omitempty"`

	// QuotedName: Quoted name of sync group table column.
	QuotedName *string `json:"quotedName,omitempty"`
}

var _ genruntime.FromARMConverter = &SyncGroupSchemaTableColumn_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (column *SyncGroupSchemaTableColumn_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &SyncGroupSchemaTableColumn_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (column *SyncGroupSchemaTableColumn_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(SyncGroupSchemaTableColumn_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected SyncGroupSchemaTableColumn_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘DataSize’:
	if typedInput.DataSize != nil {
		dataSize := *typedInput.DataSize
		column.DataSize = &dataSize
	}

	// Set property ‘DataType’:
	if typedInput.DataType != nil {
		dataType := *typedInput.DataType
		column.DataType = &dataType
	}

	// Set property ‘QuotedName’:
	if typedInput.QuotedName != nil {
		quotedName := *typedInput.QuotedName
		column.QuotedName = &quotedName
	}

	// No error
	return nil
}

// AssignProperties_From_SyncGroupSchemaTableColumn_STATUS populates our SyncGroupSchemaTableColumn_STATUS from the provided source SyncGroupSchemaTableColumn_STATUS
func (column *SyncGroupSchemaTableColumn_STATUS) AssignProperties_From_SyncGroupSchemaTableColumn_STATUS(source *v20211101s.SyncGroupSchemaTableColumn_STATUS) error {

	// DataSize
	column.DataSize = genruntime.ClonePointerToString(source.DataSize)

	// DataType
	column.DataType = genruntime.ClonePointerToString(source.DataType)

	// QuotedName
	column.QuotedName = genruntime.ClonePointerToString(source.QuotedName)

	// No error
	return nil
}

// AssignProperties_To_SyncGroupSchemaTableColumn_STATUS populates the provided destination SyncGroupSchemaTableColumn_STATUS from our SyncGroupSchemaTableColumn_STATUS
func (column *SyncGroupSchemaTableColumn_STATUS) AssignProperties_To_SyncGroupSchemaTableColumn_STATUS(destination *v20211101s.SyncGroupSchemaTableColumn_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// DataSize
	destination.DataSize = genruntime.ClonePointerToString(column.DataSize)

	// DataType
	destination.DataType = genruntime.ClonePointerToString(column.DataType)

	// QuotedName
	destination.QuotedName = genruntime.ClonePointerToString(column.QuotedName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&Servers_Databases_SyncGroup{}, &Servers_Databases_SyncGroupList{})
}
