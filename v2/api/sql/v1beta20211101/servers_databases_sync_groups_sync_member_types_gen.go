// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"fmt"
	v20211101s "github.com/Azure/azure-service-operator/v2/api/sql/v1beta20211101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/SyncMembers.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}
type Servers_Databases_SyncGroups_SyncMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Servers_Databases_SyncGroups_SyncMember_Spec   `json:"spec,omitempty"`
	Status            Servers_Databases_SyncGroups_SyncMember_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Servers_Databases_SyncGroups_SyncMember{}

// GetConditions returns the conditions of the resource
func (member *Servers_Databases_SyncGroups_SyncMember) GetConditions() conditions.Conditions {
	return member.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (member *Servers_Databases_SyncGroups_SyncMember) SetConditions(conditions conditions.Conditions) {
	member.Status.Conditions = conditions
}

var _ conversion.Convertible = &Servers_Databases_SyncGroups_SyncMember{}

// ConvertFrom populates our Servers_Databases_SyncGroups_SyncMember from the provided hub Servers_Databases_SyncGroups_SyncMember
func (member *Servers_Databases_SyncGroups_SyncMember) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20211101s.Servers_Databases_SyncGroups_SyncMember)
	if !ok {
		return fmt.Errorf("expected sql/v1beta20211101storage/Servers_Databases_SyncGroups_SyncMember but received %T instead", hub)
	}

	return member.AssignProperties_From_Servers_Databases_SyncGroups_SyncMember(source)
}

// ConvertTo populates the provided hub Servers_Databases_SyncGroups_SyncMember from our Servers_Databases_SyncGroups_SyncMember
func (member *Servers_Databases_SyncGroups_SyncMember) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20211101s.Servers_Databases_SyncGroups_SyncMember)
	if !ok {
		return fmt.Errorf("expected sql/v1beta20211101storage/Servers_Databases_SyncGroups_SyncMember but received %T instead", hub)
	}

	return member.AssignProperties_To_Servers_Databases_SyncGroups_SyncMember(destination)
}

// +kubebuilder:webhook:path=/mutate-sql-azure-com-v1beta20211101-servers_databases_syncgroups_syncmember,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=sql.azure.com,resources=servers_databases_syncgroups_syncmembers,verbs=create;update,versions=v1beta20211101,name=default.v1beta20211101.servers_databases_syncgroups_syncmembers.sql.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &Servers_Databases_SyncGroups_SyncMember{}

// Default applies defaults to the Servers_Databases_SyncGroups_SyncMember resource
func (member *Servers_Databases_SyncGroups_SyncMember) Default() {
	member.defaultImpl()
	var temp interface{} = member
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (member *Servers_Databases_SyncGroups_SyncMember) defaultAzureName() {
	if member.Spec.AzureName == "" {
		member.Spec.AzureName = member.Name
	}
}

// defaultImpl applies the code generated defaults to the Servers_Databases_SyncGroups_SyncMember resource
func (member *Servers_Databases_SyncGroups_SyncMember) defaultImpl() { member.defaultAzureName() }

var _ genruntime.KubernetesResource = &Servers_Databases_SyncGroups_SyncMember{}

// AzureName returns the Azure name of the resource
func (member *Servers_Databases_SyncGroups_SyncMember) AzureName() string {
	return member.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (member Servers_Databases_SyncGroups_SyncMember) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (member *Servers_Databases_SyncGroups_SyncMember) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (member *Servers_Databases_SyncGroups_SyncMember) GetSpec() genruntime.ConvertibleSpec {
	return &member.Spec
}

// GetStatus returns the status of this resource
func (member *Servers_Databases_SyncGroups_SyncMember) GetStatus() genruntime.ConvertibleStatus {
	return &member.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Sql/servers/databases/syncGroups/syncMembers"
func (member *Servers_Databases_SyncGroups_SyncMember) GetType() string {
	return "Microsoft.Sql/servers/databases/syncGroups/syncMembers"
}

// NewEmptyStatus returns a new empty (blank) status
func (member *Servers_Databases_SyncGroups_SyncMember) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Servers_Databases_SyncGroups_SyncMember_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (member *Servers_Databases_SyncGroups_SyncMember) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(member.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  member.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (member *Servers_Databases_SyncGroups_SyncMember) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Servers_Databases_SyncGroups_SyncMember_STATUS); ok {
		member.Status = *st
		return nil
	}

	// Convert status to required version
	var st Servers_Databases_SyncGroups_SyncMember_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	member.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-sql-azure-com-v1beta20211101-servers_databases_syncgroups_syncmember,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=sql.azure.com,resources=servers_databases_syncgroups_syncmembers,verbs=create;update,versions=v1beta20211101,name=validate.v1beta20211101.servers_databases_syncgroups_syncmembers.sql.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &Servers_Databases_SyncGroups_SyncMember{}

// ValidateCreate validates the creation of the resource
func (member *Servers_Databases_SyncGroups_SyncMember) ValidateCreate() error {
	validations := member.createValidations()
	var temp interface{} = member
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (member *Servers_Databases_SyncGroups_SyncMember) ValidateDelete() error {
	validations := member.deleteValidations()
	var temp interface{} = member
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (member *Servers_Databases_SyncGroups_SyncMember) ValidateUpdate(old runtime.Object) error {
	validations := member.updateValidations()
	var temp interface{} = member
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (member *Servers_Databases_SyncGroups_SyncMember) createValidations() []func() error {
	return []func() error{member.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (member *Servers_Databases_SyncGroups_SyncMember) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (member *Servers_Databases_SyncGroups_SyncMember) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return member.validateResourceReferences()
		},
		member.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (member *Servers_Databases_SyncGroups_SyncMember) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&member.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (member *Servers_Databases_SyncGroups_SyncMember) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*Servers_Databases_SyncGroups_SyncMember)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, member)
}

// AssignProperties_From_Servers_Databases_SyncGroups_SyncMember populates our Servers_Databases_SyncGroups_SyncMember from the provided source Servers_Databases_SyncGroups_SyncMember
func (member *Servers_Databases_SyncGroups_SyncMember) AssignProperties_From_Servers_Databases_SyncGroups_SyncMember(source *v20211101s.Servers_Databases_SyncGroups_SyncMember) error {

	// ObjectMeta
	member.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec Servers_Databases_SyncGroups_SyncMember_Spec
	err := spec.AssignProperties_From_Servers_Databases_SyncGroups_SyncMember_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Servers_Databases_SyncGroups_SyncMember_Spec() to populate field Spec")
	}
	member.Spec = spec

	// Status
	var status Servers_Databases_SyncGroups_SyncMember_STATUS
	err = status.AssignProperties_From_Servers_Databases_SyncGroups_SyncMember_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_Servers_Databases_SyncGroups_SyncMember_STATUS() to populate field Status")
	}
	member.Status = status

	// No error
	return nil
}

// AssignProperties_To_Servers_Databases_SyncGroups_SyncMember populates the provided destination Servers_Databases_SyncGroups_SyncMember from our Servers_Databases_SyncGroups_SyncMember
func (member *Servers_Databases_SyncGroups_SyncMember) AssignProperties_To_Servers_Databases_SyncGroups_SyncMember(destination *v20211101s.Servers_Databases_SyncGroups_SyncMember) error {

	// ObjectMeta
	destination.ObjectMeta = *member.ObjectMeta.DeepCopy()

	// Spec
	var spec v20211101s.Servers_Databases_SyncGroups_SyncMember_Spec
	err := member.Spec.AssignProperties_To_Servers_Databases_SyncGroups_SyncMember_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Servers_Databases_SyncGroups_SyncMember_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20211101s.Servers_Databases_SyncGroups_SyncMember_STATUS
	err = member.Status.AssignProperties_To_Servers_Databases_SyncGroups_SyncMember_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_Servers_Databases_SyncGroups_SyncMember_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (member *Servers_Databases_SyncGroups_SyncMember) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: member.Spec.OriginalVersion(),
		Kind:    "Servers_Databases_SyncGroups_SyncMember",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/SyncMembers.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}
type Servers_Databases_SyncGroups_SyncMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Servers_Databases_SyncGroups_SyncMember `json:"items"`
}

type Servers_Databases_SyncGroups_SyncMember_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// DatabaseName: Database name of the member database in the sync member.
	DatabaseName *string `json:"databaseName,omitempty"`

	// DatabaseType: Database type of the sync member.
	DatabaseType *SyncMemberProperties_DatabaseType `json:"databaseType,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a sql.azure.com/Servers_Databases_SyncGroup resource
	Owner *genruntime.KnownResourceReference `group:"sql.azure.com" json:"owner,omitempty" kind:"Servers_Databases_SyncGroup"`

	// Password: Password of the member database in the sync member.
	Password *string `json:"password,omitempty"`

	// ServerName: Server name of the member database in the sync member
	ServerName *string `json:"serverName,omitempty"`

	// +kubebuilder:validation:Pattern="^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$"
	// SqlServerDatabaseId: SQL Server database id of the sync member.
	SqlServerDatabaseId *string `json:"sqlServerDatabaseId,omitempty"`

	// SyncAgentReference: ARM resource id of the sync agent in the sync member.
	SyncAgentReference *genruntime.ResourceReference `armReference:"SyncAgentId" json:"syncAgentReference,omitempty"`

	// SyncDirection: Sync direction of the sync member.
	SyncDirection *SyncMemberProperties_SyncDirection `json:"syncDirection,omitempty"`

	// SyncMemberAzureDatabaseResourceReference: ARM resource id of the sync member logical database, for sync members in Azure.
	SyncMemberAzureDatabaseResourceReference *genruntime.ResourceReference `armReference:"SyncMemberAzureDatabaseResourceId" json:"syncMemberAzureDatabaseResourceReference,omitempty"`

	// UsePrivateLinkConnection: Whether to use private link connection.
	UsePrivateLinkConnection *bool `json:"usePrivateLinkConnection,omitempty"`

	// UserName: User name of the member database in the sync member.
	UserName *string `json:"userName,omitempty"`
}

var _ genruntime.ARMTransformer = &Servers_Databases_SyncGroups_SyncMember_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (member *Servers_Databases_SyncGroups_SyncMember_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if member == nil {
		return nil, nil
	}
	result := &Servers_Databases_SyncGroups_SyncMember_Spec_ARM{}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if member.DatabaseName != nil ||
		member.DatabaseType != nil ||
		member.Password != nil ||
		member.ServerName != nil ||
		member.SqlServerDatabaseId != nil ||
		member.SyncAgentReference != nil ||
		member.SyncDirection != nil ||
		member.SyncMemberAzureDatabaseResourceReference != nil ||
		member.UsePrivateLinkConnection != nil ||
		member.UserName != nil {
		result.Properties = &SyncMemberProperties_ARM{}
	}
	if member.DatabaseName != nil {
		databaseName := *member.DatabaseName
		result.Properties.DatabaseName = &databaseName
	}
	if member.DatabaseType != nil {
		databaseType := *member.DatabaseType
		result.Properties.DatabaseType = &databaseType
	}
	if member.Password != nil {
		password := *member.Password
		result.Properties.Password = &password
	}
	if member.ServerName != nil {
		serverName := *member.ServerName
		result.Properties.ServerName = &serverName
	}
	if member.SqlServerDatabaseId != nil {
		sqlServerDatabaseId := *member.SqlServerDatabaseId
		result.Properties.SqlServerDatabaseId = &sqlServerDatabaseId
	}
	if member.SyncAgentReference != nil {
		syncAgentIdARMID, err := resolved.ResolvedReferences.Lookup(*member.SyncAgentReference)
		if err != nil {
			return nil, err
		}
		syncAgentId := syncAgentIdARMID
		result.Properties.SyncAgentId = &syncAgentId
	}
	if member.SyncDirection != nil {
		syncDirection := *member.SyncDirection
		result.Properties.SyncDirection = &syncDirection
	}
	if member.SyncMemberAzureDatabaseResourceReference != nil {
		syncMemberAzureDatabaseResourceIdARMID, err := resolved.ResolvedReferences.Lookup(*member.SyncMemberAzureDatabaseResourceReference)
		if err != nil {
			return nil, err
		}
		syncMemberAzureDatabaseResourceId := syncMemberAzureDatabaseResourceIdARMID
		result.Properties.SyncMemberAzureDatabaseResourceId = &syncMemberAzureDatabaseResourceId
	}
	if member.UsePrivateLinkConnection != nil {
		usePrivateLinkConnection := *member.UsePrivateLinkConnection
		result.Properties.UsePrivateLinkConnection = &usePrivateLinkConnection
	}
	if member.UserName != nil {
		userName := *member.UserName
		result.Properties.UserName = &userName
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (member *Servers_Databases_SyncGroups_SyncMember_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Servers_Databases_SyncGroups_SyncMember_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (member *Servers_Databases_SyncGroups_SyncMember_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Servers_Databases_SyncGroups_SyncMember_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Servers_Databases_SyncGroups_SyncMember_Spec_ARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	member.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘DatabaseName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DatabaseName != nil {
			databaseName := *typedInput.Properties.DatabaseName
			member.DatabaseName = &databaseName
		}
	}

	// Set property ‘DatabaseType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DatabaseType != nil {
			databaseType := *typedInput.Properties.DatabaseType
			member.DatabaseType = &databaseType
		}
	}

	// Set property ‘Owner’:
	member.Owner = &genruntime.KnownResourceReference{Name: owner.Name}

	// Set property ‘Password’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Password != nil {
			password := *typedInput.Properties.Password
			member.Password = &password
		}
	}

	// Set property ‘ServerName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServerName != nil {
			serverName := *typedInput.Properties.ServerName
			member.ServerName = &serverName
		}
	}

	// Set property ‘SqlServerDatabaseId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SqlServerDatabaseId != nil {
			sqlServerDatabaseId := *typedInput.Properties.SqlServerDatabaseId
			member.SqlServerDatabaseId = &sqlServerDatabaseId
		}
	}

	// no assignment for property ‘SyncAgentReference’

	// Set property ‘SyncDirection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SyncDirection != nil {
			syncDirection := *typedInput.Properties.SyncDirection
			member.SyncDirection = &syncDirection
		}
	}

	// no assignment for property ‘SyncMemberAzureDatabaseResourceReference’

	// Set property ‘UsePrivateLinkConnection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UsePrivateLinkConnection != nil {
			usePrivateLinkConnection := *typedInput.Properties.UsePrivateLinkConnection
			member.UsePrivateLinkConnection = &usePrivateLinkConnection
		}
	}

	// Set property ‘UserName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UserName != nil {
			userName := *typedInput.Properties.UserName
			member.UserName = &userName
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &Servers_Databases_SyncGroups_SyncMember_Spec{}

// ConvertSpecFrom populates our Servers_Databases_SyncGroups_SyncMember_Spec from the provided source
func (member *Servers_Databases_SyncGroups_SyncMember_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20211101s.Servers_Databases_SyncGroups_SyncMember_Spec)
	if ok {
		// Populate our instance from source
		return member.AssignProperties_From_Servers_Databases_SyncGroups_SyncMember_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20211101s.Servers_Databases_SyncGroups_SyncMember_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = member.AssignProperties_From_Servers_Databases_SyncGroups_SyncMember_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our Servers_Databases_SyncGroups_SyncMember_Spec
func (member *Servers_Databases_SyncGroups_SyncMember_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20211101s.Servers_Databases_SyncGroups_SyncMember_Spec)
	if ok {
		// Populate destination from our instance
		return member.AssignProperties_To_Servers_Databases_SyncGroups_SyncMember_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20211101s.Servers_Databases_SyncGroups_SyncMember_Spec{}
	err := member.AssignProperties_To_Servers_Databases_SyncGroups_SyncMember_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_Servers_Databases_SyncGroups_SyncMember_Spec populates our Servers_Databases_SyncGroups_SyncMember_Spec from the provided source Servers_Databases_SyncGroups_SyncMember_Spec
func (member *Servers_Databases_SyncGroups_SyncMember_Spec) AssignProperties_From_Servers_Databases_SyncGroups_SyncMember_Spec(source *v20211101s.Servers_Databases_SyncGroups_SyncMember_Spec) error {

	// AzureName
	member.AzureName = source.AzureName

	// DatabaseName
	member.DatabaseName = genruntime.ClonePointerToString(source.DatabaseName)

	// DatabaseType
	if source.DatabaseType != nil {
		databaseType := SyncMemberProperties_DatabaseType(*source.DatabaseType)
		member.DatabaseType = &databaseType
	} else {
		member.DatabaseType = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		member.Owner = &owner
	} else {
		member.Owner = nil
	}

	// Password
	member.Password = genruntime.ClonePointerToString(source.Password)

	// ServerName
	member.ServerName = genruntime.ClonePointerToString(source.ServerName)

	// SqlServerDatabaseId
	if source.SqlServerDatabaseId != nil {
		sqlServerDatabaseId := *source.SqlServerDatabaseId
		member.SqlServerDatabaseId = &sqlServerDatabaseId
	} else {
		member.SqlServerDatabaseId = nil
	}

	// SyncAgentReference
	if source.SyncAgentReference != nil {
		syncAgentReference := source.SyncAgentReference.Copy()
		member.SyncAgentReference = &syncAgentReference
	} else {
		member.SyncAgentReference = nil
	}

	// SyncDirection
	if source.SyncDirection != nil {
		syncDirection := SyncMemberProperties_SyncDirection(*source.SyncDirection)
		member.SyncDirection = &syncDirection
	} else {
		member.SyncDirection = nil
	}

	// SyncMemberAzureDatabaseResourceReference
	if source.SyncMemberAzureDatabaseResourceReference != nil {
		syncMemberAzureDatabaseResourceReference := source.SyncMemberAzureDatabaseResourceReference.Copy()
		member.SyncMemberAzureDatabaseResourceReference = &syncMemberAzureDatabaseResourceReference
	} else {
		member.SyncMemberAzureDatabaseResourceReference = nil
	}

	// UsePrivateLinkConnection
	if source.UsePrivateLinkConnection != nil {
		usePrivateLinkConnection := *source.UsePrivateLinkConnection
		member.UsePrivateLinkConnection = &usePrivateLinkConnection
	} else {
		member.UsePrivateLinkConnection = nil
	}

	// UserName
	member.UserName = genruntime.ClonePointerToString(source.UserName)

	// No error
	return nil
}

// AssignProperties_To_Servers_Databases_SyncGroups_SyncMember_Spec populates the provided destination Servers_Databases_SyncGroups_SyncMember_Spec from our Servers_Databases_SyncGroups_SyncMember_Spec
func (member *Servers_Databases_SyncGroups_SyncMember_Spec) AssignProperties_To_Servers_Databases_SyncGroups_SyncMember_Spec(destination *v20211101s.Servers_Databases_SyncGroups_SyncMember_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = member.AzureName

	// DatabaseName
	destination.DatabaseName = genruntime.ClonePointerToString(member.DatabaseName)

	// DatabaseType
	if member.DatabaseType != nil {
		databaseType := string(*member.DatabaseType)
		destination.DatabaseType = &databaseType
	} else {
		destination.DatabaseType = nil
	}

	// OriginalVersion
	destination.OriginalVersion = member.OriginalVersion()

	// Owner
	if member.Owner != nil {
		owner := member.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Password
	destination.Password = genruntime.ClonePointerToString(member.Password)

	// ServerName
	destination.ServerName = genruntime.ClonePointerToString(member.ServerName)

	// SqlServerDatabaseId
	if member.SqlServerDatabaseId != nil {
		sqlServerDatabaseId := *member.SqlServerDatabaseId
		destination.SqlServerDatabaseId = &sqlServerDatabaseId
	} else {
		destination.SqlServerDatabaseId = nil
	}

	// SyncAgentReference
	if member.SyncAgentReference != nil {
		syncAgentReference := member.SyncAgentReference.Copy()
		destination.SyncAgentReference = &syncAgentReference
	} else {
		destination.SyncAgentReference = nil
	}

	// SyncDirection
	if member.SyncDirection != nil {
		syncDirection := string(*member.SyncDirection)
		destination.SyncDirection = &syncDirection
	} else {
		destination.SyncDirection = nil
	}

	// SyncMemberAzureDatabaseResourceReference
	if member.SyncMemberAzureDatabaseResourceReference != nil {
		syncMemberAzureDatabaseResourceReference := member.SyncMemberAzureDatabaseResourceReference.Copy()
		destination.SyncMemberAzureDatabaseResourceReference = &syncMemberAzureDatabaseResourceReference
	} else {
		destination.SyncMemberAzureDatabaseResourceReference = nil
	}

	// UsePrivateLinkConnection
	if member.UsePrivateLinkConnection != nil {
		usePrivateLinkConnection := *member.UsePrivateLinkConnection
		destination.UsePrivateLinkConnection = &usePrivateLinkConnection
	} else {
		destination.UsePrivateLinkConnection = nil
	}

	// UserName
	destination.UserName = genruntime.ClonePointerToString(member.UserName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (member *Servers_Databases_SyncGroups_SyncMember_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (member *Servers_Databases_SyncGroups_SyncMember_Spec) SetAzureName(azureName string) {
	member.AzureName = azureName
}

type Servers_Databases_SyncGroups_SyncMember_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// DatabaseName: Database name of the member database in the sync member.
	DatabaseName *string `json:"databaseName,omitempty"`

	// DatabaseType: Database type of the sync member.
	DatabaseType *SyncMemberProperties_DatabaseType_STATUS `json:"databaseType,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// Password: Password of the member database in the sync member.
	Password *string `json:"password,omitempty"`

	// PrivateEndpointName: Private endpoint name of the sync member if use private link connection is enabled, for sync
	// members in Azure.
	PrivateEndpointName *string `json:"privateEndpointName,omitempty"`

	// ServerName: Server name of the member database in the sync member
	ServerName *string `json:"serverName,omitempty"`

	// SqlServerDatabaseId: SQL Server database id of the sync member.
	SqlServerDatabaseId *string `json:"sqlServerDatabaseId,omitempty"`

	// SyncAgentId: ARM resource id of the sync agent in the sync member.
	SyncAgentId *string `json:"syncAgentId,omitempty"`

	// SyncDirection: Sync direction of the sync member.
	SyncDirection *SyncMemberProperties_SyncDirection_STATUS `json:"syncDirection,omitempty"`

	// SyncMemberAzureDatabaseResourceId: ARM resource id of the sync member logical database, for sync members in Azure.
	SyncMemberAzureDatabaseResourceId *string `json:"syncMemberAzureDatabaseResourceId,omitempty"`

	// SyncState: Sync state of the sync member.
	SyncState *SyncMemberProperties_SyncState_STATUS `json:"syncState,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`

	// UsePrivateLinkConnection: Whether to use private link connection.
	UsePrivateLinkConnection *bool `json:"usePrivateLinkConnection,omitempty"`

	// UserName: User name of the member database in the sync member.
	UserName *string `json:"userName,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Servers_Databases_SyncGroups_SyncMember_STATUS{}

// ConvertStatusFrom populates our Servers_Databases_SyncGroups_SyncMember_STATUS from the provided source
func (member *Servers_Databases_SyncGroups_SyncMember_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20211101s.Servers_Databases_SyncGroups_SyncMember_STATUS)
	if ok {
		// Populate our instance from source
		return member.AssignProperties_From_Servers_Databases_SyncGroups_SyncMember_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20211101s.Servers_Databases_SyncGroups_SyncMember_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = member.AssignProperties_From_Servers_Databases_SyncGroups_SyncMember_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our Servers_Databases_SyncGroups_SyncMember_STATUS
func (member *Servers_Databases_SyncGroups_SyncMember_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20211101s.Servers_Databases_SyncGroups_SyncMember_STATUS)
	if ok {
		// Populate destination from our instance
		return member.AssignProperties_To_Servers_Databases_SyncGroups_SyncMember_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20211101s.Servers_Databases_SyncGroups_SyncMember_STATUS{}
	err := member.AssignProperties_To_Servers_Databases_SyncGroups_SyncMember_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &Servers_Databases_SyncGroups_SyncMember_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (member *Servers_Databases_SyncGroups_SyncMember_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &Servers_Databases_SyncGroups_SyncMember_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (member *Servers_Databases_SyncGroups_SyncMember_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(Servers_Databases_SyncGroups_SyncMember_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected Servers_Databases_SyncGroups_SyncMember_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DatabaseName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DatabaseName != nil {
			databaseName := *typedInput.Properties.DatabaseName
			member.DatabaseName = &databaseName
		}
	}

	// Set property ‘DatabaseType’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DatabaseType != nil {
			databaseType := *typedInput.Properties.DatabaseType
			member.DatabaseType = &databaseType
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		member.Id = &id
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		member.Name = &name
	}

	// Set property ‘Password’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Password != nil {
			password := *typedInput.Properties.Password
			member.Password = &password
		}
	}

	// Set property ‘PrivateEndpointName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrivateEndpointName != nil {
			privateEndpointName := *typedInput.Properties.PrivateEndpointName
			member.PrivateEndpointName = &privateEndpointName
		}
	}

	// Set property ‘ServerName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ServerName != nil {
			serverName := *typedInput.Properties.ServerName
			member.ServerName = &serverName
		}
	}

	// Set property ‘SqlServerDatabaseId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SqlServerDatabaseId != nil {
			sqlServerDatabaseId := *typedInput.Properties.SqlServerDatabaseId
			member.SqlServerDatabaseId = &sqlServerDatabaseId
		}
	}

	// Set property ‘SyncAgentId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SyncAgentId != nil {
			syncAgentId := *typedInput.Properties.SyncAgentId
			member.SyncAgentId = &syncAgentId
		}
	}

	// Set property ‘SyncDirection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SyncDirection != nil {
			syncDirection := *typedInput.Properties.SyncDirection
			member.SyncDirection = &syncDirection
		}
	}

	// Set property ‘SyncMemberAzureDatabaseResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SyncMemberAzureDatabaseResourceId != nil {
			syncMemberAzureDatabaseResourceId := *typedInput.Properties.SyncMemberAzureDatabaseResourceId
			member.SyncMemberAzureDatabaseResourceId = &syncMemberAzureDatabaseResourceId
		}
	}

	// Set property ‘SyncState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SyncState != nil {
			syncState := *typedInput.Properties.SyncState
			member.SyncState = &syncState
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		member.Type = &typeVar
	}

	// Set property ‘UsePrivateLinkConnection’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UsePrivateLinkConnection != nil {
			usePrivateLinkConnection := *typedInput.Properties.UsePrivateLinkConnection
			member.UsePrivateLinkConnection = &usePrivateLinkConnection
		}
	}

	// Set property ‘UserName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.UserName != nil {
			userName := *typedInput.Properties.UserName
			member.UserName = &userName
		}
	}

	// No error
	return nil
}

// AssignProperties_From_Servers_Databases_SyncGroups_SyncMember_STATUS populates our Servers_Databases_SyncGroups_SyncMember_STATUS from the provided source Servers_Databases_SyncGroups_SyncMember_STATUS
func (member *Servers_Databases_SyncGroups_SyncMember_STATUS) AssignProperties_From_Servers_Databases_SyncGroups_SyncMember_STATUS(source *v20211101s.Servers_Databases_SyncGroups_SyncMember_STATUS) error {

	// Conditions
	member.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DatabaseName
	member.DatabaseName = genruntime.ClonePointerToString(source.DatabaseName)

	// DatabaseType
	if source.DatabaseType != nil {
		databaseType := SyncMemberProperties_DatabaseType_STATUS(*source.DatabaseType)
		member.DatabaseType = &databaseType
	} else {
		member.DatabaseType = nil
	}

	// Id
	member.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	member.Name = genruntime.ClonePointerToString(source.Name)

	// Password
	member.Password = genruntime.ClonePointerToString(source.Password)

	// PrivateEndpointName
	member.PrivateEndpointName = genruntime.ClonePointerToString(source.PrivateEndpointName)

	// ServerName
	member.ServerName = genruntime.ClonePointerToString(source.ServerName)

	// SqlServerDatabaseId
	member.SqlServerDatabaseId = genruntime.ClonePointerToString(source.SqlServerDatabaseId)

	// SyncAgentId
	member.SyncAgentId = genruntime.ClonePointerToString(source.SyncAgentId)

	// SyncDirection
	if source.SyncDirection != nil {
		syncDirection := SyncMemberProperties_SyncDirection_STATUS(*source.SyncDirection)
		member.SyncDirection = &syncDirection
	} else {
		member.SyncDirection = nil
	}

	// SyncMemberAzureDatabaseResourceId
	member.SyncMemberAzureDatabaseResourceId = genruntime.ClonePointerToString(source.SyncMemberAzureDatabaseResourceId)

	// SyncState
	if source.SyncState != nil {
		syncState := SyncMemberProperties_SyncState_STATUS(*source.SyncState)
		member.SyncState = &syncState
	} else {
		member.SyncState = nil
	}

	// Type
	member.Type = genruntime.ClonePointerToString(source.Type)

	// UsePrivateLinkConnection
	if source.UsePrivateLinkConnection != nil {
		usePrivateLinkConnection := *source.UsePrivateLinkConnection
		member.UsePrivateLinkConnection = &usePrivateLinkConnection
	} else {
		member.UsePrivateLinkConnection = nil
	}

	// UserName
	member.UserName = genruntime.ClonePointerToString(source.UserName)

	// No error
	return nil
}

// AssignProperties_To_Servers_Databases_SyncGroups_SyncMember_STATUS populates the provided destination Servers_Databases_SyncGroups_SyncMember_STATUS from our Servers_Databases_SyncGroups_SyncMember_STATUS
func (member *Servers_Databases_SyncGroups_SyncMember_STATUS) AssignProperties_To_Servers_Databases_SyncGroups_SyncMember_STATUS(destination *v20211101s.Servers_Databases_SyncGroups_SyncMember_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(member.Conditions)

	// DatabaseName
	destination.DatabaseName = genruntime.ClonePointerToString(member.DatabaseName)

	// DatabaseType
	if member.DatabaseType != nil {
		databaseType := string(*member.DatabaseType)
		destination.DatabaseType = &databaseType
	} else {
		destination.DatabaseType = nil
	}

	// Id
	destination.Id = genruntime.ClonePointerToString(member.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(member.Name)

	// Password
	destination.Password = genruntime.ClonePointerToString(member.Password)

	// PrivateEndpointName
	destination.PrivateEndpointName = genruntime.ClonePointerToString(member.PrivateEndpointName)

	// ServerName
	destination.ServerName = genruntime.ClonePointerToString(member.ServerName)

	// SqlServerDatabaseId
	destination.SqlServerDatabaseId = genruntime.ClonePointerToString(member.SqlServerDatabaseId)

	// SyncAgentId
	destination.SyncAgentId = genruntime.ClonePointerToString(member.SyncAgentId)

	// SyncDirection
	if member.SyncDirection != nil {
		syncDirection := string(*member.SyncDirection)
		destination.SyncDirection = &syncDirection
	} else {
		destination.SyncDirection = nil
	}

	// SyncMemberAzureDatabaseResourceId
	destination.SyncMemberAzureDatabaseResourceId = genruntime.ClonePointerToString(member.SyncMemberAzureDatabaseResourceId)

	// SyncState
	if member.SyncState != nil {
		syncState := string(*member.SyncState)
		destination.SyncState = &syncState
	} else {
		destination.SyncState = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(member.Type)

	// UsePrivateLinkConnection
	if member.UsePrivateLinkConnection != nil {
		usePrivateLinkConnection := *member.UsePrivateLinkConnection
		destination.UsePrivateLinkConnection = &usePrivateLinkConnection
	} else {
		destination.UsePrivateLinkConnection = nil
	}

	// UserName
	destination.UserName = genruntime.ClonePointerToString(member.UserName)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"AzureSqlDatabase","SqlServerDatabase"}
type SyncMemberProperties_DatabaseType string

const (
	SyncMemberProperties_DatabaseType_AzureSqlDatabase  = SyncMemberProperties_DatabaseType("AzureSqlDatabase")
	SyncMemberProperties_DatabaseType_SqlServerDatabase = SyncMemberProperties_DatabaseType("SqlServerDatabase")
)

type SyncMemberProperties_DatabaseType_STATUS string

const (
	SyncMemberProperties_DatabaseType_STATUS_AzureSqlDatabase  = SyncMemberProperties_DatabaseType_STATUS("AzureSqlDatabase")
	SyncMemberProperties_DatabaseType_STATUS_SqlServerDatabase = SyncMemberProperties_DatabaseType_STATUS("SqlServerDatabase")
)

// +kubebuilder:validation:Enum={"Bidirectional","OneWayHubToMember","OneWayMemberToHub"}
type SyncMemberProperties_SyncDirection string

const (
	SyncMemberProperties_SyncDirection_Bidirectional     = SyncMemberProperties_SyncDirection("Bidirectional")
	SyncMemberProperties_SyncDirection_OneWayHubToMember = SyncMemberProperties_SyncDirection("OneWayHubToMember")
	SyncMemberProperties_SyncDirection_OneWayMemberToHub = SyncMemberProperties_SyncDirection("OneWayMemberToHub")
)

type SyncMemberProperties_SyncDirection_STATUS string

const (
	SyncMemberProperties_SyncDirection_STATUS_Bidirectional     = SyncMemberProperties_SyncDirection_STATUS("Bidirectional")
	SyncMemberProperties_SyncDirection_STATUS_OneWayHubToMember = SyncMemberProperties_SyncDirection_STATUS("OneWayHubToMember")
	SyncMemberProperties_SyncDirection_STATUS_OneWayMemberToHub = SyncMemberProperties_SyncDirection_STATUS("OneWayMemberToHub")
)

type SyncMemberProperties_SyncState_STATUS string

const (
	SyncMemberProperties_SyncState_STATUS_DeProvisionFailed         = SyncMemberProperties_SyncState_STATUS("DeProvisionFailed")
	SyncMemberProperties_SyncState_STATUS_DeProvisioned             = SyncMemberProperties_SyncState_STATUS("DeProvisioned")
	SyncMemberProperties_SyncState_STATUS_DeProvisioning            = SyncMemberProperties_SyncState_STATUS("DeProvisioning")
	SyncMemberProperties_SyncState_STATUS_DisabledBackupRestore     = SyncMemberProperties_SyncState_STATUS("DisabledBackupRestore")
	SyncMemberProperties_SyncState_STATUS_DisabledTombstoneCleanup  = SyncMemberProperties_SyncState_STATUS("DisabledTombstoneCleanup")
	SyncMemberProperties_SyncState_STATUS_ProvisionFailed           = SyncMemberProperties_SyncState_STATUS("ProvisionFailed")
	SyncMemberProperties_SyncState_STATUS_Provisioned               = SyncMemberProperties_SyncState_STATUS("Provisioned")
	SyncMemberProperties_SyncState_STATUS_Provisioning              = SyncMemberProperties_SyncState_STATUS("Provisioning")
	SyncMemberProperties_SyncState_STATUS_ReprovisionFailed         = SyncMemberProperties_SyncState_STATUS("ReprovisionFailed")
	SyncMemberProperties_SyncState_STATUS_Reprovisioning            = SyncMemberProperties_SyncState_STATUS("Reprovisioning")
	SyncMemberProperties_SyncState_STATUS_SyncCancelled             = SyncMemberProperties_SyncState_STATUS("SyncCancelled")
	SyncMemberProperties_SyncState_STATUS_SyncCancelling            = SyncMemberProperties_SyncState_STATUS("SyncCancelling")
	SyncMemberProperties_SyncState_STATUS_SyncFailed                = SyncMemberProperties_SyncState_STATUS("SyncFailed")
	SyncMemberProperties_SyncState_STATUS_SyncInProgress            = SyncMemberProperties_SyncState_STATUS("SyncInProgress")
	SyncMemberProperties_SyncState_STATUS_SyncSucceeded             = SyncMemberProperties_SyncState_STATUS("SyncSucceeded")
	SyncMemberProperties_SyncState_STATUS_SyncSucceededWithWarnings = SyncMemberProperties_SyncState_STATUS("SyncSucceededWithWarnings")
	SyncMemberProperties_SyncState_STATUS_UnProvisioned             = SyncMemberProperties_SyncState_STATUS("UnProvisioned")
	SyncMemberProperties_SyncState_STATUS_UnReprovisioned           = SyncMemberProperties_SyncState_STATUS("UnReprovisioned")
)

func init() {
	SchemeBuilder.Register(&Servers_Databases_SyncGroups_SyncMember{}, &Servers_Databases_SyncGroups_SyncMemberList{})
}
