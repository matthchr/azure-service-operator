// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"encoding/json"
	v20211101s "github.com/Azure/azure-service-operator/v2/api/sql/v1beta20211101storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Servers_OutboundFirewallRule_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Servers_OutboundFirewallRule to hub returns original",
		prop.ForAll(RunResourceConversionTestForServers_OutboundFirewallRule, Servers_OutboundFirewallRuleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForServers_OutboundFirewallRule tests if a specific instance of Servers_OutboundFirewallRule round trips to the hub storage version and back losslessly
func RunResourceConversionTestForServers_OutboundFirewallRule(subject Servers_OutboundFirewallRule) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20211101s.Servers_OutboundFirewallRule
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual Servers_OutboundFirewallRule
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Servers_OutboundFirewallRule_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Servers_OutboundFirewallRule to Servers_OutboundFirewallRule via AssignProperties_To_Servers_OutboundFirewallRule & AssignProperties_From_Servers_OutboundFirewallRule returns original",
		prop.ForAll(RunPropertyAssignmentTestForServers_OutboundFirewallRule, Servers_OutboundFirewallRuleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServers_OutboundFirewallRule tests if a specific instance of Servers_OutboundFirewallRule can be assigned to v1beta20211101storage and back losslessly
func RunPropertyAssignmentTestForServers_OutboundFirewallRule(subject Servers_OutboundFirewallRule) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.Servers_OutboundFirewallRule
	err := copied.AssignProperties_To_Servers_OutboundFirewallRule(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Servers_OutboundFirewallRule
	err = actual.AssignProperties_From_Servers_OutboundFirewallRule(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Servers_OutboundFirewallRule_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_OutboundFirewallRule via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_OutboundFirewallRule, Servers_OutboundFirewallRuleGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_OutboundFirewallRule runs a test to see if a specific instance of Servers_OutboundFirewallRule round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_OutboundFirewallRule(subject Servers_OutboundFirewallRule) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_OutboundFirewallRule
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_OutboundFirewallRule instances for property testing - lazily instantiated by
// Servers_OutboundFirewallRuleGenerator()
var servers_OutboundFirewallRuleGenerator gopter.Gen

// Servers_OutboundFirewallRuleGenerator returns a generator of Servers_OutboundFirewallRule instances for property testing.
func Servers_OutboundFirewallRuleGenerator() gopter.Gen {
	if servers_OutboundFirewallRuleGenerator != nil {
		return servers_OutboundFirewallRuleGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServers_OutboundFirewallRule(generators)
	servers_OutboundFirewallRuleGenerator = gen.Struct(reflect.TypeOf(Servers_OutboundFirewallRule{}), generators)

	return servers_OutboundFirewallRuleGenerator
}

// AddRelatedPropertyGeneratorsForServers_OutboundFirewallRule is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_OutboundFirewallRule(gens map[string]gopter.Gen) {
	gens["Spec"] = Servers_OutboundFirewallRule_SpecGenerator()
	gens["Status"] = Servers_OutboundFirewallRule_STATUSGenerator()
}

func Test_Servers_OutboundFirewallRule_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Servers_OutboundFirewallRule_Spec to Servers_OutboundFirewallRule_Spec via AssignProperties_To_Servers_OutboundFirewallRule_Spec & AssignProperties_From_Servers_OutboundFirewallRule_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForServers_OutboundFirewallRule_Spec, Servers_OutboundFirewallRule_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServers_OutboundFirewallRule_Spec tests if a specific instance of Servers_OutboundFirewallRule_Spec can be assigned to v1beta20211101storage and back losslessly
func RunPropertyAssignmentTestForServers_OutboundFirewallRule_Spec(subject Servers_OutboundFirewallRule_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.Servers_OutboundFirewallRule_Spec
	err := copied.AssignProperties_To_Servers_OutboundFirewallRule_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Servers_OutboundFirewallRule_Spec
	err = actual.AssignProperties_From_Servers_OutboundFirewallRule_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Servers_OutboundFirewallRule_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_OutboundFirewallRule_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_OutboundFirewallRule_Spec, Servers_OutboundFirewallRule_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_OutboundFirewallRule_Spec runs a test to see if a specific instance of Servers_OutboundFirewallRule_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_OutboundFirewallRule_Spec(subject Servers_OutboundFirewallRule_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_OutboundFirewallRule_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_OutboundFirewallRule_Spec instances for property testing - lazily instantiated by
// Servers_OutboundFirewallRule_SpecGenerator()
var servers_OutboundFirewallRule_SpecGenerator gopter.Gen

// Servers_OutboundFirewallRule_SpecGenerator returns a generator of Servers_OutboundFirewallRule_Spec instances for property testing.
func Servers_OutboundFirewallRule_SpecGenerator() gopter.Gen {
	if servers_OutboundFirewallRule_SpecGenerator != nil {
		return servers_OutboundFirewallRule_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_OutboundFirewallRule_Spec(generators)
	servers_OutboundFirewallRule_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_OutboundFirewallRule_Spec{}), generators)

	return servers_OutboundFirewallRule_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServers_OutboundFirewallRule_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_OutboundFirewallRule_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
}

func Test_Servers_OutboundFirewallRule_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from Servers_OutboundFirewallRule_STATUS to Servers_OutboundFirewallRule_STATUS via AssignProperties_To_Servers_OutboundFirewallRule_STATUS & AssignProperties_From_Servers_OutboundFirewallRule_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForServers_OutboundFirewallRule_STATUS, Servers_OutboundFirewallRule_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForServers_OutboundFirewallRule_STATUS tests if a specific instance of Servers_OutboundFirewallRule_STATUS can be assigned to v1beta20211101storage and back losslessly
func RunPropertyAssignmentTestForServers_OutboundFirewallRule_STATUS(subject Servers_OutboundFirewallRule_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.Servers_OutboundFirewallRule_STATUS
	err := copied.AssignProperties_To_Servers_OutboundFirewallRule_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual Servers_OutboundFirewallRule_STATUS
	err = actual.AssignProperties_From_Servers_OutboundFirewallRule_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_Servers_OutboundFirewallRule_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_OutboundFirewallRule_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_OutboundFirewallRule_STATUS, Servers_OutboundFirewallRule_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_OutboundFirewallRule_STATUS runs a test to see if a specific instance of Servers_OutboundFirewallRule_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_OutboundFirewallRule_STATUS(subject Servers_OutboundFirewallRule_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_OutboundFirewallRule_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_OutboundFirewallRule_STATUS instances for property testing - lazily instantiated by
// Servers_OutboundFirewallRule_STATUSGenerator()
var servers_OutboundFirewallRule_STATUSGenerator gopter.Gen

// Servers_OutboundFirewallRule_STATUSGenerator returns a generator of Servers_OutboundFirewallRule_STATUS instances for property testing.
func Servers_OutboundFirewallRule_STATUSGenerator() gopter.Gen {
	if servers_OutboundFirewallRule_STATUSGenerator != nil {
		return servers_OutboundFirewallRule_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_OutboundFirewallRule_STATUS(generators)
	servers_OutboundFirewallRule_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_OutboundFirewallRule_STATUS{}), generators)

	return servers_OutboundFirewallRule_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServers_OutboundFirewallRule_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_OutboundFirewallRule_STATUS(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}
