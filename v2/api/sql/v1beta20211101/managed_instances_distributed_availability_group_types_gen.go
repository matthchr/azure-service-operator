// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"fmt"
	v20211101s "github.com/Azure/azure-service-operator/v2/api/sql/v1beta20211101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/DistributedAvailabilityGroups.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/distributedAvailabilityGroups/{distributedAvailabilityGroupName}
type ManagedInstances_DistributedAvailabilityGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedInstances_DistributedAvailabilityGroup_Spec   `json:"spec,omitempty"`
	Status            ManagedInstances_DistributedAvailabilityGroup_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &ManagedInstances_DistributedAvailabilityGroup{}

// GetConditions returns the conditions of the resource
func (group *ManagedInstances_DistributedAvailabilityGroup) GetConditions() conditions.Conditions {
	return group.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (group *ManagedInstances_DistributedAvailabilityGroup) SetConditions(conditions conditions.Conditions) {
	group.Status.Conditions = conditions
}

var _ conversion.Convertible = &ManagedInstances_DistributedAvailabilityGroup{}

// ConvertFrom populates our ManagedInstances_DistributedAvailabilityGroup from the provided hub ManagedInstances_DistributedAvailabilityGroup
func (group *ManagedInstances_DistributedAvailabilityGroup) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20211101s.ManagedInstances_DistributedAvailabilityGroup)
	if !ok {
		return fmt.Errorf("expected sql/v1beta20211101storage/ManagedInstances_DistributedAvailabilityGroup but received %T instead", hub)
	}

	return group.AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup(source)
}

// ConvertTo populates the provided hub ManagedInstances_DistributedAvailabilityGroup from our ManagedInstances_DistributedAvailabilityGroup
func (group *ManagedInstances_DistributedAvailabilityGroup) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20211101s.ManagedInstances_DistributedAvailabilityGroup)
	if !ok {
		return fmt.Errorf("expected sql/v1beta20211101storage/ManagedInstances_DistributedAvailabilityGroup but received %T instead", hub)
	}

	return group.AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup(destination)
}

// +kubebuilder:webhook:path=/mutate-sql-azure-com-v1beta20211101-managedinstances_distributedavailabilitygroup,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=sql.azure.com,resources=managedinstances_distributedavailabilitygroups,verbs=create;update,versions=v1beta20211101,name=default.v1beta20211101.managedinstances_distributedavailabilitygroups.sql.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &ManagedInstances_DistributedAvailabilityGroup{}

// Default applies defaults to the ManagedInstances_DistributedAvailabilityGroup resource
func (group *ManagedInstances_DistributedAvailabilityGroup) Default() {
	group.defaultImpl()
	var temp interface{} = group
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (group *ManagedInstances_DistributedAvailabilityGroup) defaultAzureName() {
	if group.Spec.AzureName == "" {
		group.Spec.AzureName = group.Name
	}
}

// defaultImpl applies the code generated defaults to the ManagedInstances_DistributedAvailabilityGroup resource
func (group *ManagedInstances_DistributedAvailabilityGroup) defaultImpl() { group.defaultAzureName() }

var _ genruntime.KubernetesResource = &ManagedInstances_DistributedAvailabilityGroup{}

// AzureName returns the Azure name of the resource
func (group *ManagedInstances_DistributedAvailabilityGroup) AzureName() string {
	return group.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (group ManagedInstances_DistributedAvailabilityGroup) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (group *ManagedInstances_DistributedAvailabilityGroup) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (group *ManagedInstances_DistributedAvailabilityGroup) GetSpec() genruntime.ConvertibleSpec {
	return &group.Spec
}

// GetStatus returns the status of this resource
func (group *ManagedInstances_DistributedAvailabilityGroup) GetStatus() genruntime.ConvertibleStatus {
	return &group.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Sql/managedInstances/distributedAvailabilityGroups"
func (group *ManagedInstances_DistributedAvailabilityGroup) GetType() string {
	return "Microsoft.Sql/managedInstances/distributedAvailabilityGroups"
}

// NewEmptyStatus returns a new empty (blank) status
func (group *ManagedInstances_DistributedAvailabilityGroup) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &ManagedInstances_DistributedAvailabilityGroup_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (group *ManagedInstances_DistributedAvailabilityGroup) Owner() *genruntime.ResourceReference {
	ownerGroup, ownerKind := genruntime.LookupOwnerGroupKind(group.Spec)
	return &genruntime.ResourceReference{
		Group: ownerGroup,
		Kind:  ownerKind,
		Name:  group.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (group *ManagedInstances_DistributedAvailabilityGroup) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*ManagedInstances_DistributedAvailabilityGroup_STATUS); ok {
		group.Status = *st
		return nil
	}

	// Convert status to required version
	var st ManagedInstances_DistributedAvailabilityGroup_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	group.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-sql-azure-com-v1beta20211101-managedinstances_distributedavailabilitygroup,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=sql.azure.com,resources=managedinstances_distributedavailabilitygroups,verbs=create;update,versions=v1beta20211101,name=validate.v1beta20211101.managedinstances_distributedavailabilitygroups.sql.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &ManagedInstances_DistributedAvailabilityGroup{}

// ValidateCreate validates the creation of the resource
func (group *ManagedInstances_DistributedAvailabilityGroup) ValidateCreate() error {
	validations := group.createValidations()
	var temp interface{} = group
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (group *ManagedInstances_DistributedAvailabilityGroup) ValidateDelete() error {
	validations := group.deleteValidations()
	var temp interface{} = group
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (group *ManagedInstances_DistributedAvailabilityGroup) ValidateUpdate(old runtime.Object) error {
	validations := group.updateValidations()
	var temp interface{} = group
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (group *ManagedInstances_DistributedAvailabilityGroup) createValidations() []func() error {
	return []func() error{group.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (group *ManagedInstances_DistributedAvailabilityGroup) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (group *ManagedInstances_DistributedAvailabilityGroup) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return group.validateResourceReferences()
		},
		group.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (group *ManagedInstances_DistributedAvailabilityGroup) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&group.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (group *ManagedInstances_DistributedAvailabilityGroup) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*ManagedInstances_DistributedAvailabilityGroup)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, group)
}

// AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup populates our ManagedInstances_DistributedAvailabilityGroup from the provided source ManagedInstances_DistributedAvailabilityGroup
func (group *ManagedInstances_DistributedAvailabilityGroup) AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup(source *v20211101s.ManagedInstances_DistributedAvailabilityGroup) error {

	// ObjectMeta
	group.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec ManagedInstances_DistributedAvailabilityGroup_Spec
	err := spec.AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup_Spec() to populate field Spec")
	}
	group.Spec = spec

	// Status
	var status ManagedInstances_DistributedAvailabilityGroup_STATUS
	err = status.AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup_STATUS() to populate field Status")
	}
	group.Status = status

	// No error
	return nil
}

// AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup populates the provided destination ManagedInstances_DistributedAvailabilityGroup from our ManagedInstances_DistributedAvailabilityGroup
func (group *ManagedInstances_DistributedAvailabilityGroup) AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup(destination *v20211101s.ManagedInstances_DistributedAvailabilityGroup) error {

	// ObjectMeta
	destination.ObjectMeta = *group.ObjectMeta.DeepCopy()

	// Spec
	var spec v20211101s.ManagedInstances_DistributedAvailabilityGroup_Spec
	err := group.Spec.AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20211101s.ManagedInstances_DistributedAvailabilityGroup_STATUS
	err = group.Status.AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (group *ManagedInstances_DistributedAvailabilityGroup) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: group.Spec.OriginalVersion(),
		Kind:    "ManagedInstances_DistributedAvailabilityGroup",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/DistributedAvailabilityGroups.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/distributedAvailabilityGroups/{distributedAvailabilityGroupName}
type ManagedInstances_DistributedAvailabilityGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedInstances_DistributedAvailabilityGroup `json:"items"`
}

type ManagedInstances_DistributedAvailabilityGroup_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a sql.azure.com/ManagedInstance resource
	Owner *genruntime.KnownResourceReference `group:"sql.azure.com" json:"owner,omitempty" kind:"ManagedInstance"`

	// PrimaryAvailabilityGroupName: The primary availability group name
	PrimaryAvailabilityGroupName *string `json:"primaryAvailabilityGroupName,omitempty"`

	// ReplicationMode: The replication mode of a distributed availability group. Parameter will be ignored during link
	// creation.
	ReplicationMode *DistributedAvailabilityGroupProperties_ReplicationMode `json:"replicationMode,omitempty"`

	// SecondaryAvailabilityGroupName: The secondary availability group name
	SecondaryAvailabilityGroupName *string `json:"secondaryAvailabilityGroupName,omitempty"`

	// SourceEndpoint: The source endpoint
	SourceEndpoint *string `json:"sourceEndpoint,omitempty"`

	// TargetDatabase: The name of the target database
	TargetDatabase *string `json:"targetDatabase,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagedInstances_DistributedAvailabilityGroup_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (group *ManagedInstances_DistributedAvailabilityGroup_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if group == nil {
		return nil, nil
	}
	result := &ManagedInstances_DistributedAvailabilityGroup_Spec_ARM{}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if group.PrimaryAvailabilityGroupName != nil ||
		group.ReplicationMode != nil ||
		group.SecondaryAvailabilityGroupName != nil ||
		group.SourceEndpoint != nil ||
		group.TargetDatabase != nil {
		result.Properties = &DistributedAvailabilityGroupProperties_ARM{}
	}
	if group.PrimaryAvailabilityGroupName != nil {
		primaryAvailabilityGroupName := *group.PrimaryAvailabilityGroupName
		result.Properties.PrimaryAvailabilityGroupName = &primaryAvailabilityGroupName
	}
	if group.ReplicationMode != nil {
		replicationMode := *group.ReplicationMode
		result.Properties.ReplicationMode = &replicationMode
	}
	if group.SecondaryAvailabilityGroupName != nil {
		secondaryAvailabilityGroupName := *group.SecondaryAvailabilityGroupName
		result.Properties.SecondaryAvailabilityGroupName = &secondaryAvailabilityGroupName
	}
	if group.SourceEndpoint != nil {
		sourceEndpoint := *group.SourceEndpoint
		result.Properties.SourceEndpoint = &sourceEndpoint
	}
	if group.TargetDatabase != nil {
		targetDatabase := *group.TargetDatabase
		result.Properties.TargetDatabase = &targetDatabase
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (group *ManagedInstances_DistributedAvailabilityGroup_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedInstances_DistributedAvailabilityGroup_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (group *ManagedInstances_DistributedAvailabilityGroup_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedInstances_DistributedAvailabilityGroup_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedInstances_DistributedAvailabilityGroup_Spec_ARM, got %T", armInput)
	}

	// Set property ‘AzureName’:
	group.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘Owner’:
	group.Owner = &genruntime.KnownResourceReference{Name: owner.Name}

	// Set property ‘PrimaryAvailabilityGroupName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrimaryAvailabilityGroupName != nil {
			primaryAvailabilityGroupName := *typedInput.Properties.PrimaryAvailabilityGroupName
			group.PrimaryAvailabilityGroupName = &primaryAvailabilityGroupName
		}
	}

	// Set property ‘ReplicationMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicationMode != nil {
			replicationMode := *typedInput.Properties.ReplicationMode
			group.ReplicationMode = &replicationMode
		}
	}

	// Set property ‘SecondaryAvailabilityGroupName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SecondaryAvailabilityGroupName != nil {
			secondaryAvailabilityGroupName := *typedInput.Properties.SecondaryAvailabilityGroupName
			group.SecondaryAvailabilityGroupName = &secondaryAvailabilityGroupName
		}
	}

	// Set property ‘SourceEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceEndpoint != nil {
			sourceEndpoint := *typedInput.Properties.SourceEndpoint
			group.SourceEndpoint = &sourceEndpoint
		}
	}

	// Set property ‘TargetDatabase’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TargetDatabase != nil {
			targetDatabase := *typedInput.Properties.TargetDatabase
			group.TargetDatabase = &targetDatabase
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &ManagedInstances_DistributedAvailabilityGroup_Spec{}

// ConvertSpecFrom populates our ManagedInstances_DistributedAvailabilityGroup_Spec from the provided source
func (group *ManagedInstances_DistributedAvailabilityGroup_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20211101s.ManagedInstances_DistributedAvailabilityGroup_Spec)
	if ok {
		// Populate our instance from source
		return group.AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20211101s.ManagedInstances_DistributedAvailabilityGroup_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = group.AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our ManagedInstances_DistributedAvailabilityGroup_Spec
func (group *ManagedInstances_DistributedAvailabilityGroup_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20211101s.ManagedInstances_DistributedAvailabilityGroup_Spec)
	if ok {
		// Populate destination from our instance
		return group.AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20211101s.ManagedInstances_DistributedAvailabilityGroup_Spec{}
	err := group.AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup_Spec populates our ManagedInstances_DistributedAvailabilityGroup_Spec from the provided source ManagedInstances_DistributedAvailabilityGroup_Spec
func (group *ManagedInstances_DistributedAvailabilityGroup_Spec) AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup_Spec(source *v20211101s.ManagedInstances_DistributedAvailabilityGroup_Spec) error {

	// AzureName
	group.AzureName = source.AzureName

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		group.Owner = &owner
	} else {
		group.Owner = nil
	}

	// PrimaryAvailabilityGroupName
	group.PrimaryAvailabilityGroupName = genruntime.ClonePointerToString(source.PrimaryAvailabilityGroupName)

	// ReplicationMode
	if source.ReplicationMode != nil {
		replicationMode := DistributedAvailabilityGroupProperties_ReplicationMode(*source.ReplicationMode)
		group.ReplicationMode = &replicationMode
	} else {
		group.ReplicationMode = nil
	}

	// SecondaryAvailabilityGroupName
	group.SecondaryAvailabilityGroupName = genruntime.ClonePointerToString(source.SecondaryAvailabilityGroupName)

	// SourceEndpoint
	group.SourceEndpoint = genruntime.ClonePointerToString(source.SourceEndpoint)

	// TargetDatabase
	group.TargetDatabase = genruntime.ClonePointerToString(source.TargetDatabase)

	// No error
	return nil
}

// AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup_Spec populates the provided destination ManagedInstances_DistributedAvailabilityGroup_Spec from our ManagedInstances_DistributedAvailabilityGroup_Spec
func (group *ManagedInstances_DistributedAvailabilityGroup_Spec) AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup_Spec(destination *v20211101s.ManagedInstances_DistributedAvailabilityGroup_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = group.AzureName

	// OriginalVersion
	destination.OriginalVersion = group.OriginalVersion()

	// Owner
	if group.Owner != nil {
		owner := group.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// PrimaryAvailabilityGroupName
	destination.PrimaryAvailabilityGroupName = genruntime.ClonePointerToString(group.PrimaryAvailabilityGroupName)

	// ReplicationMode
	if group.ReplicationMode != nil {
		replicationMode := string(*group.ReplicationMode)
		destination.ReplicationMode = &replicationMode
	} else {
		destination.ReplicationMode = nil
	}

	// SecondaryAvailabilityGroupName
	destination.SecondaryAvailabilityGroupName = genruntime.ClonePointerToString(group.SecondaryAvailabilityGroupName)

	// SourceEndpoint
	destination.SourceEndpoint = genruntime.ClonePointerToString(group.SourceEndpoint)

	// TargetDatabase
	destination.TargetDatabase = genruntime.ClonePointerToString(group.TargetDatabase)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (group *ManagedInstances_DistributedAvailabilityGroup_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (group *ManagedInstances_DistributedAvailabilityGroup_Spec) SetAzureName(azureName string) {
	group.AzureName = azureName
}

type ManagedInstances_DistributedAvailabilityGroup_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// DistributedAvailabilityGroupId: The distributed availability group id
	DistributedAvailabilityGroupId *string `json:"distributedAvailabilityGroupId,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// LastHardenedLsn: The last hardened lsn
	LastHardenedLsn *string `json:"lastHardenedLsn,omitempty"`

	// LinkState: The link state
	LinkState *string `json:"linkState,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// PrimaryAvailabilityGroupName: The primary availability group name
	PrimaryAvailabilityGroupName *string `json:"primaryAvailabilityGroupName,omitempty"`

	// ReplicationMode: The replication mode of a distributed availability group. Parameter will be ignored during link
	// creation.
	ReplicationMode *DistributedAvailabilityGroupProperties_ReplicationMode_STATUS `json:"replicationMode,omitempty"`

	// SecondaryAvailabilityGroupName: The secondary availability group name
	SecondaryAvailabilityGroupName *string `json:"secondaryAvailabilityGroupName,omitempty"`

	// SourceEndpoint: The source endpoint
	SourceEndpoint *string `json:"sourceEndpoint,omitempty"`

	// SourceReplicaId: The source replica id
	SourceReplicaId *string `json:"sourceReplicaId,omitempty"`

	// TargetDatabase: The name of the target database
	TargetDatabase *string `json:"targetDatabase,omitempty"`

	// TargetReplicaId: The target replica id
	TargetReplicaId *string `json:"targetReplicaId,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &ManagedInstances_DistributedAvailabilityGroup_STATUS{}

// ConvertStatusFrom populates our ManagedInstances_DistributedAvailabilityGroup_STATUS from the provided source
func (group *ManagedInstances_DistributedAvailabilityGroup_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20211101s.ManagedInstances_DistributedAvailabilityGroup_STATUS)
	if ok {
		// Populate our instance from source
		return group.AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20211101s.ManagedInstances_DistributedAvailabilityGroup_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = group.AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our ManagedInstances_DistributedAvailabilityGroup_STATUS
func (group *ManagedInstances_DistributedAvailabilityGroup_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20211101s.ManagedInstances_DistributedAvailabilityGroup_STATUS)
	if ok {
		// Populate destination from our instance
		return group.AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20211101s.ManagedInstances_DistributedAvailabilityGroup_STATUS{}
	err := group.AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &ManagedInstances_DistributedAvailabilityGroup_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (group *ManagedInstances_DistributedAvailabilityGroup_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedInstances_DistributedAvailabilityGroup_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (group *ManagedInstances_DistributedAvailabilityGroup_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedInstances_DistributedAvailabilityGroup_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedInstances_DistributedAvailabilityGroup_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property ‘Conditions’

	// Set property ‘DistributedAvailabilityGroupId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DistributedAvailabilityGroupId != nil {
			distributedAvailabilityGroupId := *typedInput.Properties.DistributedAvailabilityGroupId
			group.DistributedAvailabilityGroupId = &distributedAvailabilityGroupId
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		group.Id = &id
	}

	// Set property ‘LastHardenedLsn’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastHardenedLsn != nil {
			lastHardenedLsn := *typedInput.Properties.LastHardenedLsn
			group.LastHardenedLsn = &lastHardenedLsn
		}
	}

	// Set property ‘LinkState’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LinkState != nil {
			linkState := *typedInput.Properties.LinkState
			group.LinkState = &linkState
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		group.Name = &name
	}

	// Set property ‘PrimaryAvailabilityGroupName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.PrimaryAvailabilityGroupName != nil {
			primaryAvailabilityGroupName := *typedInput.Properties.PrimaryAvailabilityGroupName
			group.PrimaryAvailabilityGroupName = &primaryAvailabilityGroupName
		}
	}

	// Set property ‘ReplicationMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ReplicationMode != nil {
			replicationMode := *typedInput.Properties.ReplicationMode
			group.ReplicationMode = &replicationMode
		}
	}

	// Set property ‘SecondaryAvailabilityGroupName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SecondaryAvailabilityGroupName != nil {
			secondaryAvailabilityGroupName := *typedInput.Properties.SecondaryAvailabilityGroupName
			group.SecondaryAvailabilityGroupName = &secondaryAvailabilityGroupName
		}
	}

	// Set property ‘SourceEndpoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceEndpoint != nil {
			sourceEndpoint := *typedInput.Properties.SourceEndpoint
			group.SourceEndpoint = &sourceEndpoint
		}
	}

	// Set property ‘SourceReplicaId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceReplicaId != nil {
			sourceReplicaId := *typedInput.Properties.SourceReplicaId
			group.SourceReplicaId = &sourceReplicaId
		}
	}

	// Set property ‘TargetDatabase’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TargetDatabase != nil {
			targetDatabase := *typedInput.Properties.TargetDatabase
			group.TargetDatabase = &targetDatabase
		}
	}

	// Set property ‘TargetReplicaId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.TargetReplicaId != nil {
			targetReplicaId := *typedInput.Properties.TargetReplicaId
			group.TargetReplicaId = &targetReplicaId
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		group.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup_STATUS populates our ManagedInstances_DistributedAvailabilityGroup_STATUS from the provided source ManagedInstances_DistributedAvailabilityGroup_STATUS
func (group *ManagedInstances_DistributedAvailabilityGroup_STATUS) AssignProperties_From_ManagedInstances_DistributedAvailabilityGroup_STATUS(source *v20211101s.ManagedInstances_DistributedAvailabilityGroup_STATUS) error {

	// Conditions
	group.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// DistributedAvailabilityGroupId
	group.DistributedAvailabilityGroupId = genruntime.ClonePointerToString(source.DistributedAvailabilityGroupId)

	// Id
	group.Id = genruntime.ClonePointerToString(source.Id)

	// LastHardenedLsn
	group.LastHardenedLsn = genruntime.ClonePointerToString(source.LastHardenedLsn)

	// LinkState
	group.LinkState = genruntime.ClonePointerToString(source.LinkState)

	// Name
	group.Name = genruntime.ClonePointerToString(source.Name)

	// PrimaryAvailabilityGroupName
	group.PrimaryAvailabilityGroupName = genruntime.ClonePointerToString(source.PrimaryAvailabilityGroupName)

	// ReplicationMode
	if source.ReplicationMode != nil {
		replicationMode := DistributedAvailabilityGroupProperties_ReplicationMode_STATUS(*source.ReplicationMode)
		group.ReplicationMode = &replicationMode
	} else {
		group.ReplicationMode = nil
	}

	// SecondaryAvailabilityGroupName
	group.SecondaryAvailabilityGroupName = genruntime.ClonePointerToString(source.SecondaryAvailabilityGroupName)

	// SourceEndpoint
	group.SourceEndpoint = genruntime.ClonePointerToString(source.SourceEndpoint)

	// SourceReplicaId
	group.SourceReplicaId = genruntime.ClonePointerToString(source.SourceReplicaId)

	// TargetDatabase
	group.TargetDatabase = genruntime.ClonePointerToString(source.TargetDatabase)

	// TargetReplicaId
	group.TargetReplicaId = genruntime.ClonePointerToString(source.TargetReplicaId)

	// Type
	group.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup_STATUS populates the provided destination ManagedInstances_DistributedAvailabilityGroup_STATUS from our ManagedInstances_DistributedAvailabilityGroup_STATUS
func (group *ManagedInstances_DistributedAvailabilityGroup_STATUS) AssignProperties_To_ManagedInstances_DistributedAvailabilityGroup_STATUS(destination *v20211101s.ManagedInstances_DistributedAvailabilityGroup_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(group.Conditions)

	// DistributedAvailabilityGroupId
	destination.DistributedAvailabilityGroupId = genruntime.ClonePointerToString(group.DistributedAvailabilityGroupId)

	// Id
	destination.Id = genruntime.ClonePointerToString(group.Id)

	// LastHardenedLsn
	destination.LastHardenedLsn = genruntime.ClonePointerToString(group.LastHardenedLsn)

	// LinkState
	destination.LinkState = genruntime.ClonePointerToString(group.LinkState)

	// Name
	destination.Name = genruntime.ClonePointerToString(group.Name)

	// PrimaryAvailabilityGroupName
	destination.PrimaryAvailabilityGroupName = genruntime.ClonePointerToString(group.PrimaryAvailabilityGroupName)

	// ReplicationMode
	if group.ReplicationMode != nil {
		replicationMode := string(*group.ReplicationMode)
		destination.ReplicationMode = &replicationMode
	} else {
		destination.ReplicationMode = nil
	}

	// SecondaryAvailabilityGroupName
	destination.SecondaryAvailabilityGroupName = genruntime.ClonePointerToString(group.SecondaryAvailabilityGroupName)

	// SourceEndpoint
	destination.SourceEndpoint = genruntime.ClonePointerToString(group.SourceEndpoint)

	// SourceReplicaId
	destination.SourceReplicaId = genruntime.ClonePointerToString(group.SourceReplicaId)

	// TargetDatabase
	destination.TargetDatabase = genruntime.ClonePointerToString(group.TargetDatabase)

	// TargetReplicaId
	destination.TargetReplicaId = genruntime.ClonePointerToString(group.TargetReplicaId)

	// Type
	destination.Type = genruntime.ClonePointerToString(group.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"Async","Sync"}
type DistributedAvailabilityGroupProperties_ReplicationMode string

const (
	DistributedAvailabilityGroupProperties_ReplicationMode_Async = DistributedAvailabilityGroupProperties_ReplicationMode("Async")
	DistributedAvailabilityGroupProperties_ReplicationMode_Sync  = DistributedAvailabilityGroupProperties_ReplicationMode("Sync")
)

type DistributedAvailabilityGroupProperties_ReplicationMode_STATUS string

const (
	DistributedAvailabilityGroupProperties_ReplicationMode_STATUS_Async = DistributedAvailabilityGroupProperties_ReplicationMode_STATUS("Async")
	DistributedAvailabilityGroupProperties_ReplicationMode_STATUS_Sync  = DistributedAvailabilityGroupProperties_ReplicationMode_STATUS("Sync")
)

func init() {
	SchemeBuilder.Register(&ManagedInstances_DistributedAvailabilityGroup{}, &ManagedInstances_DistributedAvailabilityGroupList{})
}
