// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"encoding/json"
	v20211101s "github.com/Azure/azure-service-operator/v2/api/sql/v1beta20211101storage"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedInstances_DnsAliase_WhenConvertedToHub_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	parameters.MinSuccessfulTests = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagedInstances_DnsAliase to hub returns original",
		prop.ForAll(RunResourceConversionTestForManagedInstances_DnsAliase, ManagedInstances_DnsAliaseGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunResourceConversionTestForManagedInstances_DnsAliase tests if a specific instance of ManagedInstances_DnsAliase round trips to the hub storage version and back losslessly
func RunResourceConversionTestForManagedInstances_DnsAliase(subject ManagedInstances_DnsAliase) string {
	// Copy subject to make sure conversion doesn't modify it
	copied := subject.DeepCopy()

	// Convert to our hub version
	var hub v20211101s.ManagedInstances_DnsAliase
	err := copied.ConvertTo(&hub)
	if err != nil {
		return err.Error()
	}

	// Convert from our hub version
	var actual ManagedInstances_DnsAliase
	err = actual.ConvertFrom(&hub)
	if err != nil {
		return err.Error()
	}

	// Compare actual with what we started with
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagedInstances_DnsAliase_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagedInstances_DnsAliase to ManagedInstances_DnsAliase via AssignProperties_To_ManagedInstances_DnsAliase & AssignProperties_From_ManagedInstances_DnsAliase returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagedInstances_DnsAliase, ManagedInstances_DnsAliaseGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagedInstances_DnsAliase tests if a specific instance of ManagedInstances_DnsAliase can be assigned to v1beta20211101storage and back losslessly
func RunPropertyAssignmentTestForManagedInstances_DnsAliase(subject ManagedInstances_DnsAliase) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.ManagedInstances_DnsAliase
	err := copied.AssignProperties_To_ManagedInstances_DnsAliase(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagedInstances_DnsAliase
	err = actual.AssignProperties_From_ManagedInstances_DnsAliase(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagedInstances_DnsAliase_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstances_DnsAliase via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstances_DnsAliase, ManagedInstances_DnsAliaseGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstances_DnsAliase runs a test to see if a specific instance of ManagedInstances_DnsAliase round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstances_DnsAliase(subject ManagedInstances_DnsAliase) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstances_DnsAliase
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstances_DnsAliase instances for property testing - lazily instantiated by
// ManagedInstances_DnsAliaseGenerator()
var managedInstances_DnsAliaseGenerator gopter.Gen

// ManagedInstances_DnsAliaseGenerator returns a generator of ManagedInstances_DnsAliase instances for property testing.
func ManagedInstances_DnsAliaseGenerator() gopter.Gen {
	if managedInstances_DnsAliaseGenerator != nil {
		return managedInstances_DnsAliaseGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedInstances_DnsAliase(generators)
	managedInstances_DnsAliaseGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_DnsAliase{}), generators)

	return managedInstances_DnsAliaseGenerator
}

// AddRelatedPropertyGeneratorsForManagedInstances_DnsAliase is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedInstances_DnsAliase(gens map[string]gopter.Gen) {
	gens["Spec"] = ManagedInstances_DnsAliase_SpecGenerator()
	gens["Status"] = ManagedInstances_DnsAliase_STATUSGenerator()
}

func Test_ManagedInstances_DnsAliase_Spec_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagedInstances_DnsAliase_Spec to ManagedInstances_DnsAliase_Spec via AssignProperties_To_ManagedInstances_DnsAliase_Spec & AssignProperties_From_ManagedInstances_DnsAliase_Spec returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagedInstances_DnsAliase_Spec, ManagedInstances_DnsAliase_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagedInstances_DnsAliase_Spec tests if a specific instance of ManagedInstances_DnsAliase_Spec can be assigned to v1beta20211101storage and back losslessly
func RunPropertyAssignmentTestForManagedInstances_DnsAliase_Spec(subject ManagedInstances_DnsAliase_Spec) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.ManagedInstances_DnsAliase_Spec
	err := copied.AssignProperties_To_ManagedInstances_DnsAliase_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagedInstances_DnsAliase_Spec
	err = actual.AssignProperties_From_ManagedInstances_DnsAliase_Spec(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagedInstances_DnsAliase_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstances_DnsAliase_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstances_DnsAliase_Spec, ManagedInstances_DnsAliase_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstances_DnsAliase_Spec runs a test to see if a specific instance of ManagedInstances_DnsAliase_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstances_DnsAliase_Spec(subject ManagedInstances_DnsAliase_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstances_DnsAliase_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstances_DnsAliase_Spec instances for property testing - lazily instantiated by
// ManagedInstances_DnsAliase_SpecGenerator()
var managedInstances_DnsAliase_SpecGenerator gopter.Gen

// ManagedInstances_DnsAliase_SpecGenerator returns a generator of ManagedInstances_DnsAliase_Spec instances for property testing.
func ManagedInstances_DnsAliase_SpecGenerator() gopter.Gen {
	if managedInstances_DnsAliase_SpecGenerator != nil {
		return managedInstances_DnsAliase_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstances_DnsAliase_Spec(generators)
	managedInstances_DnsAliase_SpecGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_DnsAliase_Spec{}), generators)

	return managedInstances_DnsAliase_SpecGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstances_DnsAliase_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstances_DnsAliase_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["CreateDnsRecord"] = gen.PtrOf(gen.Bool())
}

func Test_ManagedInstances_DnsAliase_STATUS_WhenPropertiesConverted_RoundTripsWithoutLoss(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MaxSize = 10
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip from ManagedInstances_DnsAliase_STATUS to ManagedInstances_DnsAliase_STATUS via AssignProperties_To_ManagedInstances_DnsAliase_STATUS & AssignProperties_From_ManagedInstances_DnsAliase_STATUS returns original",
		prop.ForAll(RunPropertyAssignmentTestForManagedInstances_DnsAliase_STATUS, ManagedInstances_DnsAliase_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(false, 240, os.Stdout))
}

// RunPropertyAssignmentTestForManagedInstances_DnsAliase_STATUS tests if a specific instance of ManagedInstances_DnsAliase_STATUS can be assigned to v1beta20211101storage and back losslessly
func RunPropertyAssignmentTestForManagedInstances_DnsAliase_STATUS(subject ManagedInstances_DnsAliase_STATUS) string {
	// Copy subject to make sure assignment doesn't modify it
	copied := subject.DeepCopy()

	// Use AssignPropertiesTo() for the first stage of conversion
	var other v20211101s.ManagedInstances_DnsAliase_STATUS
	err := copied.AssignProperties_To_ManagedInstances_DnsAliase_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Use AssignPropertiesFrom() to convert back to our original type
	var actual ManagedInstances_DnsAliase_STATUS
	err = actual.AssignProperties_From_ManagedInstances_DnsAliase_STATUS(&other)
	if err != nil {
		return err.Error()
	}

	// Check for a match
	match := cmp.Equal(subject, actual)
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

func Test_ManagedInstances_DnsAliase_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstances_DnsAliase_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstances_DnsAliase_STATUS, ManagedInstances_DnsAliase_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstances_DnsAliase_STATUS runs a test to see if a specific instance of ManagedInstances_DnsAliase_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstances_DnsAliase_STATUS(subject ManagedInstances_DnsAliase_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstances_DnsAliase_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstances_DnsAliase_STATUS instances for property testing - lazily instantiated by
// ManagedInstances_DnsAliase_STATUSGenerator()
var managedInstances_DnsAliase_STATUSGenerator gopter.Gen

// ManagedInstances_DnsAliase_STATUSGenerator returns a generator of ManagedInstances_DnsAliase_STATUS instances for property testing.
func ManagedInstances_DnsAliase_STATUSGenerator() gopter.Gen {
	if managedInstances_DnsAliase_STATUSGenerator != nil {
		return managedInstances_DnsAliase_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstances_DnsAliase_STATUS(generators)
	managedInstances_DnsAliase_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_DnsAliase_STATUS{}), generators)

	return managedInstances_DnsAliase_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstances_DnsAliase_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstances_DnsAliase_STATUS(gens map[string]gopter.Gen) {
	gens["AzureDnsRecord"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PublicAzureDnsRecord"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}
