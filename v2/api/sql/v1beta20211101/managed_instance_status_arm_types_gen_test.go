// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedInstance_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstance_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstance_STATUS_ARM, ManagedInstance_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstance_STATUS_ARM runs a test to see if a specific instance of ManagedInstance_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstance_STATUS_ARM(subject ManagedInstance_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstance_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstance_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedInstance_STATUS_ARMGenerator()
var managedInstance_STATUS_ARMGenerator gopter.Gen

// ManagedInstance_STATUS_ARMGenerator returns a generator of ManagedInstance_STATUS_ARM instances for property testing.
// We first initialize managedInstance_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedInstance_STATUS_ARMGenerator() gopter.Gen {
	if managedInstance_STATUS_ARMGenerator != nil {
		return managedInstance_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstance_STATUS_ARM(generators)
	managedInstance_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstance_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstance_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedInstance_STATUS_ARM(generators)
	managedInstance_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstance_STATUS_ARM{}), generators)

	return managedInstance_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstance_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstance_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedInstance_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedInstance_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(ResourceIdentity_STATUS_ARMGenerator())
	gens["Properties"] = gen.PtrOf(ManagedInstanceProperties_STATUS_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUS_ARMGenerator())
}

func Test_ManagedInstanceProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstanceProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstanceProperties_STATUS_ARM, ManagedInstanceProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstanceProperties_STATUS_ARM runs a test to see if a specific instance of ManagedInstanceProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstanceProperties_STATUS_ARM(subject ManagedInstanceProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstanceProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstanceProperties_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedInstanceProperties_STATUS_ARMGenerator()
var managedInstanceProperties_STATUS_ARMGenerator gopter.Gen

// ManagedInstanceProperties_STATUS_ARMGenerator returns a generator of ManagedInstanceProperties_STATUS_ARM instances for property testing.
// We first initialize managedInstanceProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedInstanceProperties_STATUS_ARMGenerator() gopter.Gen {
	if managedInstanceProperties_STATUS_ARMGenerator != nil {
		return managedInstanceProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstanceProperties_STATUS_ARM(generators)
	managedInstanceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstanceProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstanceProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedInstanceProperties_STATUS_ARM(generators)
	managedInstanceProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstanceProperties_STATUS_ARM{}), generators)

	return managedInstanceProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstanceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstanceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdministratorLogin"] = gen.PtrOf(gen.AlphaString())
	gens["Collation"] = gen.PtrOf(gen.AlphaString())
	gens["CurrentBackupStorageRedundancy"] = gen.PtrOf(gen.OneConstOf(
		ManagedInstanceProperties_CurrentBackupStorageRedundancy_STATUS_Geo,
		ManagedInstanceProperties_CurrentBackupStorageRedundancy_STATUS_GeoZone,
		ManagedInstanceProperties_CurrentBackupStorageRedundancy_STATUS_Local,
		ManagedInstanceProperties_CurrentBackupStorageRedundancy_STATUS_Zone))
	gens["DnsZone"] = gen.PtrOf(gen.AlphaString())
	gens["DnsZonePartner"] = gen.PtrOf(gen.AlphaString())
	gens["FullyQualifiedDomainName"] = gen.PtrOf(gen.AlphaString())
	gens["InstancePoolId"] = gen.PtrOf(gen.AlphaString())
	gens["KeyId"] = gen.PtrOf(gen.AlphaString())
	gens["LicenseType"] = gen.PtrOf(gen.OneConstOf(ManagedInstanceProperties_LicenseType_STATUS_BasePrice, ManagedInstanceProperties_LicenseType_STATUS_LicenseIncluded))
	gens["MaintenanceConfigurationId"] = gen.PtrOf(gen.AlphaString())
	gens["ManagedInstanceCreateMode"] = gen.PtrOf(gen.OneConstOf(ManagedInstanceProperties_ManagedInstanceCreateMode_STATUS_Default, ManagedInstanceProperties_ManagedInstanceCreateMode_STATUS_PointInTimeRestore))
	gens["MinimalTlsVersion"] = gen.PtrOf(gen.AlphaString())
	gens["PrimaryUserAssignedIdentityId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.OneConstOf(
		ManagedInstanceProperties_ProvisioningState_STATUS_Accepted,
		ManagedInstanceProperties_ProvisioningState_STATUS_Canceled,
		ManagedInstanceProperties_ProvisioningState_STATUS_Created,
		ManagedInstanceProperties_ProvisioningState_STATUS_Creating,
		ManagedInstanceProperties_ProvisioningState_STATUS_Deleted,
		ManagedInstanceProperties_ProvisioningState_STATUS_Deleting,
		ManagedInstanceProperties_ProvisioningState_STATUS_Failed,
		ManagedInstanceProperties_ProvisioningState_STATUS_NotSpecified,
		ManagedInstanceProperties_ProvisioningState_STATUS_Registering,
		ManagedInstanceProperties_ProvisioningState_STATUS_Running,
		ManagedInstanceProperties_ProvisioningState_STATUS_Succeeded,
		ManagedInstanceProperties_ProvisioningState_STATUS_TimedOut,
		ManagedInstanceProperties_ProvisioningState_STATUS_Unknown,
		ManagedInstanceProperties_ProvisioningState_STATUS_Unrecognized,
		ManagedInstanceProperties_ProvisioningState_STATUS_Updating))
	gens["ProxyOverride"] = gen.PtrOf(gen.OneConstOf(ManagedInstanceProperties_ProxyOverride_STATUS_Default, ManagedInstanceProperties_ProxyOverride_STATUS_Proxy, ManagedInstanceProperties_ProxyOverride_STATUS_Redirect))
	gens["PublicDataEndpointEnabled"] = gen.PtrOf(gen.Bool())
	gens["RequestedBackupStorageRedundancy"] = gen.PtrOf(gen.OneConstOf(
		ManagedInstanceProperties_RequestedBackupStorageRedundancy_STATUS_Geo,
		ManagedInstanceProperties_RequestedBackupStorageRedundancy_STATUS_GeoZone,
		ManagedInstanceProperties_RequestedBackupStorageRedundancy_STATUS_Local,
		ManagedInstanceProperties_RequestedBackupStorageRedundancy_STATUS_Zone))
	gens["RestorePointInTime"] = gen.PtrOf(gen.AlphaString())
	gens["SourceManagedInstanceId"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.AlphaString())
	gens["StorageSizeInGB"] = gen.PtrOf(gen.Int())
	gens["SubnetId"] = gen.PtrOf(gen.AlphaString())
	gens["TimezoneId"] = gen.PtrOf(gen.AlphaString())
	gens["VCores"] = gen.PtrOf(gen.Int())
	gens["ZoneRedundant"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForManagedInstanceProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedInstanceProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Administrators"] = gen.PtrOf(ManagedInstanceExternalAdministrator_STATUS_ARMGenerator())
	gens["PrivateEndpointConnections"] = gen.SliceOf(ManagedInstancePecProperty_STATUS_ARMGenerator())
	gens["ServicePrincipal"] = gen.PtrOf(ServicePrincipal_STATUS_ARMGenerator())
}

func Test_ResourceIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ResourceIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForResourceIdentity_STATUS_ARM, ResourceIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForResourceIdentity_STATUS_ARM runs a test to see if a specific instance of ResourceIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForResourceIdentity_STATUS_ARM(subject ResourceIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ResourceIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ResourceIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// ResourceIdentity_STATUS_ARMGenerator()
var resourceIdentity_STATUS_ARMGenerator gopter.Gen

// ResourceIdentity_STATUS_ARMGenerator returns a generator of ResourceIdentity_STATUS_ARM instances for property testing.
// We first initialize resourceIdentity_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ResourceIdentity_STATUS_ARMGenerator() gopter.Gen {
	if resourceIdentity_STATUS_ARMGenerator != nil {
		return resourceIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceIdentity_STATUS_ARM(generators)
	resourceIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceIdentity_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForResourceIdentity_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForResourceIdentity_STATUS_ARM(generators)
	resourceIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ResourceIdentity_STATUS_ARM{}), generators)

	return resourceIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForResourceIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForResourceIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(
		ResourceIdentity_Type_STATUS_None,
		ResourceIdentity_Type_STATUS_SystemAssigned,
		ResourceIdentity_Type_STATUS_SystemAssignedUserAssigned,
		ResourceIdentity_Type_STATUS_UserAssigned))
}

// AddRelatedPropertyGeneratorsForResourceIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForResourceIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), UserIdentity_STATUS_ARMGenerator())
}

func Test_Sku_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Sku_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSku_STATUS_ARM, Sku_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSku_STATUS_ARM runs a test to see if a specific instance of Sku_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSku_STATUS_ARM(subject Sku_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Sku_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Sku_STATUS_ARM instances for property testing - lazily instantiated by Sku_STATUS_ARMGenerator()
var sku_STATUS_ARMGenerator gopter.Gen

// Sku_STATUS_ARMGenerator returns a generator of Sku_STATUS_ARM instances for property testing.
func Sku_STATUS_ARMGenerator() gopter.Gen {
	if sku_STATUS_ARMGenerator != nil {
		return sku_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSku_STATUS_ARM(generators)
	sku_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(Sku_STATUS_ARM{}), generators)

	return sku_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSku_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSku_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Capacity"] = gen.PtrOf(gen.Int())
	gens["Family"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Size"] = gen.PtrOf(gen.AlphaString())
	gens["Tier"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedInstanceExternalAdministrator_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstanceExternalAdministrator_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstanceExternalAdministrator_STATUS_ARM, ManagedInstanceExternalAdministrator_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstanceExternalAdministrator_STATUS_ARM runs a test to see if a specific instance of ManagedInstanceExternalAdministrator_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstanceExternalAdministrator_STATUS_ARM(subject ManagedInstanceExternalAdministrator_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstanceExternalAdministrator_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstanceExternalAdministrator_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedInstanceExternalAdministrator_STATUS_ARMGenerator()
var managedInstanceExternalAdministrator_STATUS_ARMGenerator gopter.Gen

// ManagedInstanceExternalAdministrator_STATUS_ARMGenerator returns a generator of ManagedInstanceExternalAdministrator_STATUS_ARM instances for property testing.
func ManagedInstanceExternalAdministrator_STATUS_ARMGenerator() gopter.Gen {
	if managedInstanceExternalAdministrator_STATUS_ARMGenerator != nil {
		return managedInstanceExternalAdministrator_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstanceExternalAdministrator_STATUS_ARM(generators)
	managedInstanceExternalAdministrator_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstanceExternalAdministrator_STATUS_ARM{}), generators)

	return managedInstanceExternalAdministrator_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstanceExternalAdministrator_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstanceExternalAdministrator_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["AdministratorType"] = gen.PtrOf(gen.OneConstOf(ManagedInstanceExternalAdministrator_AdministratorType_STATUS_ActiveDirectory))
	gens["AzureADOnlyAuthentication"] = gen.PtrOf(gen.Bool())
	gens["Login"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalType"] = gen.PtrOf(gen.OneConstOf(ManagedInstanceExternalAdministrator_PrincipalType_STATUS_Application, ManagedInstanceExternalAdministrator_PrincipalType_STATUS_Group, ManagedInstanceExternalAdministrator_PrincipalType_STATUS_User))
	gens["Sid"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedInstancePecProperty_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstancePecProperty_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstancePecProperty_STATUS_ARM, ManagedInstancePecProperty_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstancePecProperty_STATUS_ARM runs a test to see if a specific instance of ManagedInstancePecProperty_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstancePecProperty_STATUS_ARM(subject ManagedInstancePecProperty_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstancePecProperty_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstancePecProperty_STATUS_ARM instances for property testing - lazily instantiated by
// ManagedInstancePecProperty_STATUS_ARMGenerator()
var managedInstancePecProperty_STATUS_ARMGenerator gopter.Gen

// ManagedInstancePecProperty_STATUS_ARMGenerator returns a generator of ManagedInstancePecProperty_STATUS_ARM instances for property testing.
// We first initialize managedInstancePecProperty_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedInstancePecProperty_STATUS_ARMGenerator() gopter.Gen {
	if managedInstancePecProperty_STATUS_ARMGenerator != nil {
		return managedInstancePecProperty_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstancePecProperty_STATUS_ARM(generators)
	managedInstancePecProperty_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstancePecProperty_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstancePecProperty_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedInstancePecProperty_STATUS_ARM(generators)
	managedInstancePecProperty_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstancePecProperty_STATUS_ARM{}), generators)

	return managedInstancePecProperty_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstancePecProperty_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstancePecProperty_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedInstancePecProperty_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedInstancePecProperty_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARMGenerator())
}

func Test_ServicePrincipal_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ServicePrincipal_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServicePrincipal_STATUS_ARM, ServicePrincipal_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServicePrincipal_STATUS_ARM runs a test to see if a specific instance of ServicePrincipal_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServicePrincipal_STATUS_ARM(subject ServicePrincipal_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ServicePrincipal_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ServicePrincipal_STATUS_ARM instances for property testing - lazily instantiated by
// ServicePrincipal_STATUS_ARMGenerator()
var servicePrincipal_STATUS_ARMGenerator gopter.Gen

// ServicePrincipal_STATUS_ARMGenerator returns a generator of ServicePrincipal_STATUS_ARM instances for property testing.
func ServicePrincipal_STATUS_ARMGenerator() gopter.Gen {
	if servicePrincipal_STATUS_ARMGenerator != nil {
		return servicePrincipal_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServicePrincipal_STATUS_ARM(generators)
	servicePrincipal_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ServicePrincipal_STATUS_ARM{}), generators)

	return servicePrincipal_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServicePrincipal_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServicePrincipal_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.OneConstOf(ServicePrincipal_Type_STATUS_None, ServicePrincipal_Type_STATUS_SystemAssigned))
}

func Test_UserIdentity_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of UserIdentity_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForUserIdentity_STATUS_ARM, UserIdentity_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForUserIdentity_STATUS_ARM runs a test to see if a specific instance of UserIdentity_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForUserIdentity_STATUS_ARM(subject UserIdentity_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual UserIdentity_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of UserIdentity_STATUS_ARM instances for property testing - lazily instantiated by
// UserIdentity_STATUS_ARMGenerator()
var userIdentity_STATUS_ARMGenerator gopter.Gen

// UserIdentity_STATUS_ARMGenerator returns a generator of UserIdentity_STATUS_ARM instances for property testing.
func UserIdentity_STATUS_ARMGenerator() gopter.Gen {
	if userIdentity_STATUS_ARMGenerator != nil {
		return userIdentity_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForUserIdentity_STATUS_ARM(generators)
	userIdentity_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(UserIdentity_STATUS_ARM{}), generators)

	return userIdentity_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForUserIdentity_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForUserIdentity_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM, ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM runs a test to see if a specific instance of ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM(subject ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM instances for property testing - lazily
// instantiated by ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARMGenerator()
var managedInstancePrivateEndpointConnectionProperties_STATUS_ARMGenerator gopter.Gen

// ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARMGenerator returns a generator of ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM instances for property testing.
// We first initialize managedInstancePrivateEndpointConnectionProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARMGenerator() gopter.Gen {
	if managedInstancePrivateEndpointConnectionProperties_STATUS_ARMGenerator != nil {
		return managedInstancePrivateEndpointConnectionProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM(generators)
	managedInstancePrivateEndpointConnectionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM(generators)
	managedInstancePrivateEndpointConnectionProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM{}), generators)

	return managedInstancePrivateEndpointConnectionProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedInstancePrivateEndpointConnectionProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["PrivateEndpoint"] = gen.PtrOf(ManagedInstancePrivateEndpointProperty_STATUS_ARMGenerator())
	gens["PrivateLinkServiceConnectionState"] = gen.PtrOf(ManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator())
}

func Test_ManagedInstancePrivateEndpointProperty_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstancePrivateEndpointProperty_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstancePrivateEndpointProperty_STATUS_ARM, ManagedInstancePrivateEndpointProperty_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstancePrivateEndpointProperty_STATUS_ARM runs a test to see if a specific instance of ManagedInstancePrivateEndpointProperty_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstancePrivateEndpointProperty_STATUS_ARM(subject ManagedInstancePrivateEndpointProperty_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstancePrivateEndpointProperty_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstancePrivateEndpointProperty_STATUS_ARM instances for property testing - lazily instantiated
// by ManagedInstancePrivateEndpointProperty_STATUS_ARMGenerator()
var managedInstancePrivateEndpointProperty_STATUS_ARMGenerator gopter.Gen

// ManagedInstancePrivateEndpointProperty_STATUS_ARMGenerator returns a generator of ManagedInstancePrivateEndpointProperty_STATUS_ARM instances for property testing.
func ManagedInstancePrivateEndpointProperty_STATUS_ARMGenerator() gopter.Gen {
	if managedInstancePrivateEndpointProperty_STATUS_ARMGenerator != nil {
		return managedInstancePrivateEndpointProperty_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstancePrivateEndpointProperty_STATUS_ARM(generators)
	managedInstancePrivateEndpointProperty_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstancePrivateEndpointProperty_STATUS_ARM{}), generators)

	return managedInstancePrivateEndpointProperty_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstancePrivateEndpointProperty_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstancePrivateEndpointProperty_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM, ManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM runs a test to see if a specific instance of ManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM(subject ManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM instances for property testing -
// lazily instantiated by ManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator()
var managedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator gopter.Gen

// ManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator returns a generator of ManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM instances for property testing.
func ManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator() gopter.Gen {
	if managedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator != nil {
		return managedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM(generators)
	managedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM{}), generators)

	return managedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstancePrivateLinkServiceConnectionStateProperty_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ActionsRequired"] = gen.PtrOf(gen.AlphaString())
	gens["Description"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.AlphaString())
}
