// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"fmt"
	v20211101s "github.com/Azure/azure-service-operator/v2/api/sql/v1beta20211101storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	kerrors "k8s.io/apimachinery/pkg/util/errors"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/ManagedDatabases.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}
type ManagedInstances_Database struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedInstances_Database_Spec   `json:"spec,omitempty"`
	Status            ManagedInstances_Database_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &ManagedInstances_Database{}

// GetConditions returns the conditions of the resource
func (database *ManagedInstances_Database) GetConditions() conditions.Conditions {
	return database.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (database *ManagedInstances_Database) SetConditions(conditions conditions.Conditions) {
	database.Status.Conditions = conditions
}

var _ conversion.Convertible = &ManagedInstances_Database{}

// ConvertFrom populates our ManagedInstances_Database from the provided hub ManagedInstances_Database
func (database *ManagedInstances_Database) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20211101s.ManagedInstances_Database)
	if !ok {
		return fmt.Errorf("expected sql/v1beta20211101storage/ManagedInstances_Database but received %T instead", hub)
	}

	return database.AssignProperties_From_ManagedInstances_Database(source)
}

// ConvertTo populates the provided hub ManagedInstances_Database from our ManagedInstances_Database
func (database *ManagedInstances_Database) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20211101s.ManagedInstances_Database)
	if !ok {
		return fmt.Errorf("expected sql/v1beta20211101storage/ManagedInstances_Database but received %T instead", hub)
	}

	return database.AssignProperties_To_ManagedInstances_Database(destination)
}

// +kubebuilder:webhook:path=/mutate-sql-azure-com-v1beta20211101-managedinstances_database,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=sql.azure.com,resources=managedinstances_databases,verbs=create;update,versions=v1beta20211101,name=default.v1beta20211101.managedinstances_databases.sql.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &ManagedInstances_Database{}

// Default applies defaults to the ManagedInstances_Database resource
func (database *ManagedInstances_Database) Default() {
	database.defaultImpl()
	var temp interface{} = database
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (database *ManagedInstances_Database) defaultAzureName() {
	if database.Spec.AzureName == "" {
		database.Spec.AzureName = database.Name
	}
}

// defaultImpl applies the code generated defaults to the ManagedInstances_Database resource
func (database *ManagedInstances_Database) defaultImpl() { database.defaultAzureName() }

var _ genruntime.KubernetesResource = &ManagedInstances_Database{}

// AzureName returns the Azure name of the resource
func (database *ManagedInstances_Database) AzureName() string {
	return database.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (database ManagedInstances_Database) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (database *ManagedInstances_Database) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (database *ManagedInstances_Database) GetSpec() genruntime.ConvertibleSpec {
	return &database.Spec
}

// GetStatus returns the status of this resource
func (database *ManagedInstances_Database) GetStatus() genruntime.ConvertibleStatus {
	return &database.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Sql/managedInstances/databases"
func (database *ManagedInstances_Database) GetType() string {
	return "Microsoft.Sql/managedInstances/databases"
}

// NewEmptyStatus returns a new empty (blank) status
func (database *ManagedInstances_Database) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &ManagedInstances_Database_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (database *ManagedInstances_Database) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(database.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  database.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (database *ManagedInstances_Database) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*ManagedInstances_Database_STATUS); ok {
		database.Status = *st
		return nil
	}

	// Convert status to required version
	var st ManagedInstances_Database_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	database.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-sql-azure-com-v1beta20211101-managedinstances_database,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=sql.azure.com,resources=managedinstances_databases,verbs=create;update,versions=v1beta20211101,name=validate.v1beta20211101.managedinstances_databases.sql.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &ManagedInstances_Database{}

// ValidateCreate validates the creation of the resource
func (database *ManagedInstances_Database) ValidateCreate() error {
	validations := database.createValidations()
	var temp interface{} = database
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateDelete validates the deletion of the resource
func (database *ManagedInstances_Database) ValidateDelete() error {
	validations := database.deleteValidations()
	var temp interface{} = database
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation()
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// ValidateUpdate validates an update of the resource
func (database *ManagedInstances_Database) ValidateUpdate(old runtime.Object) error {
	validations := database.updateValidations()
	var temp interface{} = database
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	var errs []error
	for _, validation := range validations {
		err := validation(old)
		if err != nil {
			errs = append(errs, err)
		}
	}
	return kerrors.NewAggregate(errs)
}

// createValidations validates the creation of the resource
func (database *ManagedInstances_Database) createValidations() []func() error {
	return []func() error{database.validateResourceReferences}
}

// deleteValidations validates the deletion of the resource
func (database *ManagedInstances_Database) deleteValidations() []func() error {
	return nil
}

// updateValidations validates the update of the resource
func (database *ManagedInstances_Database) updateValidations() []func(old runtime.Object) error {
	return []func(old runtime.Object) error{
		func(old runtime.Object) error {
			return database.validateResourceReferences()
		},
		database.validateWriteOnceProperties}
}

// validateResourceReferences validates all resource references
func (database *ManagedInstances_Database) validateResourceReferences() error {
	refs, err := reflecthelpers.FindResourceReferences(&database.Spec)
	if err != nil {
		return err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (database *ManagedInstances_Database) validateWriteOnceProperties(old runtime.Object) error {
	oldObj, ok := old.(*ManagedInstances_Database)
	if !ok {
		return nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, database)
}

// AssignProperties_From_ManagedInstances_Database populates our ManagedInstances_Database from the provided source ManagedInstances_Database
func (database *ManagedInstances_Database) AssignProperties_From_ManagedInstances_Database(source *v20211101s.ManagedInstances_Database) error {

	// ObjectMeta
	database.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec ManagedInstances_Database_Spec
	err := spec.AssignProperties_From_ManagedInstances_Database_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_ManagedInstances_Database_Spec() to populate field Spec")
	}
	database.Spec = spec

	// Status
	var status ManagedInstances_Database_STATUS
	err = status.AssignProperties_From_ManagedInstances_Database_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_ManagedInstances_Database_STATUS() to populate field Status")
	}
	database.Status = status

	// No error
	return nil
}

// AssignProperties_To_ManagedInstances_Database populates the provided destination ManagedInstances_Database from our ManagedInstances_Database
func (database *ManagedInstances_Database) AssignProperties_To_ManagedInstances_Database(destination *v20211101s.ManagedInstances_Database) error {

	// ObjectMeta
	destination.ObjectMeta = *database.ObjectMeta.DeepCopy()

	// Spec
	var spec v20211101s.ManagedInstances_Database_Spec
	err := database.Spec.AssignProperties_To_ManagedInstances_Database_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_ManagedInstances_Database_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20211101s.ManagedInstances_Database_STATUS
	err = database.Status.AssignProperties_To_ManagedInstances_Database_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_ManagedInstances_Database_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (database *ManagedInstances_Database) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: database.Spec.OriginalVersion(),
		Kind:    "ManagedInstances_Database",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/ManagedDatabases.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}
type ManagedInstances_DatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedInstances_Database `json:"items"`
}

type ManagedInstances_Database_Spec struct {
	// AutoCompleteRestore: Whether to auto complete restore of this managed database.
	AutoCompleteRestore *bool `json:"autoCompleteRestore,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// CatalogCollation: Collation of the metadata catalog.
	CatalogCollation *ManagedDatabaseProperties_CatalogCollation `json:"catalogCollation,omitempty"`

	// Collation: Collation of the managed database.
	Collation *string `json:"collation,omitempty"`

	// CreateMode: Managed database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of
	// an existing database. SourceDatabaseName, SourceManagedInstanceName and PointInTime must be specified.
	// RestoreExternalBackup: Create a database by restoring from external backup files. Collation, StorageContainerUri and
	// StorageContainerSasToken must be specified. Recovery: Creates a database by restoring a geo-replicated backup.
	// RecoverableDatabaseId must be specified as the recoverable database resource ID to restore.
	// RestoreLongTermRetentionBackup: Create a database by restoring from a long term retention backup
	// (longTermRetentionBackupResourceId required).
	CreateMode *ManagedDatabaseProperties_CreateMode `json:"createMode,omitempty"`

	// LastBackupName: Last backup file name for restore of this managed database.
	LastBackupName *string `json:"lastBackupName,omitempty"`

	// +kubebuilder:validation:Required
	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// LongTermRetentionBackupResourceReference: The name of the Long Term Retention backup to be used for restore of this
	// managed database.
	LongTermRetentionBackupResourceReference *genruntime.ResourceReference `armReference:"LongTermRetentionBackupResourceId" json:"longTermRetentionBackupResourceReference,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a sql.azure.com/ManagedInstance resource
	Owner *genruntime.KnownResourceReference `group:"sql.azure.com" json:"owner,omitempty" kind:"ManagedInstance"`

	// RecoverableDatabaseReference: The resource identifier of the recoverable database associated with create operation of
	// this database.
	RecoverableDatabaseReference *genruntime.ResourceReference `armReference:"RecoverableDatabaseId" json:"recoverableDatabaseReference,omitempty"`

	// RestorableDroppedDatabaseReference: The restorable dropped database resource id to restore when creating this database.
	RestorableDroppedDatabaseReference *genruntime.ResourceReference `armReference:"RestorableDroppedDatabaseId" json:"restorableDroppedDatabaseReference,omitempty"`

	// RestorePointInTime: Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point in
	// time (ISO8601 format) of the source database that will be restored to create the new database.
	RestorePointInTime *string `json:"restorePointInTime,omitempty"`

	// SourceDatabaseReference: The resource identifier of the source database associated with create operation of this
	// database.
	SourceDatabaseReference *genruntime.ResourceReference `armReference:"SourceDatabaseId" json:"sourceDatabaseReference,omitempty"`

	// StorageContainerSasToken: Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the
	// storage container sas token.
	StorageContainerSasToken *string `json:"storageContainerSasToken,omitempty"`

	// StorageContainerUri: Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the uri of
	// the storage container where backups for this restore are stored.
	StorageContainerUri *string `json:"storageContainerUri,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMTransformer = &ManagedInstances_Database_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (database *ManagedInstances_Database_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if database == nil {
		return nil, nil
	}
	result := &ManagedInstances_Database_Spec_ARM{}

	// Set property ‘Location’:
	if database.Location != nil {
		location := *database.Location
		result.Location = &location
	}

	// Set property ‘Name’:
	result.Name = resolved.Name

	// Set property ‘Properties’:
	if database.AutoCompleteRestore != nil ||
		database.CatalogCollation != nil ||
		database.Collation != nil ||
		database.CreateMode != nil ||
		database.LastBackupName != nil ||
		database.LongTermRetentionBackupResourceReference != nil ||
		database.RecoverableDatabaseReference != nil ||
		database.RestorableDroppedDatabaseReference != nil ||
		database.RestorePointInTime != nil ||
		database.SourceDatabaseReference != nil ||
		database.StorageContainerSasToken != nil ||
		database.StorageContainerUri != nil {
		result.Properties = &ManagedDatabaseProperties_ARM{}
	}
	if database.AutoCompleteRestore != nil {
		autoCompleteRestore := *database.AutoCompleteRestore
		result.Properties.AutoCompleteRestore = &autoCompleteRestore
	}
	if database.CatalogCollation != nil {
		catalogCollation := *database.CatalogCollation
		result.Properties.CatalogCollation = &catalogCollation
	}
	if database.Collation != nil {
		collation := *database.Collation
		result.Properties.Collation = &collation
	}
	if database.CreateMode != nil {
		createMode := *database.CreateMode
		result.Properties.CreateMode = &createMode
	}
	if database.LastBackupName != nil {
		lastBackupName := *database.LastBackupName
		result.Properties.LastBackupName = &lastBackupName
	}
	if database.LongTermRetentionBackupResourceReference != nil {
		longTermRetentionBackupResourceIdARMID, err := resolved.ResolvedReferences.Lookup(*database.LongTermRetentionBackupResourceReference)
		if err != nil {
			return nil, err
		}
		longTermRetentionBackupResourceId := longTermRetentionBackupResourceIdARMID
		result.Properties.LongTermRetentionBackupResourceId = &longTermRetentionBackupResourceId
	}
	if database.RecoverableDatabaseReference != nil {
		recoverableDatabaseIdARMID, err := resolved.ResolvedReferences.Lookup(*database.RecoverableDatabaseReference)
		if err != nil {
			return nil, err
		}
		recoverableDatabaseId := recoverableDatabaseIdARMID
		result.Properties.RecoverableDatabaseId = &recoverableDatabaseId
	}
	if database.RestorableDroppedDatabaseReference != nil {
		restorableDroppedDatabaseIdARMID, err := resolved.ResolvedReferences.Lookup(*database.RestorableDroppedDatabaseReference)
		if err != nil {
			return nil, err
		}
		restorableDroppedDatabaseId := restorableDroppedDatabaseIdARMID
		result.Properties.RestorableDroppedDatabaseId = &restorableDroppedDatabaseId
	}
	if database.RestorePointInTime != nil {
		restorePointInTime := *database.RestorePointInTime
		result.Properties.RestorePointInTime = &restorePointInTime
	}
	if database.SourceDatabaseReference != nil {
		sourceDatabaseIdARMID, err := resolved.ResolvedReferences.Lookup(*database.SourceDatabaseReference)
		if err != nil {
			return nil, err
		}
		sourceDatabaseId := sourceDatabaseIdARMID
		result.Properties.SourceDatabaseId = &sourceDatabaseId
	}
	if database.StorageContainerSasToken != nil {
		storageContainerSasToken := *database.StorageContainerSasToken
		result.Properties.StorageContainerSasToken = &storageContainerSasToken
	}
	if database.StorageContainerUri != nil {
		storageContainerUri := *database.StorageContainerUri
		result.Properties.StorageContainerUri = &storageContainerUri
	}

	// Set property ‘Tags’:
	if database.Tags != nil {
		result.Tags = make(map[string]string, len(database.Tags))
		for key, value := range database.Tags {
			result.Tags[key] = value
		}
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (database *ManagedInstances_Database_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedInstances_Database_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (database *ManagedInstances_Database_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedInstances_Database_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedInstances_Database_Spec_ARM, got %T", armInput)
	}

	// Set property ‘AutoCompleteRestore’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoCompleteRestore != nil {
			autoCompleteRestore := *typedInput.Properties.AutoCompleteRestore
			database.AutoCompleteRestore = &autoCompleteRestore
		}
	}

	// Set property ‘AzureName’:
	database.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property ‘CatalogCollation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CatalogCollation != nil {
			catalogCollation := *typedInput.Properties.CatalogCollation
			database.CatalogCollation = &catalogCollation
		}
	}

	// Set property ‘Collation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Collation != nil {
			collation := *typedInput.Properties.Collation
			database.Collation = &collation
		}
	}

	// Set property ‘CreateMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreateMode != nil {
			createMode := *typedInput.Properties.CreateMode
			database.CreateMode = &createMode
		}
	}

	// Set property ‘LastBackupName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastBackupName != nil {
			lastBackupName := *typedInput.Properties.LastBackupName
			database.LastBackupName = &lastBackupName
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		database.Location = &location
	}

	// no assignment for property ‘LongTermRetentionBackupResourceReference’

	// Set property ‘Owner’:
	database.Owner = &genruntime.KnownResourceReference{Name: owner.Name}

	// no assignment for property ‘RecoverableDatabaseReference’

	// no assignment for property ‘RestorableDroppedDatabaseReference’

	// Set property ‘RestorePointInTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RestorePointInTime != nil {
			restorePointInTime := *typedInput.Properties.RestorePointInTime
			database.RestorePointInTime = &restorePointInTime
		}
	}

	// no assignment for property ‘SourceDatabaseReference’

	// Set property ‘StorageContainerSasToken’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StorageContainerSasToken != nil {
			storageContainerSasToken := *typedInput.Properties.StorageContainerSasToken
			database.StorageContainerSasToken = &storageContainerSasToken
		}
	}

	// Set property ‘StorageContainerUri’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StorageContainerUri != nil {
			storageContainerUri := *typedInput.Properties.StorageContainerUri
			database.StorageContainerUri = &storageContainerUri
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		database.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			database.Tags[key] = value
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &ManagedInstances_Database_Spec{}

// ConvertSpecFrom populates our ManagedInstances_Database_Spec from the provided source
func (database *ManagedInstances_Database_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20211101s.ManagedInstances_Database_Spec)
	if ok {
		// Populate our instance from source
		return database.AssignProperties_From_ManagedInstances_Database_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20211101s.ManagedInstances_Database_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = database.AssignProperties_From_ManagedInstances_Database_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our ManagedInstances_Database_Spec
func (database *ManagedInstances_Database_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20211101s.ManagedInstances_Database_Spec)
	if ok {
		// Populate destination from our instance
		return database.AssignProperties_To_ManagedInstances_Database_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20211101s.ManagedInstances_Database_Spec{}
	err := database.AssignProperties_To_ManagedInstances_Database_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_ManagedInstances_Database_Spec populates our ManagedInstances_Database_Spec from the provided source ManagedInstances_Database_Spec
func (database *ManagedInstances_Database_Spec) AssignProperties_From_ManagedInstances_Database_Spec(source *v20211101s.ManagedInstances_Database_Spec) error {

	// AutoCompleteRestore
	if source.AutoCompleteRestore != nil {
		autoCompleteRestore := *source.AutoCompleteRestore
		database.AutoCompleteRestore = &autoCompleteRestore
	} else {
		database.AutoCompleteRestore = nil
	}

	// AzureName
	database.AzureName = source.AzureName

	// CatalogCollation
	if source.CatalogCollation != nil {
		catalogCollation := ManagedDatabaseProperties_CatalogCollation(*source.CatalogCollation)
		database.CatalogCollation = &catalogCollation
	} else {
		database.CatalogCollation = nil
	}

	// Collation
	database.Collation = genruntime.ClonePointerToString(source.Collation)

	// CreateMode
	if source.CreateMode != nil {
		createMode := ManagedDatabaseProperties_CreateMode(*source.CreateMode)
		database.CreateMode = &createMode
	} else {
		database.CreateMode = nil
	}

	// LastBackupName
	database.LastBackupName = genruntime.ClonePointerToString(source.LastBackupName)

	// Location
	database.Location = genruntime.ClonePointerToString(source.Location)

	// LongTermRetentionBackupResourceReference
	if source.LongTermRetentionBackupResourceReference != nil {
		longTermRetentionBackupResourceReference := source.LongTermRetentionBackupResourceReference.Copy()
		database.LongTermRetentionBackupResourceReference = &longTermRetentionBackupResourceReference
	} else {
		database.LongTermRetentionBackupResourceReference = nil
	}

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		database.Owner = &owner
	} else {
		database.Owner = nil
	}

	// RecoverableDatabaseReference
	if source.RecoverableDatabaseReference != nil {
		recoverableDatabaseReference := source.RecoverableDatabaseReference.Copy()
		database.RecoverableDatabaseReference = &recoverableDatabaseReference
	} else {
		database.RecoverableDatabaseReference = nil
	}

	// RestorableDroppedDatabaseReference
	if source.RestorableDroppedDatabaseReference != nil {
		restorableDroppedDatabaseReference := source.RestorableDroppedDatabaseReference.Copy()
		database.RestorableDroppedDatabaseReference = &restorableDroppedDatabaseReference
	} else {
		database.RestorableDroppedDatabaseReference = nil
	}

	// RestorePointInTime
	if source.RestorePointInTime != nil {
		restorePointInTime := *source.RestorePointInTime
		database.RestorePointInTime = &restorePointInTime
	} else {
		database.RestorePointInTime = nil
	}

	// SourceDatabaseReference
	if source.SourceDatabaseReference != nil {
		sourceDatabaseReference := source.SourceDatabaseReference.Copy()
		database.SourceDatabaseReference = &sourceDatabaseReference
	} else {
		database.SourceDatabaseReference = nil
	}

	// StorageContainerSasToken
	database.StorageContainerSasToken = genruntime.ClonePointerToString(source.StorageContainerSasToken)

	// StorageContainerUri
	database.StorageContainerUri = genruntime.ClonePointerToString(source.StorageContainerUri)

	// Tags
	database.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// No error
	return nil
}

// AssignProperties_To_ManagedInstances_Database_Spec populates the provided destination ManagedInstances_Database_Spec from our ManagedInstances_Database_Spec
func (database *ManagedInstances_Database_Spec) AssignProperties_To_ManagedInstances_Database_Spec(destination *v20211101s.ManagedInstances_Database_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoCompleteRestore
	if database.AutoCompleteRestore != nil {
		autoCompleteRestore := *database.AutoCompleteRestore
		destination.AutoCompleteRestore = &autoCompleteRestore
	} else {
		destination.AutoCompleteRestore = nil
	}

	// AzureName
	destination.AzureName = database.AzureName

	// CatalogCollation
	if database.CatalogCollation != nil {
		catalogCollation := string(*database.CatalogCollation)
		destination.CatalogCollation = &catalogCollation
	} else {
		destination.CatalogCollation = nil
	}

	// Collation
	destination.Collation = genruntime.ClonePointerToString(database.Collation)

	// CreateMode
	if database.CreateMode != nil {
		createMode := string(*database.CreateMode)
		destination.CreateMode = &createMode
	} else {
		destination.CreateMode = nil
	}

	// LastBackupName
	destination.LastBackupName = genruntime.ClonePointerToString(database.LastBackupName)

	// Location
	destination.Location = genruntime.ClonePointerToString(database.Location)

	// LongTermRetentionBackupResourceReference
	if database.LongTermRetentionBackupResourceReference != nil {
		longTermRetentionBackupResourceReference := database.LongTermRetentionBackupResourceReference.Copy()
		destination.LongTermRetentionBackupResourceReference = &longTermRetentionBackupResourceReference
	} else {
		destination.LongTermRetentionBackupResourceReference = nil
	}

	// OriginalVersion
	destination.OriginalVersion = database.OriginalVersion()

	// Owner
	if database.Owner != nil {
		owner := database.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// RecoverableDatabaseReference
	if database.RecoverableDatabaseReference != nil {
		recoverableDatabaseReference := database.RecoverableDatabaseReference.Copy()
		destination.RecoverableDatabaseReference = &recoverableDatabaseReference
	} else {
		destination.RecoverableDatabaseReference = nil
	}

	// RestorableDroppedDatabaseReference
	if database.RestorableDroppedDatabaseReference != nil {
		restorableDroppedDatabaseReference := database.RestorableDroppedDatabaseReference.Copy()
		destination.RestorableDroppedDatabaseReference = &restorableDroppedDatabaseReference
	} else {
		destination.RestorableDroppedDatabaseReference = nil
	}

	// RestorePointInTime
	if database.RestorePointInTime != nil {
		restorePointInTime := *database.RestorePointInTime
		destination.RestorePointInTime = &restorePointInTime
	} else {
		destination.RestorePointInTime = nil
	}

	// SourceDatabaseReference
	if database.SourceDatabaseReference != nil {
		sourceDatabaseReference := database.SourceDatabaseReference.Copy()
		destination.SourceDatabaseReference = &sourceDatabaseReference
	} else {
		destination.SourceDatabaseReference = nil
	}

	// StorageContainerSasToken
	destination.StorageContainerSasToken = genruntime.ClonePointerToString(database.StorageContainerSasToken)

	// StorageContainerUri
	destination.StorageContainerUri = genruntime.ClonePointerToString(database.StorageContainerUri)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(database.Tags)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (database *ManagedInstances_Database_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (database *ManagedInstances_Database_Spec) SetAzureName(azureName string) {
	database.AzureName = azureName
}

type ManagedInstances_Database_STATUS struct {
	// AutoCompleteRestore: Whether to auto complete restore of this managed database.
	AutoCompleteRestore *bool `json:"autoCompleteRestore,omitempty"`

	// CatalogCollation: Collation of the metadata catalog.
	CatalogCollation *ManagedDatabaseProperties_CatalogCollation_STATUS `json:"catalogCollation,omitempty"`

	// Collation: Collation of the managed database.
	Collation *string `json:"collation,omitempty"`

	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// CreateMode: Managed database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of
	// an existing database. SourceDatabaseName, SourceManagedInstanceName and PointInTime must be specified.
	// RestoreExternalBackup: Create a database by restoring from external backup files. Collation, StorageContainerUri and
	// StorageContainerSasToken must be specified. Recovery: Creates a database by restoring a geo-replicated backup.
	// RecoverableDatabaseId must be specified as the recoverable database resource ID to restore.
	// RestoreLongTermRetentionBackup: Create a database by restoring from a long term retention backup
	// (longTermRetentionBackupResourceId required).
	CreateMode *ManagedDatabaseProperties_CreateMode_STATUS `json:"createMode,omitempty"`

	// CreationDate: Creation date of the database.
	CreationDate *string `json:"creationDate,omitempty"`

	// DefaultSecondaryLocation: Geo paired region.
	DefaultSecondaryLocation *string `json:"defaultSecondaryLocation,omitempty"`

	// EarliestRestorePoint: Earliest restore point in time for point in time restore.
	EarliestRestorePoint *string `json:"earliestRestorePoint,omitempty"`

	// FailoverGroupId: Instance Failover Group resource identifier that this managed database belongs to.
	FailoverGroupId *string `json:"failoverGroupId,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// LastBackupName: Last backup file name for restore of this managed database.
	LastBackupName *string `json:"lastBackupName,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// LongTermRetentionBackupResourceId: The name of the Long Term Retention backup to be used for restore of this managed
	// database.
	LongTermRetentionBackupResourceId *string `json:"longTermRetentionBackupResourceId,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// RecoverableDatabaseId: The resource identifier of the recoverable database associated with create operation of this
	// database.
	RecoverableDatabaseId *string `json:"recoverableDatabaseId,omitempty"`

	// RestorableDroppedDatabaseId: The restorable dropped database resource id to restore when creating this database.
	RestorableDroppedDatabaseId *string `json:"restorableDroppedDatabaseId,omitempty"`

	// RestorePointInTime: Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point in
	// time (ISO8601 format) of the source database that will be restored to create the new database.
	RestorePointInTime *string `json:"restorePointInTime,omitempty"`

	// SourceDatabaseId: The resource identifier of the source database associated with create operation of this database.
	SourceDatabaseId *string `json:"sourceDatabaseId,omitempty"`

	// Status: Status of the database.
	Status *ManagedDatabaseProperties_Status_STATUS `json:"status,omitempty"`

	// StorageContainerSasToken: Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the
	// storage container sas token.
	StorageContainerSasToken *string `json:"storageContainerSasToken,omitempty"`

	// StorageContainerUri: Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the uri of
	// the storage container where backups for this restore are stored.
	StorageContainerUri *string `json:"storageContainerUri,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &ManagedInstances_Database_STATUS{}

// ConvertStatusFrom populates our ManagedInstances_Database_STATUS from the provided source
func (database *ManagedInstances_Database_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20211101s.ManagedInstances_Database_STATUS)
	if ok {
		// Populate our instance from source
		return database.AssignProperties_From_ManagedInstances_Database_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20211101s.ManagedInstances_Database_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = database.AssignProperties_From_ManagedInstances_Database_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our ManagedInstances_Database_STATUS
func (database *ManagedInstances_Database_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20211101s.ManagedInstances_Database_STATUS)
	if ok {
		// Populate destination from our instance
		return database.AssignProperties_To_ManagedInstances_Database_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20211101s.ManagedInstances_Database_STATUS{}
	err := database.AssignProperties_To_ManagedInstances_Database_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &ManagedInstances_Database_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (database *ManagedInstances_Database_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &ManagedInstances_Database_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (database *ManagedInstances_Database_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(ManagedInstances_Database_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected ManagedInstances_Database_STATUS_ARM, got %T", armInput)
	}

	// Set property ‘AutoCompleteRestore’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.AutoCompleteRestore != nil {
			autoCompleteRestore := *typedInput.Properties.AutoCompleteRestore
			database.AutoCompleteRestore = &autoCompleteRestore
		}
	}

	// Set property ‘CatalogCollation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CatalogCollation != nil {
			catalogCollation := *typedInput.Properties.CatalogCollation
			database.CatalogCollation = &catalogCollation
		}
	}

	// Set property ‘Collation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Collation != nil {
			collation := *typedInput.Properties.Collation
			database.Collation = &collation
		}
	}

	// no assignment for property ‘Conditions’

	// Set property ‘CreateMode’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreateMode != nil {
			createMode := *typedInput.Properties.CreateMode
			database.CreateMode = &createMode
		}
	}

	// Set property ‘CreationDate’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.CreationDate != nil {
			creationDate := *typedInput.Properties.CreationDate
			database.CreationDate = &creationDate
		}
	}

	// Set property ‘DefaultSecondaryLocation’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.DefaultSecondaryLocation != nil {
			defaultSecondaryLocation := *typedInput.Properties.DefaultSecondaryLocation
			database.DefaultSecondaryLocation = &defaultSecondaryLocation
		}
	}

	// Set property ‘EarliestRestorePoint’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.EarliestRestorePoint != nil {
			earliestRestorePoint := *typedInput.Properties.EarliestRestorePoint
			database.EarliestRestorePoint = &earliestRestorePoint
		}
	}

	// Set property ‘FailoverGroupId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.FailoverGroupId != nil {
			failoverGroupId := *typedInput.Properties.FailoverGroupId
			database.FailoverGroupId = &failoverGroupId
		}
	}

	// Set property ‘Id’:
	if typedInput.Id != nil {
		id := *typedInput.Id
		database.Id = &id
	}

	// Set property ‘LastBackupName’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LastBackupName != nil {
			lastBackupName := *typedInput.Properties.LastBackupName
			database.LastBackupName = &lastBackupName
		}
	}

	// Set property ‘Location’:
	if typedInput.Location != nil {
		location := *typedInput.Location
		database.Location = &location
	}

	// Set property ‘LongTermRetentionBackupResourceId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.LongTermRetentionBackupResourceId != nil {
			longTermRetentionBackupResourceId := *typedInput.Properties.LongTermRetentionBackupResourceId
			database.LongTermRetentionBackupResourceId = &longTermRetentionBackupResourceId
		}
	}

	// Set property ‘Name’:
	if typedInput.Name != nil {
		name := *typedInput.Name
		database.Name = &name
	}

	// Set property ‘RecoverableDatabaseId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RecoverableDatabaseId != nil {
			recoverableDatabaseId := *typedInput.Properties.RecoverableDatabaseId
			database.RecoverableDatabaseId = &recoverableDatabaseId
		}
	}

	// Set property ‘RestorableDroppedDatabaseId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RestorableDroppedDatabaseId != nil {
			restorableDroppedDatabaseId := *typedInput.Properties.RestorableDroppedDatabaseId
			database.RestorableDroppedDatabaseId = &restorableDroppedDatabaseId
		}
	}

	// Set property ‘RestorePointInTime’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.RestorePointInTime != nil {
			restorePointInTime := *typedInput.Properties.RestorePointInTime
			database.RestorePointInTime = &restorePointInTime
		}
	}

	// Set property ‘SourceDatabaseId’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.SourceDatabaseId != nil {
			sourceDatabaseId := *typedInput.Properties.SourceDatabaseId
			database.SourceDatabaseId = &sourceDatabaseId
		}
	}

	// Set property ‘Status’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.Status != nil {
			status := *typedInput.Properties.Status
			database.Status = &status
		}
	}

	// Set property ‘StorageContainerSasToken’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StorageContainerSasToken != nil {
			storageContainerSasToken := *typedInput.Properties.StorageContainerSasToken
			database.StorageContainerSasToken = &storageContainerSasToken
		}
	}

	// Set property ‘StorageContainerUri’:
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.StorageContainerUri != nil {
			storageContainerUri := *typedInput.Properties.StorageContainerUri
			database.StorageContainerUri = &storageContainerUri
		}
	}

	// Set property ‘Tags’:
	if typedInput.Tags != nil {
		database.Tags = make(map[string]string, len(typedInput.Tags))
		for key, value := range typedInput.Tags {
			database.Tags[key] = value
		}
	}

	// Set property ‘Type’:
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		database.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_ManagedInstances_Database_STATUS populates our ManagedInstances_Database_STATUS from the provided source ManagedInstances_Database_STATUS
func (database *ManagedInstances_Database_STATUS) AssignProperties_From_ManagedInstances_Database_STATUS(source *v20211101s.ManagedInstances_Database_STATUS) error {

	// AutoCompleteRestore
	if source.AutoCompleteRestore != nil {
		autoCompleteRestore := *source.AutoCompleteRestore
		database.AutoCompleteRestore = &autoCompleteRestore
	} else {
		database.AutoCompleteRestore = nil
	}

	// CatalogCollation
	if source.CatalogCollation != nil {
		catalogCollation := ManagedDatabaseProperties_CatalogCollation_STATUS(*source.CatalogCollation)
		database.CatalogCollation = &catalogCollation
	} else {
		database.CatalogCollation = nil
	}

	// Collation
	database.Collation = genruntime.ClonePointerToString(source.Collation)

	// Conditions
	database.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// CreateMode
	if source.CreateMode != nil {
		createMode := ManagedDatabaseProperties_CreateMode_STATUS(*source.CreateMode)
		database.CreateMode = &createMode
	} else {
		database.CreateMode = nil
	}

	// CreationDate
	database.CreationDate = genruntime.ClonePointerToString(source.CreationDate)

	// DefaultSecondaryLocation
	database.DefaultSecondaryLocation = genruntime.ClonePointerToString(source.DefaultSecondaryLocation)

	// EarliestRestorePoint
	database.EarliestRestorePoint = genruntime.ClonePointerToString(source.EarliestRestorePoint)

	// FailoverGroupId
	database.FailoverGroupId = genruntime.ClonePointerToString(source.FailoverGroupId)

	// Id
	database.Id = genruntime.ClonePointerToString(source.Id)

	// LastBackupName
	database.LastBackupName = genruntime.ClonePointerToString(source.LastBackupName)

	// Location
	database.Location = genruntime.ClonePointerToString(source.Location)

	// LongTermRetentionBackupResourceId
	database.LongTermRetentionBackupResourceId = genruntime.ClonePointerToString(source.LongTermRetentionBackupResourceId)

	// Name
	database.Name = genruntime.ClonePointerToString(source.Name)

	// RecoverableDatabaseId
	database.RecoverableDatabaseId = genruntime.ClonePointerToString(source.RecoverableDatabaseId)

	// RestorableDroppedDatabaseId
	database.RestorableDroppedDatabaseId = genruntime.ClonePointerToString(source.RestorableDroppedDatabaseId)

	// RestorePointInTime
	database.RestorePointInTime = genruntime.ClonePointerToString(source.RestorePointInTime)

	// SourceDatabaseId
	database.SourceDatabaseId = genruntime.ClonePointerToString(source.SourceDatabaseId)

	// Status
	if source.Status != nil {
		status := ManagedDatabaseProperties_Status_STATUS(*source.Status)
		database.Status = &status
	} else {
		database.Status = nil
	}

	// StorageContainerSasToken
	database.StorageContainerSasToken = genruntime.ClonePointerToString(source.StorageContainerSasToken)

	// StorageContainerUri
	database.StorageContainerUri = genruntime.ClonePointerToString(source.StorageContainerUri)

	// Tags
	database.Tags = genruntime.CloneMapOfStringToString(source.Tags)

	// Type
	database.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_ManagedInstances_Database_STATUS populates the provided destination ManagedInstances_Database_STATUS from our ManagedInstances_Database_STATUS
func (database *ManagedInstances_Database_STATUS) AssignProperties_To_ManagedInstances_Database_STATUS(destination *v20211101s.ManagedInstances_Database_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AutoCompleteRestore
	if database.AutoCompleteRestore != nil {
		autoCompleteRestore := *database.AutoCompleteRestore
		destination.AutoCompleteRestore = &autoCompleteRestore
	} else {
		destination.AutoCompleteRestore = nil
	}

	// CatalogCollation
	if database.CatalogCollation != nil {
		catalogCollation := string(*database.CatalogCollation)
		destination.CatalogCollation = &catalogCollation
	} else {
		destination.CatalogCollation = nil
	}

	// Collation
	destination.Collation = genruntime.ClonePointerToString(database.Collation)

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(database.Conditions)

	// CreateMode
	if database.CreateMode != nil {
		createMode := string(*database.CreateMode)
		destination.CreateMode = &createMode
	} else {
		destination.CreateMode = nil
	}

	// CreationDate
	destination.CreationDate = genruntime.ClonePointerToString(database.CreationDate)

	// DefaultSecondaryLocation
	destination.DefaultSecondaryLocation = genruntime.ClonePointerToString(database.DefaultSecondaryLocation)

	// EarliestRestorePoint
	destination.EarliestRestorePoint = genruntime.ClonePointerToString(database.EarliestRestorePoint)

	// FailoverGroupId
	destination.FailoverGroupId = genruntime.ClonePointerToString(database.FailoverGroupId)

	// Id
	destination.Id = genruntime.ClonePointerToString(database.Id)

	// LastBackupName
	destination.LastBackupName = genruntime.ClonePointerToString(database.LastBackupName)

	// Location
	destination.Location = genruntime.ClonePointerToString(database.Location)

	// LongTermRetentionBackupResourceId
	destination.LongTermRetentionBackupResourceId = genruntime.ClonePointerToString(database.LongTermRetentionBackupResourceId)

	// Name
	destination.Name = genruntime.ClonePointerToString(database.Name)

	// RecoverableDatabaseId
	destination.RecoverableDatabaseId = genruntime.ClonePointerToString(database.RecoverableDatabaseId)

	// RestorableDroppedDatabaseId
	destination.RestorableDroppedDatabaseId = genruntime.ClonePointerToString(database.RestorableDroppedDatabaseId)

	// RestorePointInTime
	destination.RestorePointInTime = genruntime.ClonePointerToString(database.RestorePointInTime)

	// SourceDatabaseId
	destination.SourceDatabaseId = genruntime.ClonePointerToString(database.SourceDatabaseId)

	// Status
	if database.Status != nil {
		status := string(*database.Status)
		destination.Status = &status
	} else {
		destination.Status = nil
	}

	// StorageContainerSasToken
	destination.StorageContainerSasToken = genruntime.ClonePointerToString(database.StorageContainerSasToken)

	// StorageContainerUri
	destination.StorageContainerUri = genruntime.ClonePointerToString(database.StorageContainerUri)

	// Tags
	destination.Tags = genruntime.CloneMapOfStringToString(database.Tags)

	// Type
	destination.Type = genruntime.ClonePointerToString(database.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// +kubebuilder:validation:Enum={"DATABASE_DEFAULT","SQL_Latin1_General_CP1_CI_AS"}
type ManagedDatabaseProperties_CatalogCollation string

const (
	ManagedDatabaseProperties_CatalogCollation_DATABASE_DEFAULT             = ManagedDatabaseProperties_CatalogCollation("DATABASE_DEFAULT")
	ManagedDatabaseProperties_CatalogCollation_SQL_Latin1_General_CP1_CI_AS = ManagedDatabaseProperties_CatalogCollation("SQL_Latin1_General_CP1_CI_AS")
)

type ManagedDatabaseProperties_CatalogCollation_STATUS string

const (
	ManagedDatabaseProperties_CatalogCollation_STATUS_DATABASE_DEFAULT             = ManagedDatabaseProperties_CatalogCollation_STATUS("DATABASE_DEFAULT")
	ManagedDatabaseProperties_CatalogCollation_STATUS_SQL_Latin1_General_CP1_CI_AS = ManagedDatabaseProperties_CatalogCollation_STATUS("SQL_Latin1_General_CP1_CI_AS")
)

// +kubebuilder:validation:Enum={"Default","PointInTimeRestore","Recovery","RestoreExternalBackup","RestoreLongTermRetentionBackup"}
type ManagedDatabaseProperties_CreateMode string

const (
	ManagedDatabaseProperties_CreateMode_Default                        = ManagedDatabaseProperties_CreateMode("Default")
	ManagedDatabaseProperties_CreateMode_PointInTimeRestore             = ManagedDatabaseProperties_CreateMode("PointInTimeRestore")
	ManagedDatabaseProperties_CreateMode_Recovery                       = ManagedDatabaseProperties_CreateMode("Recovery")
	ManagedDatabaseProperties_CreateMode_RestoreExternalBackup          = ManagedDatabaseProperties_CreateMode("RestoreExternalBackup")
	ManagedDatabaseProperties_CreateMode_RestoreLongTermRetentionBackup = ManagedDatabaseProperties_CreateMode("RestoreLongTermRetentionBackup")
)

type ManagedDatabaseProperties_CreateMode_STATUS string

const (
	ManagedDatabaseProperties_CreateMode_STATUS_Default                        = ManagedDatabaseProperties_CreateMode_STATUS("Default")
	ManagedDatabaseProperties_CreateMode_STATUS_PointInTimeRestore             = ManagedDatabaseProperties_CreateMode_STATUS("PointInTimeRestore")
	ManagedDatabaseProperties_CreateMode_STATUS_Recovery                       = ManagedDatabaseProperties_CreateMode_STATUS("Recovery")
	ManagedDatabaseProperties_CreateMode_STATUS_RestoreExternalBackup          = ManagedDatabaseProperties_CreateMode_STATUS("RestoreExternalBackup")
	ManagedDatabaseProperties_CreateMode_STATUS_RestoreLongTermRetentionBackup = ManagedDatabaseProperties_CreateMode_STATUS("RestoreLongTermRetentionBackup")
)

type ManagedDatabaseProperties_Status_STATUS string

const (
	ManagedDatabaseProperties_Status_STATUS_Creating     = ManagedDatabaseProperties_Status_STATUS("Creating")
	ManagedDatabaseProperties_Status_STATUS_Inaccessible = ManagedDatabaseProperties_Status_STATUS("Inaccessible")
	ManagedDatabaseProperties_Status_STATUS_Offline      = ManagedDatabaseProperties_Status_STATUS("Offline")
	ManagedDatabaseProperties_Status_STATUS_Online       = ManagedDatabaseProperties_Status_STATUS("Online")
	ManagedDatabaseProperties_Status_STATUS_Restoring    = ManagedDatabaseProperties_Status_STATUS("Restoring")
	ManagedDatabaseProperties_Status_STATUS_Shutdown     = ManagedDatabaseProperties_Status_STATUS("Shutdown")
	ManagedDatabaseProperties_Status_STATUS_Updating     = ManagedDatabaseProperties_Status_STATUS("Updating")
)

func init() {
	SchemeBuilder.Register(&ManagedInstances_Database{}, &ManagedInstances_DatabaseList{})
}
