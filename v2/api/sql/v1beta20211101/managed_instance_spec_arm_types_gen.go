// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type ManagedInstance_Spec_ARM struct {
	// Identity: The Azure Active Directory identity of the managed instance.
	Identity *ResourceIdentity_ARM `json:"identity,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: Resource properties.
	Properties *ManagedInstanceProperties_ARM `json:"properties,omitempty"`

	// Sku: Managed instance SKU. Allowed values for sku.name: GP_Gen5, GP_G8IM, GP_G8IH, BC_Gen5, BC_G8IM, BC_G8IH
	Sku *Sku_ARM `json:"sku,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &ManagedInstance_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (instance ManagedInstance_Spec_ARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (instance *ManagedInstance_Spec_ARM) GetName() string {
	return instance.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Sql/managedInstances"
func (instance *ManagedInstance_Spec_ARM) GetType() string {
	return "Microsoft.Sql/managedInstances"
}

// The properties of a managed instance.
type ManagedInstanceProperties_ARM struct {
	// AdministratorLogin: Administrator username for the managed instance. Can only be specified when the managed instance is
	// being created (and is required for creation).
	AdministratorLogin *string `json:"administratorLogin,omitempty"`

	// AdministratorLoginPassword: The administrator login password (required for managed instance creation).
	AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`

	// Administrators: The Azure Active Directory administrator of the server.
	Administrators *ManagedInstanceExternalAdministrator_ARM `json:"administrators,omitempty"`

	// Collation: Collation of the managed instance.
	Collation      *string `json:"collation,omitempty"`
	DnsZonePartner *string `json:"dnsZonePartner,omitempty"`

	// InstancePoolId: The Id of the instance pool this managed server belongs to.
	InstancePoolId *string `json:"instancePoolId,omitempty"`

	// KeyId: A CMK URI of the key to use for encryption.
	KeyId *string `json:"keyId,omitempty"`

	// LicenseType: The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a new SQL license) and
	// 'BasePrice' (discounted AHB price for bringing your own SQL licenses).
	LicenseType *ManagedInstanceProperties_LicenseType `json:"licenseType,omitempty"`

	// MaintenanceConfigurationId: Specifies maintenance configuration id to apply to this managed instance.
	MaintenanceConfigurationId *string `json:"maintenanceConfigurationId,omitempty"`

	// ManagedInstanceCreateMode: Specifies the mode of database creation.
	// Default: Regular instance creation.
	// Restore: Creates an instance by restoring a set of backups to specific point in time. RestorePointInTime and
	// SourceManagedInstanceId must be specified.
	ManagedInstanceCreateMode *ManagedInstanceProperties_ManagedInstanceCreateMode `json:"managedInstanceCreateMode,omitempty"`

	// MinimalTlsVersion: Minimal TLS version. Allowed values: 'None', '1.0', '1.1', '1.2'
	MinimalTlsVersion             *string `json:"minimalTlsVersion,omitempty"`
	PrimaryUserAssignedIdentityId *string `json:"primaryUserAssignedIdentityId,omitempty"`

	// ProxyOverride: Connection type used for connecting to the instance.
	ProxyOverride *ManagedInstanceProperties_ProxyOverride `json:"proxyOverride,omitempty"`

	// PublicDataEndpointEnabled: Whether or not the public data endpoint is enabled.
	PublicDataEndpointEnabled *bool `json:"publicDataEndpointEnabled,omitempty"`

	// RequestedBackupStorageRedundancy: The storage account type to be used to store backups for this instance. The options
	// are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage), Geo (GeoRedundantStorage) and
	// GeoZone(GeoZoneRedundantStorage)
	RequestedBackupStorageRedundancy *ManagedInstanceProperties_RequestedBackupStorageRedundancy `json:"requestedBackupStorageRedundancy,omitempty"`

	// RestorePointInTime: Specifies the point in time (ISO8601 format) of the source database that will be restored to create
	// the new database.
	RestorePointInTime *string `json:"restorePointInTime,omitempty"`

	// ServicePrincipal: The managed instance's service principal.
	ServicePrincipal        *ServicePrincipal_ARM `json:"servicePrincipal,omitempty"`
	SourceManagedInstanceId *string               `json:"sourceManagedInstanceId,omitempty"`

	// StorageSizeInGB: Storage size in GB. Minimum value: 32. Maximum value: 16384. Increments of 32 GB allowed only. Maximum
	// value depends on the selected hardware family and number of vCores.
	StorageSizeInGB *int    `json:"storageSizeInGB,omitempty"`
	SubnetId        *string `json:"subnetId,omitempty"`

	// TimezoneId: Id of the timezone. Allowed values are timezones supported by Windows.
	// Windows keeps details on supported timezones, including the id, in registry under
	// KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones.
	// You can get those registry values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info.
	// List of Ids can also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
	// An example of valid timezone id is "Pacific Standard Time" or "W. Europe Standard Time".
	TimezoneId *string `json:"timezoneId,omitempty"`

	// VCores: The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.
	VCores *int `json:"vCores,omitempty"`

	// ZoneRedundant: Whether or not the multi-az is enabled.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`
}

// Azure Active Directory identity configuration for a resource.
type ResourceIdentity_ARM struct {
	// Type: The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active
	// Directory principal for the resource.
	Type *ResourceIdentity_Type `json:"type,omitempty"`
}

// An ARM Resource SKU.
type Sku_ARM struct {
	// Capacity: Capacity of the particular SKU.
	Capacity *int `json:"capacity,omitempty"`

	// Family: If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `json:"family,omitempty"`

	// Name: The name of the SKU, typically, a letter + Number code, e.g. P3.
	Name *string `json:"name,omitempty"`

	// Size: Size of the particular SKU
	Size *string `json:"size,omitempty"`

	// Tier: The tier or edition of the particular SKU, e.g. Basic, Premium.
	Tier *string `json:"tier,omitempty"`
}

// Properties of a active directory administrator.
type ManagedInstanceExternalAdministrator_ARM struct {
	// AdministratorType: Type of the sever administrator.
	AdministratorType *ManagedInstanceExternalAdministrator_AdministratorType `json:"administratorType,omitempty"`

	// AzureADOnlyAuthentication: Azure Active Directory only Authentication enabled.
	AzureADOnlyAuthentication *bool `json:"azureADOnlyAuthentication,omitempty"`

	// Login: Login name of the server administrator.
	Login *string `json:"login,omitempty"`

	// PrincipalType: Principal Type of the sever administrator.
	PrincipalType *ManagedInstanceExternalAdministrator_PrincipalType `json:"principalType,omitempty"`

	// Sid: SID (object ID) of the server administrator.
	Sid *string `json:"sid,omitempty"`

	// TenantId: Tenant ID of the administrator.
	TenantId *string `json:"tenantId,omitempty"`
}

// +kubebuilder:validation:Enum={"None","SystemAssigned","SystemAssigned,UserAssigned","UserAssigned"}
type ResourceIdentity_Type string

const (
	ResourceIdentity_Type_None                       = ResourceIdentity_Type("None")
	ResourceIdentity_Type_SystemAssigned             = ResourceIdentity_Type("SystemAssigned")
	ResourceIdentity_Type_SystemAssignedUserAssigned = ResourceIdentity_Type("SystemAssigned,UserAssigned")
	ResourceIdentity_Type_UserAssigned               = ResourceIdentity_Type("UserAssigned")
)

// The managed instance's service principal configuration for a resource.
type ServicePrincipal_ARM struct {
	// Type: Service principal type.
	Type *ServicePrincipal_Type `json:"type,omitempty"`
}
