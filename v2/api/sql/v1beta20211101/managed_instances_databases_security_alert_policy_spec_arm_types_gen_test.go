// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM, ManagedInstances_Databases_SecurityAlertPolicy_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM runs a test to see if a specific instance of ManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM(subject ManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM instances for property testing - lazily
// instantiated by ManagedInstances_Databases_SecurityAlertPolicy_Spec_ARMGenerator()
var managedInstances_Databases_SecurityAlertPolicy_Spec_ARMGenerator gopter.Gen

// ManagedInstances_Databases_SecurityAlertPolicy_Spec_ARMGenerator returns a generator of ManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM instances for property testing.
// We first initialize managedInstances_Databases_SecurityAlertPolicy_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ManagedInstances_Databases_SecurityAlertPolicy_Spec_ARMGenerator() gopter.Gen {
	if managedInstances_Databases_SecurityAlertPolicy_Spec_ARMGenerator != nil {
		return managedInstances_Databases_SecurityAlertPolicy_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM(generators)
	managedInstances_Databases_SecurityAlertPolicy_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM(generators)
	managedInstances_Databases_SecurityAlertPolicy_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM{}), generators)

	return managedInstances_Databases_SecurityAlertPolicy_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SecurityAlertPolicyProperties_ARMGenerator())
}

func Test_SecurityAlertPolicyProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SecurityAlertPolicyProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSecurityAlertPolicyProperties_ARM, SecurityAlertPolicyProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSecurityAlertPolicyProperties_ARM runs a test to see if a specific instance of SecurityAlertPolicyProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSecurityAlertPolicyProperties_ARM(subject SecurityAlertPolicyProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SecurityAlertPolicyProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SecurityAlertPolicyProperties_ARM instances for property testing - lazily instantiated by
// SecurityAlertPolicyProperties_ARMGenerator()
var securityAlertPolicyProperties_ARMGenerator gopter.Gen

// SecurityAlertPolicyProperties_ARMGenerator returns a generator of SecurityAlertPolicyProperties_ARM instances for property testing.
func SecurityAlertPolicyProperties_ARMGenerator() gopter.Gen {
	if securityAlertPolicyProperties_ARMGenerator != nil {
		return securityAlertPolicyProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSecurityAlertPolicyProperties_ARM(generators)
	securityAlertPolicyProperties_ARMGenerator = gen.Struct(reflect.TypeOf(SecurityAlertPolicyProperties_ARM{}), generators)

	return securityAlertPolicyProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSecurityAlertPolicyProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSecurityAlertPolicyProperties_ARM(gens map[string]gopter.Gen) {
	gens["DisabledAlerts"] = gen.SliceOf(gen.AlphaString())
	gens["EmailAccountAdmins"] = gen.PtrOf(gen.Bool())
	gens["EmailAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["RetentionDays"] = gen.PtrOf(gen.Int())
	gens["State"] = gen.PtrOf(gen.OneConstOf(SecurityAlertPolicyProperties_State_Disabled, SecurityAlertPolicyProperties_State_Enabled, SecurityAlertPolicyProperties_State_New))
	gens["StorageAccountAccessKey"] = gen.PtrOf(gen.AlphaString())
	gens["StorageEndpoint"] = gen.PtrOf(gen.AlphaString())
}
