// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Servers_Databases_SyncGroup_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_Databases_SyncGroup_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_Databases_SyncGroup_Spec_ARM, Servers_Databases_SyncGroup_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_Databases_SyncGroup_Spec_ARM runs a test to see if a specific instance of Servers_Databases_SyncGroup_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_Databases_SyncGroup_Spec_ARM(subject Servers_Databases_SyncGroup_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_Databases_SyncGroup_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_Databases_SyncGroup_Spec_ARM instances for property testing - lazily instantiated by
// Servers_Databases_SyncGroup_Spec_ARMGenerator()
var servers_Databases_SyncGroup_Spec_ARMGenerator gopter.Gen

// Servers_Databases_SyncGroup_Spec_ARMGenerator returns a generator of Servers_Databases_SyncGroup_Spec_ARM instances for property testing.
// We first initialize servers_Databases_SyncGroup_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_Databases_SyncGroup_Spec_ARMGenerator() gopter.Gen {
	if servers_Databases_SyncGroup_Spec_ARMGenerator != nil {
		return servers_Databases_SyncGroup_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_SyncGroup_Spec_ARM(generators)
	servers_Databases_SyncGroup_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_SyncGroup_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_SyncGroup_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForServers_Databases_SyncGroup_Spec_ARM(generators)
	servers_Databases_SyncGroup_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_SyncGroup_Spec_ARM{}), generators)

	return servers_Databases_SyncGroup_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForServers_Databases_SyncGroup_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_Databases_SyncGroup_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForServers_Databases_SyncGroup_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_Databases_SyncGroup_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(SyncGroupProperties_ARMGenerator())
	gens["Sku"] = gen.PtrOf(Sku_ARMGenerator())
}

func Test_SyncGroupProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SyncGroupProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSyncGroupProperties_ARM, SyncGroupProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSyncGroupProperties_ARM runs a test to see if a specific instance of SyncGroupProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSyncGroupProperties_ARM(subject SyncGroupProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SyncGroupProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SyncGroupProperties_ARM instances for property testing - lazily instantiated by
// SyncGroupProperties_ARMGenerator()
var syncGroupProperties_ARMGenerator gopter.Gen

// SyncGroupProperties_ARMGenerator returns a generator of SyncGroupProperties_ARM instances for property testing.
// We first initialize syncGroupProperties_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SyncGroupProperties_ARMGenerator() gopter.Gen {
	if syncGroupProperties_ARMGenerator != nil {
		return syncGroupProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupProperties_ARM(generators)
	syncGroupProperties_ARMGenerator = gen.Struct(reflect.TypeOf(SyncGroupProperties_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupProperties_ARM(generators)
	AddRelatedPropertyGeneratorsForSyncGroupProperties_ARM(generators)
	syncGroupProperties_ARMGenerator = gen.Struct(reflect.TypeOf(SyncGroupProperties_ARM{}), generators)

	return syncGroupProperties_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSyncGroupProperties_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSyncGroupProperties_ARM(gens map[string]gopter.Gen) {
	gens["ConflictLoggingRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["ConflictResolutionPolicy"] = gen.PtrOf(gen.OneConstOf(SyncGroupProperties_ConflictResolutionPolicy_HubWin, SyncGroupProperties_ConflictResolutionPolicy_MemberWin))
	gens["EnableConflictLogging"] = gen.PtrOf(gen.Bool())
	gens["HubDatabasePassword"] = gen.PtrOf(gen.AlphaString())
	gens["HubDatabaseUserName"] = gen.PtrOf(gen.AlphaString())
	gens["Interval"] = gen.PtrOf(gen.Int())
	gens["SyncDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["UsePrivateLinkConnection"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForSyncGroupProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSyncGroupProperties_ARM(gens map[string]gopter.Gen) {
	gens["Schema"] = gen.PtrOf(SyncGroupSchema_ARMGenerator())
}

func Test_SyncGroupSchema_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SyncGroupSchema_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSyncGroupSchema_ARM, SyncGroupSchema_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSyncGroupSchema_ARM runs a test to see if a specific instance of SyncGroupSchema_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSyncGroupSchema_ARM(subject SyncGroupSchema_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SyncGroupSchema_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SyncGroupSchema_ARM instances for property testing - lazily instantiated by
// SyncGroupSchema_ARMGenerator()
var syncGroupSchema_ARMGenerator gopter.Gen

// SyncGroupSchema_ARMGenerator returns a generator of SyncGroupSchema_ARM instances for property testing.
// We first initialize syncGroupSchema_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SyncGroupSchema_ARMGenerator() gopter.Gen {
	if syncGroupSchema_ARMGenerator != nil {
		return syncGroupSchema_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchema_ARM(generators)
	syncGroupSchema_ARMGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchema_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchema_ARM(generators)
	AddRelatedPropertyGeneratorsForSyncGroupSchema_ARM(generators)
	syncGroupSchema_ARMGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchema_ARM{}), generators)

	return syncGroupSchema_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSyncGroupSchema_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSyncGroupSchema_ARM(gens map[string]gopter.Gen) {
	gens["MasterSyncMemberName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSyncGroupSchema_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSyncGroupSchema_ARM(gens map[string]gopter.Gen) {
	gens["Tables"] = gen.SliceOf(SyncGroupSchemaTable_ARMGenerator())
}

func Test_SyncGroupSchemaTable_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SyncGroupSchemaTable_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSyncGroupSchemaTable_ARM, SyncGroupSchemaTable_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSyncGroupSchemaTable_ARM runs a test to see if a specific instance of SyncGroupSchemaTable_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSyncGroupSchemaTable_ARM(subject SyncGroupSchemaTable_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SyncGroupSchemaTable_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SyncGroupSchemaTable_ARM instances for property testing - lazily instantiated by
// SyncGroupSchemaTable_ARMGenerator()
var syncGroupSchemaTable_ARMGenerator gopter.Gen

// SyncGroupSchemaTable_ARMGenerator returns a generator of SyncGroupSchemaTable_ARM instances for property testing.
// We first initialize syncGroupSchemaTable_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SyncGroupSchemaTable_ARMGenerator() gopter.Gen {
	if syncGroupSchemaTable_ARMGenerator != nil {
		return syncGroupSchemaTable_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchemaTable_ARM(generators)
	syncGroupSchemaTable_ARMGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchemaTable_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchemaTable_ARM(generators)
	AddRelatedPropertyGeneratorsForSyncGroupSchemaTable_ARM(generators)
	syncGroupSchemaTable_ARMGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchemaTable_ARM{}), generators)

	return syncGroupSchemaTable_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSyncGroupSchemaTable_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSyncGroupSchemaTable_ARM(gens map[string]gopter.Gen) {
	gens["QuotedName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSyncGroupSchemaTable_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSyncGroupSchemaTable_ARM(gens map[string]gopter.Gen) {
	gens["Columns"] = gen.SliceOf(SyncGroupSchemaTableColumn_ARMGenerator())
}

func Test_SyncGroupSchemaTableColumn_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SyncGroupSchemaTableColumn_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSyncGroupSchemaTableColumn_ARM, SyncGroupSchemaTableColumn_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSyncGroupSchemaTableColumn_ARM runs a test to see if a specific instance of SyncGroupSchemaTableColumn_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSyncGroupSchemaTableColumn_ARM(subject SyncGroupSchemaTableColumn_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SyncGroupSchemaTableColumn_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SyncGroupSchemaTableColumn_ARM instances for property testing - lazily instantiated by
// SyncGroupSchemaTableColumn_ARMGenerator()
var syncGroupSchemaTableColumn_ARMGenerator gopter.Gen

// SyncGroupSchemaTableColumn_ARMGenerator returns a generator of SyncGroupSchemaTableColumn_ARM instances for property testing.
func SyncGroupSchemaTableColumn_ARMGenerator() gopter.Gen {
	if syncGroupSchemaTableColumn_ARMGenerator != nil {
		return syncGroupSchemaTableColumn_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchemaTableColumn_ARM(generators)
	syncGroupSchemaTableColumn_ARMGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchemaTableColumn_ARM{}), generators)

	return syncGroupSchemaTableColumn_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSyncGroupSchemaTableColumn_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSyncGroupSchemaTableColumn_ARM(gens map[string]gopter.Gen) {
	gens["DataSize"] = gen.PtrOf(gen.AlphaString())
	gens["DataType"] = gen.PtrOf(gen.AlphaString())
	gens["QuotedName"] = gen.PtrOf(gen.AlphaString())
}
