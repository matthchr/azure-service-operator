// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=sql.azure.com,resources=managedinstances_databases,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=sql.azure.com,resources={managedinstances_databases/status,managedinstances_databases/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1beta20211101.ManagedInstances_Database
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/ManagedDatabases.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}
type ManagedInstances_Database struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedInstances_Database_Spec   `json:"spec,omitempty"`
	Status            ManagedInstances_Database_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &ManagedInstances_Database{}

// GetConditions returns the conditions of the resource
func (database *ManagedInstances_Database) GetConditions() conditions.Conditions {
	return database.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (database *ManagedInstances_Database) SetConditions(conditions conditions.Conditions) {
	database.Status.Conditions = conditions
}

var _ genruntime.KubernetesResource = &ManagedInstances_Database{}

// AzureName returns the Azure name of the resource
func (database *ManagedInstances_Database) AzureName() string {
	return database.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (database ManagedInstances_Database) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (database *ManagedInstances_Database) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (database *ManagedInstances_Database) GetSpec() genruntime.ConvertibleSpec {
	return &database.Spec
}

// GetStatus returns the status of this resource
func (database *ManagedInstances_Database) GetStatus() genruntime.ConvertibleStatus {
	return &database.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Sql/managedInstances/databases"
func (database *ManagedInstances_Database) GetType() string {
	return "Microsoft.Sql/managedInstances/databases"
}

// NewEmptyStatus returns a new empty (blank) status
func (database *ManagedInstances_Database) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &ManagedInstances_Database_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (database *ManagedInstances_Database) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(database.Spec)
	return &genruntime.ResourceReference{
		Group: group,
		Kind:  kind,
		Name:  database.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (database *ManagedInstances_Database) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*ManagedInstances_Database_STATUS); ok {
		database.Status = *st
		return nil
	}

	// Convert status to required version
	var st ManagedInstances_Database_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	database.Status = st
	return nil
}

// Hub marks that this ManagedInstances_Database is the hub type for conversion
func (database *ManagedInstances_Database) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (database *ManagedInstances_Database) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: database.Spec.OriginalVersion,
		Kind:    "ManagedInstances_Database",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1beta20211101.ManagedInstances_Database
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/ManagedDatabases.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}
type ManagedInstances_DatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedInstances_Database `json:"items"`
}

// Storage version of v1beta20211101.ManagedInstances_Database_Spec
type ManagedInstances_Database_Spec struct {
	AutoCompleteRestore *bool `json:"autoCompleteRestore,omitempty"`

	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName        string  `json:"azureName,omitempty"`
	CatalogCollation *string `json:"catalogCollation,omitempty"`
	Collation        *string `json:"collation,omitempty"`
	CreateMode       *string `json:"createMode,omitempty"`
	LastBackupName   *string `json:"lastBackupName,omitempty"`
	Location         *string `json:"location,omitempty"`

	// LongTermRetentionBackupResourceReference: The name of the Long Term Retention backup to be used for restore of this
	// managed database.
	LongTermRetentionBackupResourceReference *genruntime.ResourceReference `armReference:"LongTermRetentionBackupResourceId" json:"longTermRetentionBackupResourceReference,omitempty"`
	OriginalVersion                          string                        `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a sql.azure.com/ManagedInstance resource
	Owner       *genruntime.KnownResourceReference `group:"sql.azure.com" json:"owner,omitempty" kind:"ManagedInstance"`
	PropertyBag genruntime.PropertyBag             `json:"$propertyBag,omitempty"`

	// RecoverableDatabaseReference: The resource identifier of the recoverable database associated with create operation of
	// this database.
	RecoverableDatabaseReference *genruntime.ResourceReference `armReference:"RecoverableDatabaseId" json:"recoverableDatabaseReference,omitempty"`

	// RestorableDroppedDatabaseReference: The restorable dropped database resource id to restore when creating this database.
	RestorableDroppedDatabaseReference *genruntime.ResourceReference `armReference:"RestorableDroppedDatabaseId" json:"restorableDroppedDatabaseReference,omitempty"`
	RestorePointInTime                 *string                       `json:"restorePointInTime,omitempty"`

	// SourceDatabaseReference: The resource identifier of the source database associated with create operation of this
	// database.
	SourceDatabaseReference  *genruntime.ResourceReference `armReference:"SourceDatabaseId" json:"sourceDatabaseReference,omitempty"`
	StorageContainerSasToken *string                       `json:"storageContainerSasToken,omitempty"`
	StorageContainerUri      *string                       `json:"storageContainerUri,omitempty"`
	Tags                     map[string]string             `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &ManagedInstances_Database_Spec{}

// ConvertSpecFrom populates our ManagedInstances_Database_Spec from the provided source
func (database *ManagedInstances_Database_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == database {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(database)
}

// ConvertSpecTo populates the provided destination from our ManagedInstances_Database_Spec
func (database *ManagedInstances_Database_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == database {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(database)
}

// Storage version of v1beta20211101.ManagedInstances_Database_STATUS
type ManagedInstances_Database_STATUS struct {
	AutoCompleteRestore               *bool                  `json:"autoCompleteRestore,omitempty"`
	CatalogCollation                  *string                `json:"catalogCollation,omitempty"`
	Collation                         *string                `json:"collation,omitempty"`
	Conditions                        []conditions.Condition `json:"conditions,omitempty"`
	CreateMode                        *string                `json:"createMode,omitempty"`
	CreationDate                      *string                `json:"creationDate,omitempty"`
	DefaultSecondaryLocation          *string                `json:"defaultSecondaryLocation,omitempty"`
	EarliestRestorePoint              *string                `json:"earliestRestorePoint,omitempty"`
	FailoverGroupId                   *string                `json:"failoverGroupId,omitempty"`
	Id                                *string                `json:"id,omitempty"`
	LastBackupName                    *string                `json:"lastBackupName,omitempty"`
	Location                          *string                `json:"location,omitempty"`
	LongTermRetentionBackupResourceId *string                `json:"longTermRetentionBackupResourceId,omitempty"`
	Name                              *string                `json:"name,omitempty"`
	PropertyBag                       genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	RecoverableDatabaseId             *string                `json:"recoverableDatabaseId,omitempty"`
	RestorableDroppedDatabaseId       *string                `json:"restorableDroppedDatabaseId,omitempty"`
	RestorePointInTime                *string                `json:"restorePointInTime,omitempty"`
	SourceDatabaseId                  *string                `json:"sourceDatabaseId,omitempty"`
	Status                            *string                `json:"status,omitempty"`
	StorageContainerSasToken          *string                `json:"storageContainerSasToken,omitempty"`
	StorageContainerUri               *string                `json:"storageContainerUri,omitempty"`
	Tags                              map[string]string      `json:"tags,omitempty"`
	Type                              *string                `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &ManagedInstances_Database_STATUS{}

// ConvertStatusFrom populates our ManagedInstances_Database_STATUS from the provided source
func (database *ManagedInstances_Database_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == database {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(database)
}

// ConvertStatusTo populates the provided destination from our ManagedInstances_Database_STATUS
func (database *ManagedInstances_Database_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == database {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(database)
}

func init() {
	SchemeBuilder.Register(&ManagedInstances_Database{}, &ManagedInstances_DatabaseList{})
}
