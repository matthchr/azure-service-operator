// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Servers_ConnectionPolicy_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_ConnectionPolicy via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_ConnectionPolicy, Servers_ConnectionPolicyGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_ConnectionPolicy runs a test to see if a specific instance of Servers_ConnectionPolicy round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_ConnectionPolicy(subject Servers_ConnectionPolicy) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_ConnectionPolicy
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_ConnectionPolicy instances for property testing - lazily instantiated by
// Servers_ConnectionPolicyGenerator()
var servers_ConnectionPolicyGenerator gopter.Gen

// Servers_ConnectionPolicyGenerator returns a generator of Servers_ConnectionPolicy instances for property testing.
func Servers_ConnectionPolicyGenerator() gopter.Gen {
	if servers_ConnectionPolicyGenerator != nil {
		return servers_ConnectionPolicyGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServers_ConnectionPolicy(generators)
	servers_ConnectionPolicyGenerator = gen.Struct(reflect.TypeOf(Servers_ConnectionPolicy{}), generators)

	return servers_ConnectionPolicyGenerator
}

// AddRelatedPropertyGeneratorsForServers_ConnectionPolicy is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_ConnectionPolicy(gens map[string]gopter.Gen) {
	gens["Spec"] = Servers_ConnectionPolicy_SpecGenerator()
	gens["Status"] = Servers_ConnectionPolicy_STATUSGenerator()
}

func Test_Servers_ConnectionPolicy_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_ConnectionPolicy_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_ConnectionPolicy_Spec, Servers_ConnectionPolicy_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_ConnectionPolicy_Spec runs a test to see if a specific instance of Servers_ConnectionPolicy_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_ConnectionPolicy_Spec(subject Servers_ConnectionPolicy_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_ConnectionPolicy_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_ConnectionPolicy_Spec instances for property testing - lazily instantiated by
// Servers_ConnectionPolicy_SpecGenerator()
var servers_ConnectionPolicy_SpecGenerator gopter.Gen

// Servers_ConnectionPolicy_SpecGenerator returns a generator of Servers_ConnectionPolicy_Spec instances for property testing.
func Servers_ConnectionPolicy_SpecGenerator() gopter.Gen {
	if servers_ConnectionPolicy_SpecGenerator != nil {
		return servers_ConnectionPolicy_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_ConnectionPolicy_Spec(generators)
	servers_ConnectionPolicy_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_ConnectionPolicy_Spec{}), generators)

	return servers_ConnectionPolicy_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServers_ConnectionPolicy_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_ConnectionPolicy_Spec(gens map[string]gopter.Gen) {
	gens["ConnectionType"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
}

func Test_Servers_ConnectionPolicy_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_ConnectionPolicy_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_ConnectionPolicy_STATUS, Servers_ConnectionPolicy_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_ConnectionPolicy_STATUS runs a test to see if a specific instance of Servers_ConnectionPolicy_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_ConnectionPolicy_STATUS(subject Servers_ConnectionPolicy_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_ConnectionPolicy_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_ConnectionPolicy_STATUS instances for property testing - lazily instantiated by
// Servers_ConnectionPolicy_STATUSGenerator()
var servers_ConnectionPolicy_STATUSGenerator gopter.Gen

// Servers_ConnectionPolicy_STATUSGenerator returns a generator of Servers_ConnectionPolicy_STATUS instances for property testing.
func Servers_ConnectionPolicy_STATUSGenerator() gopter.Gen {
	if servers_ConnectionPolicy_STATUSGenerator != nil {
		return servers_ConnectionPolicy_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_ConnectionPolicy_STATUS(generators)
	servers_ConnectionPolicy_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_ConnectionPolicy_STATUS{}), generators)

	return servers_ConnectionPolicy_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServers_ConnectionPolicy_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_ConnectionPolicy_STATUS(gens map[string]gopter.Gen) {
	gens["ConnectionType"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}
