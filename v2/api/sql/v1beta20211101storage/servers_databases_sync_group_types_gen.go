// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=sql.azure.com,resources=servers_databases_syncgroups,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=sql.azure.com,resources={servers_databases_syncgroups/status,servers_databases_syncgroups/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1beta20211101.Servers_Databases_SyncGroup
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/SyncGroups.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}
type Servers_Databases_SyncGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Servers_Databases_SyncGroup_Spec   `json:"spec,omitempty"`
	Status            Servers_Databases_SyncGroup_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &Servers_Databases_SyncGroup{}

// GetConditions returns the conditions of the resource
func (group *Servers_Databases_SyncGroup) GetConditions() conditions.Conditions {
	return group.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (group *Servers_Databases_SyncGroup) SetConditions(conditions conditions.Conditions) {
	group.Status.Conditions = conditions
}

var _ genruntime.KubernetesResource = &Servers_Databases_SyncGroup{}

// AzureName returns the Azure name of the resource
func (group *Servers_Databases_SyncGroup) AzureName() string {
	return group.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-11-01"
func (group Servers_Databases_SyncGroup) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (group *Servers_Databases_SyncGroup) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (group *Servers_Databases_SyncGroup) GetSpec() genruntime.ConvertibleSpec {
	return &group.Spec
}

// GetStatus returns the status of this resource
func (group *Servers_Databases_SyncGroup) GetStatus() genruntime.ConvertibleStatus {
	return &group.Status
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Sql/servers/databases/syncGroups"
func (group *Servers_Databases_SyncGroup) GetType() string {
	return "Microsoft.Sql/servers/databases/syncGroups"
}

// NewEmptyStatus returns a new empty (blank) status
func (group *Servers_Databases_SyncGroup) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &Servers_Databases_SyncGroup_STATUS{}
}

// Owner returns the ResourceReference of the owner, or nil if there is no owner
func (group *Servers_Databases_SyncGroup) Owner() *genruntime.ResourceReference {
	ownerGroup, ownerKind := genruntime.LookupOwnerGroupKind(group.Spec)
	return &genruntime.ResourceReference{
		Group: ownerGroup,
		Kind:  ownerKind,
		Name:  group.Spec.Owner.Name,
	}
}

// SetStatus sets the status of this resource
func (group *Servers_Databases_SyncGroup) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*Servers_Databases_SyncGroup_STATUS); ok {
		group.Status = *st
		return nil
	}

	// Convert status to required version
	var st Servers_Databases_SyncGroup_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	group.Status = st
	return nil
}

// Hub marks that this Servers_Databases_SyncGroup is the hub type for conversion
func (group *Servers_Databases_SyncGroup) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (group *Servers_Databases_SyncGroup) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: group.Spec.OriginalVersion,
		Kind:    "Servers_Databases_SyncGroup",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1beta20211101.Servers_Databases_SyncGroup
// Generator information:
// - Generated from: /sql/resource-manager/Microsoft.Sql/stable/2021-11-01/SyncGroups.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}
type Servers_Databases_SyncGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Servers_Databases_SyncGroup `json:"items"`
}

// Storage version of v1beta20211101.Servers_Databases_SyncGroup_Spec
type Servers_Databases_SyncGroup_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName                      string                      `json:"azureName,omitempty"`
	ConflictLoggingRetentionInDays *int                        `json:"conflictLoggingRetentionInDays,omitempty"`
	ConflictResolutionPolicy       *string                     `json:"conflictResolutionPolicy,omitempty"`
	EnableConflictLogging          *bool                       `json:"enableConflictLogging,omitempty"`
	HubDatabasePassword            *genruntime.SecretReference `json:"hubDatabasePassword,omitempty"`
	HubDatabaseUserName            *string                     `json:"hubDatabaseUserName,omitempty"`
	Interval                       *int                        `json:"interval,omitempty"`
	OriginalVersion                string                      `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a sql.azure.com/Servers_Database resource
	Owner       *genruntime.KnownResourceReference `group:"sql.azure.com" json:"owner,omitempty" kind:"Servers_Database"`
	PropertyBag genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	Schema      *SyncGroupSchema                   `json:"schema,omitempty"`
	Sku         *Sku                               `json:"sku,omitempty"`

	// SyncDatabaseReference: ARM resource id of the sync database in the sync group.
	SyncDatabaseReference    *genruntime.ResourceReference `armReference:"SyncDatabaseId" json:"syncDatabaseReference,omitempty"`
	UsePrivateLinkConnection *bool                         `json:"usePrivateLinkConnection,omitempty"`
}

var _ genruntime.ConvertibleSpec = &Servers_Databases_SyncGroup_Spec{}

// ConvertSpecFrom populates our Servers_Databases_SyncGroup_Spec from the provided source
func (group *Servers_Databases_SyncGroup_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == group {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(group)
}

// ConvertSpecTo populates the provided destination from our Servers_Databases_SyncGroup_Spec
func (group *Servers_Databases_SyncGroup_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == group {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(group)
}

// Storage version of v1beta20211101.Servers_Databases_SyncGroup_STATUS
type Servers_Databases_SyncGroup_STATUS struct {
	Conditions                     []conditions.Condition  `json:"conditions,omitempty"`
	ConflictLoggingRetentionInDays *int                    `json:"conflictLoggingRetentionInDays,omitempty"`
	ConflictResolutionPolicy       *string                 `json:"conflictResolutionPolicy,omitempty"`
	EnableConflictLogging          *bool                   `json:"enableConflictLogging,omitempty"`
	HubDatabaseUserName            *string                 `json:"hubDatabaseUserName,omitempty"`
	Id                             *string                 `json:"id,omitempty"`
	Interval                       *int                    `json:"interval,omitempty"`
	LastSyncTime                   *string                 `json:"lastSyncTime,omitempty"`
	Name                           *string                 `json:"name,omitempty"`
	PrivateEndpointName            *string                 `json:"privateEndpointName,omitempty"`
	PropertyBag                    genruntime.PropertyBag  `json:"$propertyBag,omitempty"`
	Schema                         *SyncGroupSchema_STATUS `json:"schema,omitempty"`
	Sku                            *Sku_STATUS             `json:"sku,omitempty"`
	SyncDatabaseId                 *string                 `json:"syncDatabaseId,omitempty"`
	SyncState                      *string                 `json:"syncState,omitempty"`
	Type                           *string                 `json:"type,omitempty"`
	UsePrivateLinkConnection       *bool                   `json:"usePrivateLinkConnection,omitempty"`
}

var _ genruntime.ConvertibleStatus = &Servers_Databases_SyncGroup_STATUS{}

// ConvertStatusFrom populates our Servers_Databases_SyncGroup_STATUS from the provided source
func (group *Servers_Databases_SyncGroup_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == group {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(group)
}

// ConvertStatusTo populates the provided destination from our Servers_Databases_SyncGroup_STATUS
func (group *Servers_Databases_SyncGroup_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == group {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(group)
}

// Storage version of v1beta20211101.SyncGroupSchema
// Properties of sync group schema.
type SyncGroupSchema struct {
	MasterSyncMemberName *string                `json:"masterSyncMemberName,omitempty"`
	PropertyBag          genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Tables               []SyncGroupSchemaTable `json:"tables,omitempty"`
}

// Storage version of v1beta20211101.SyncGroupSchema_STATUS
// Properties of sync group schema.
type SyncGroupSchema_STATUS struct {
	MasterSyncMemberName *string                       `json:"masterSyncMemberName,omitempty"`
	PropertyBag          genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	Tables               []SyncGroupSchemaTable_STATUS `json:"tables,omitempty"`
}

// Storage version of v1beta20211101.SyncGroupSchemaTable
// Properties of table in sync group schema.
type SyncGroupSchemaTable struct {
	Columns     []SyncGroupSchemaTableColumn `json:"columns,omitempty"`
	PropertyBag genruntime.PropertyBag       `json:"$propertyBag,omitempty"`
	QuotedName  *string                      `json:"quotedName,omitempty"`
}

// Storage version of v1beta20211101.SyncGroupSchemaTable_STATUS
// Properties of table in sync group schema.
type SyncGroupSchemaTable_STATUS struct {
	Columns     []SyncGroupSchemaTableColumn_STATUS `json:"columns,omitempty"`
	PropertyBag genruntime.PropertyBag              `json:"$propertyBag,omitempty"`
	QuotedName  *string                             `json:"quotedName,omitempty"`
}

// Storage version of v1beta20211101.SyncGroupSchemaTableColumn
// Properties of column in sync group table.
type SyncGroupSchemaTableColumn struct {
	DataSize    *string                `json:"dataSize,omitempty"`
	DataType    *string                `json:"dataType,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	QuotedName  *string                `json:"quotedName,omitempty"`
}

// Storage version of v1beta20211101.SyncGroupSchemaTableColumn_STATUS
// Properties of column in sync group table.
type SyncGroupSchemaTableColumn_STATUS struct {
	DataSize    *string                `json:"dataSize,omitempty"`
	DataType    *string                `json:"dataType,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	QuotedName  *string                `json:"quotedName,omitempty"`
}

func init() {
	SchemeBuilder.Register(&Servers_Databases_SyncGroup{}, &Servers_Databases_SyncGroupList{})
}
