// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Servers_JobAgent_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_JobAgent via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_JobAgent, Servers_JobAgentGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_JobAgent runs a test to see if a specific instance of Servers_JobAgent round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_JobAgent(subject Servers_JobAgent) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_JobAgent
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_JobAgent instances for property testing - lazily instantiated by Servers_JobAgentGenerator()
var servers_JobAgentGenerator gopter.Gen

// Servers_JobAgentGenerator returns a generator of Servers_JobAgent instances for property testing.
func Servers_JobAgentGenerator() gopter.Gen {
	if servers_JobAgentGenerator != nil {
		return servers_JobAgentGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServers_JobAgent(generators)
	servers_JobAgentGenerator = gen.Struct(reflect.TypeOf(Servers_JobAgent{}), generators)

	return servers_JobAgentGenerator
}

// AddRelatedPropertyGeneratorsForServers_JobAgent is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_JobAgent(gens map[string]gopter.Gen) {
	gens["Spec"] = Servers_JobAgent_SpecGenerator()
	gens["Status"] = Servers_JobAgent_STATUSGenerator()
}

func Test_Servers_JobAgent_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_JobAgent_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_JobAgent_Spec, Servers_JobAgent_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_JobAgent_Spec runs a test to see if a specific instance of Servers_JobAgent_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_JobAgent_Spec(subject Servers_JobAgent_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_JobAgent_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_JobAgent_Spec instances for property testing - lazily instantiated by
// Servers_JobAgent_SpecGenerator()
var servers_JobAgent_SpecGenerator gopter.Gen

// Servers_JobAgent_SpecGenerator returns a generator of Servers_JobAgent_Spec instances for property testing.
// We first initialize servers_JobAgent_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_JobAgent_SpecGenerator() gopter.Gen {
	if servers_JobAgent_SpecGenerator != nil {
		return servers_JobAgent_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_JobAgent_Spec(generators)
	servers_JobAgent_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_JobAgent_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_JobAgent_Spec(generators)
	AddRelatedPropertyGeneratorsForServers_JobAgent_Spec(generators)
	servers_JobAgent_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_JobAgent_Spec{}), generators)

	return servers_JobAgent_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServers_JobAgent_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_JobAgent_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServers_JobAgent_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_JobAgent_Spec(gens map[string]gopter.Gen) {
	gens["Sku"] = gen.PtrOf(SkuGenerator())
}

func Test_Servers_JobAgent_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_JobAgent_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_JobAgent_STATUS, Servers_JobAgent_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_JobAgent_STATUS runs a test to see if a specific instance of Servers_JobAgent_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_JobAgent_STATUS(subject Servers_JobAgent_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_JobAgent_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_JobAgent_STATUS instances for property testing - lazily instantiated by
// Servers_JobAgent_STATUSGenerator()
var servers_JobAgent_STATUSGenerator gopter.Gen

// Servers_JobAgent_STATUSGenerator returns a generator of Servers_JobAgent_STATUS instances for property testing.
// We first initialize servers_JobAgent_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_JobAgent_STATUSGenerator() gopter.Gen {
	if servers_JobAgent_STATUSGenerator != nil {
		return servers_JobAgent_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_JobAgent_STATUS(generators)
	servers_JobAgent_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_JobAgent_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_JobAgent_STATUS(generators)
	AddRelatedPropertyGeneratorsForServers_JobAgent_STATUS(generators)
	servers_JobAgent_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_JobAgent_STATUS{}), generators)

	return servers_JobAgent_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServers_JobAgent_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_JobAgent_STATUS(gens map[string]gopter.Gen) {
	gens["DatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForServers_JobAgent_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_JobAgent_STATUS(gens map[string]gopter.Gen) {
	gens["Sku"] = gen.PtrOf(Sku_STATUSGenerator())
}
