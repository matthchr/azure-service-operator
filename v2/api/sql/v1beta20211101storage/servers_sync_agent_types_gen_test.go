// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Servers_SyncAgent_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_SyncAgent via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_SyncAgent, Servers_SyncAgentGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_SyncAgent runs a test to see if a specific instance of Servers_SyncAgent round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_SyncAgent(subject Servers_SyncAgent) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_SyncAgent
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_SyncAgent instances for property testing - lazily instantiated by Servers_SyncAgentGenerator()
var servers_SyncAgentGenerator gopter.Gen

// Servers_SyncAgentGenerator returns a generator of Servers_SyncAgent instances for property testing.
func Servers_SyncAgentGenerator() gopter.Gen {
	if servers_SyncAgentGenerator != nil {
		return servers_SyncAgentGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServers_SyncAgent(generators)
	servers_SyncAgentGenerator = gen.Struct(reflect.TypeOf(Servers_SyncAgent{}), generators)

	return servers_SyncAgentGenerator
}

// AddRelatedPropertyGeneratorsForServers_SyncAgent is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_SyncAgent(gens map[string]gopter.Gen) {
	gens["Spec"] = Servers_SyncAgent_SpecGenerator()
	gens["Status"] = Servers_SyncAgent_STATUSGenerator()
}

func Test_Servers_SyncAgent_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_SyncAgent_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_SyncAgent_Spec, Servers_SyncAgent_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_SyncAgent_Spec runs a test to see if a specific instance of Servers_SyncAgent_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_SyncAgent_Spec(subject Servers_SyncAgent_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_SyncAgent_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_SyncAgent_Spec instances for property testing - lazily instantiated by
// Servers_SyncAgent_SpecGenerator()
var servers_SyncAgent_SpecGenerator gopter.Gen

// Servers_SyncAgent_SpecGenerator returns a generator of Servers_SyncAgent_Spec instances for property testing.
func Servers_SyncAgent_SpecGenerator() gopter.Gen {
	if servers_SyncAgent_SpecGenerator != nil {
		return servers_SyncAgent_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_SyncAgent_Spec(generators)
	servers_SyncAgent_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_SyncAgent_Spec{}), generators)

	return servers_SyncAgent_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServers_SyncAgent_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_SyncAgent_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["OriginalVersion"] = gen.AlphaString()
}

func Test_Servers_SyncAgent_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_SyncAgent_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_SyncAgent_STATUS, Servers_SyncAgent_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_SyncAgent_STATUS runs a test to see if a specific instance of Servers_SyncAgent_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_SyncAgent_STATUS(subject Servers_SyncAgent_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_SyncAgent_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_SyncAgent_STATUS instances for property testing - lazily instantiated by
// Servers_SyncAgent_STATUSGenerator()
var servers_SyncAgent_STATUSGenerator gopter.Gen

// Servers_SyncAgent_STATUSGenerator returns a generator of Servers_SyncAgent_STATUS instances for property testing.
func Servers_SyncAgent_STATUSGenerator() gopter.Gen {
	if servers_SyncAgent_STATUSGenerator != nil {
		return servers_SyncAgent_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_SyncAgent_STATUS(generators)
	servers_SyncAgent_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_SyncAgent_STATUS{}), generators)

	return servers_SyncAgent_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServers_SyncAgent_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_SyncAgent_STATUS(gens map[string]gopter.Gen) {
	gens["ExpiryTime"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IsUpToDate"] = gen.PtrOf(gen.Bool())
	gens["LastAliveTime"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PropertiesName"] = gen.PtrOf(gen.AlphaString())
	gens["State"] = gen.PtrOf(gen.AlphaString())
	gens["SyncDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["Version"] = gen.PtrOf(gen.AlphaString())
}
