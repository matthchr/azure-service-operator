// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Servers_Databases_SyncGroup_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_Databases_SyncGroup via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_Databases_SyncGroup, Servers_Databases_SyncGroupGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_Databases_SyncGroup runs a test to see if a specific instance of Servers_Databases_SyncGroup round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_Databases_SyncGroup(subject Servers_Databases_SyncGroup) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_Databases_SyncGroup
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_Databases_SyncGroup instances for property testing - lazily instantiated by
// Servers_Databases_SyncGroupGenerator()
var servers_Databases_SyncGroupGenerator gopter.Gen

// Servers_Databases_SyncGroupGenerator returns a generator of Servers_Databases_SyncGroup instances for property testing.
func Servers_Databases_SyncGroupGenerator() gopter.Gen {
	if servers_Databases_SyncGroupGenerator != nil {
		return servers_Databases_SyncGroupGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServers_Databases_SyncGroup(generators)
	servers_Databases_SyncGroupGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_SyncGroup{}), generators)

	return servers_Databases_SyncGroupGenerator
}

// AddRelatedPropertyGeneratorsForServers_Databases_SyncGroup is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_Databases_SyncGroup(gens map[string]gopter.Gen) {
	gens["Spec"] = Servers_Databases_SyncGroup_SpecGenerator()
	gens["Status"] = Servers_Databases_SyncGroup_STATUSGenerator()
}

func Test_Servers_Databases_SyncGroup_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_Databases_SyncGroup_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_Databases_SyncGroup_Spec, Servers_Databases_SyncGroup_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_Databases_SyncGroup_Spec runs a test to see if a specific instance of Servers_Databases_SyncGroup_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_Databases_SyncGroup_Spec(subject Servers_Databases_SyncGroup_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_Databases_SyncGroup_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_Databases_SyncGroup_Spec instances for property testing - lazily instantiated by
// Servers_Databases_SyncGroup_SpecGenerator()
var servers_Databases_SyncGroup_SpecGenerator gopter.Gen

// Servers_Databases_SyncGroup_SpecGenerator returns a generator of Servers_Databases_SyncGroup_Spec instances for property testing.
// We first initialize servers_Databases_SyncGroup_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_Databases_SyncGroup_SpecGenerator() gopter.Gen {
	if servers_Databases_SyncGroup_SpecGenerator != nil {
		return servers_Databases_SyncGroup_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_SyncGroup_Spec(generators)
	servers_Databases_SyncGroup_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_SyncGroup_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_SyncGroup_Spec(generators)
	AddRelatedPropertyGeneratorsForServers_Databases_SyncGroup_Spec(generators)
	servers_Databases_SyncGroup_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_SyncGroup_Spec{}), generators)

	return servers_Databases_SyncGroup_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServers_Databases_SyncGroup_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_Databases_SyncGroup_Spec(gens map[string]gopter.Gen) {
	gens["AzureName"] = gen.AlphaString()
	gens["ConflictLoggingRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["ConflictResolutionPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["EnableConflictLogging"] = gen.PtrOf(gen.Bool())
	gens["HubDatabaseUserName"] = gen.PtrOf(gen.AlphaString())
	gens["Interval"] = gen.PtrOf(gen.Int())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["UsePrivateLinkConnection"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForServers_Databases_SyncGroup_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_Databases_SyncGroup_Spec(gens map[string]gopter.Gen) {
	gens["Schema"] = gen.PtrOf(SyncGroupSchemaGenerator())
	gens["Sku"] = gen.PtrOf(SkuGenerator())
}

func Test_Servers_Databases_SyncGroup_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_Databases_SyncGroup_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_Databases_SyncGroup_STATUS, Servers_Databases_SyncGroup_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_Databases_SyncGroup_STATUS runs a test to see if a specific instance of Servers_Databases_SyncGroup_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_Databases_SyncGroup_STATUS(subject Servers_Databases_SyncGroup_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_Databases_SyncGroup_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_Databases_SyncGroup_STATUS instances for property testing - lazily instantiated by
// Servers_Databases_SyncGroup_STATUSGenerator()
var servers_Databases_SyncGroup_STATUSGenerator gopter.Gen

// Servers_Databases_SyncGroup_STATUSGenerator returns a generator of Servers_Databases_SyncGroup_STATUS instances for property testing.
// We first initialize servers_Databases_SyncGroup_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_Databases_SyncGroup_STATUSGenerator() gopter.Gen {
	if servers_Databases_SyncGroup_STATUSGenerator != nil {
		return servers_Databases_SyncGroup_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_SyncGroup_STATUS(generators)
	servers_Databases_SyncGroup_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_SyncGroup_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Databases_SyncGroup_STATUS(generators)
	AddRelatedPropertyGeneratorsForServers_Databases_SyncGroup_STATUS(generators)
	servers_Databases_SyncGroup_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_Databases_SyncGroup_STATUS{}), generators)

	return servers_Databases_SyncGroup_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServers_Databases_SyncGroup_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_Databases_SyncGroup_STATUS(gens map[string]gopter.Gen) {
	gens["ConflictLoggingRetentionInDays"] = gen.PtrOf(gen.Int())
	gens["ConflictResolutionPolicy"] = gen.PtrOf(gen.AlphaString())
	gens["EnableConflictLogging"] = gen.PtrOf(gen.Bool())
	gens["HubDatabaseUserName"] = gen.PtrOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Interval"] = gen.PtrOf(gen.Int())
	gens["LastSyncTime"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PrivateEndpointName"] = gen.PtrOf(gen.AlphaString())
	gens["SyncDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["SyncState"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["UsePrivateLinkConnection"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForServers_Databases_SyncGroup_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_Databases_SyncGroup_STATUS(gens map[string]gopter.Gen) {
	gens["Schema"] = gen.PtrOf(SyncGroupSchema_STATUSGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUSGenerator())
}

func Test_SyncGroupSchema_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SyncGroupSchema via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSyncGroupSchema, SyncGroupSchemaGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSyncGroupSchema runs a test to see if a specific instance of SyncGroupSchema round trips to JSON and back losslessly
func RunJSONSerializationTestForSyncGroupSchema(subject SyncGroupSchema) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SyncGroupSchema
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SyncGroupSchema instances for property testing - lazily instantiated by SyncGroupSchemaGenerator()
var syncGroupSchemaGenerator gopter.Gen

// SyncGroupSchemaGenerator returns a generator of SyncGroupSchema instances for property testing.
// We first initialize syncGroupSchemaGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SyncGroupSchemaGenerator() gopter.Gen {
	if syncGroupSchemaGenerator != nil {
		return syncGroupSchemaGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchema(generators)
	syncGroupSchemaGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchema{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchema(generators)
	AddRelatedPropertyGeneratorsForSyncGroupSchema(generators)
	syncGroupSchemaGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchema{}), generators)

	return syncGroupSchemaGenerator
}

// AddIndependentPropertyGeneratorsForSyncGroupSchema is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSyncGroupSchema(gens map[string]gopter.Gen) {
	gens["MasterSyncMemberName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSyncGroupSchema is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSyncGroupSchema(gens map[string]gopter.Gen) {
	gens["Tables"] = gen.SliceOf(SyncGroupSchemaTableGenerator())
}

func Test_SyncGroupSchema_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SyncGroupSchema_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSyncGroupSchema_STATUS, SyncGroupSchema_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSyncGroupSchema_STATUS runs a test to see if a specific instance of SyncGroupSchema_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSyncGroupSchema_STATUS(subject SyncGroupSchema_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SyncGroupSchema_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SyncGroupSchema_STATUS instances for property testing - lazily instantiated by
// SyncGroupSchema_STATUSGenerator()
var syncGroupSchema_STATUSGenerator gopter.Gen

// SyncGroupSchema_STATUSGenerator returns a generator of SyncGroupSchema_STATUS instances for property testing.
// We first initialize syncGroupSchema_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SyncGroupSchema_STATUSGenerator() gopter.Gen {
	if syncGroupSchema_STATUSGenerator != nil {
		return syncGroupSchema_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchema_STATUS(generators)
	syncGroupSchema_STATUSGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchema_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchema_STATUS(generators)
	AddRelatedPropertyGeneratorsForSyncGroupSchema_STATUS(generators)
	syncGroupSchema_STATUSGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchema_STATUS{}), generators)

	return syncGroupSchema_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSyncGroupSchema_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSyncGroupSchema_STATUS(gens map[string]gopter.Gen) {
	gens["MasterSyncMemberName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSyncGroupSchema_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSyncGroupSchema_STATUS(gens map[string]gopter.Gen) {
	gens["Tables"] = gen.SliceOf(SyncGroupSchemaTable_STATUSGenerator())
}

func Test_SyncGroupSchemaTable_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SyncGroupSchemaTable via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSyncGroupSchemaTable, SyncGroupSchemaTableGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSyncGroupSchemaTable runs a test to see if a specific instance of SyncGroupSchemaTable round trips to JSON and back losslessly
func RunJSONSerializationTestForSyncGroupSchemaTable(subject SyncGroupSchemaTable) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SyncGroupSchemaTable
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SyncGroupSchemaTable instances for property testing - lazily instantiated by
// SyncGroupSchemaTableGenerator()
var syncGroupSchemaTableGenerator gopter.Gen

// SyncGroupSchemaTableGenerator returns a generator of SyncGroupSchemaTable instances for property testing.
// We first initialize syncGroupSchemaTableGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SyncGroupSchemaTableGenerator() gopter.Gen {
	if syncGroupSchemaTableGenerator != nil {
		return syncGroupSchemaTableGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchemaTable(generators)
	syncGroupSchemaTableGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchemaTable{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchemaTable(generators)
	AddRelatedPropertyGeneratorsForSyncGroupSchemaTable(generators)
	syncGroupSchemaTableGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchemaTable{}), generators)

	return syncGroupSchemaTableGenerator
}

// AddIndependentPropertyGeneratorsForSyncGroupSchemaTable is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSyncGroupSchemaTable(gens map[string]gopter.Gen) {
	gens["QuotedName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSyncGroupSchemaTable is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSyncGroupSchemaTable(gens map[string]gopter.Gen) {
	gens["Columns"] = gen.SliceOf(SyncGroupSchemaTableColumnGenerator())
}

func Test_SyncGroupSchemaTable_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SyncGroupSchemaTable_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSyncGroupSchemaTable_STATUS, SyncGroupSchemaTable_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSyncGroupSchemaTable_STATUS runs a test to see if a specific instance of SyncGroupSchemaTable_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSyncGroupSchemaTable_STATUS(subject SyncGroupSchemaTable_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SyncGroupSchemaTable_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SyncGroupSchemaTable_STATUS instances for property testing - lazily instantiated by
// SyncGroupSchemaTable_STATUSGenerator()
var syncGroupSchemaTable_STATUSGenerator gopter.Gen

// SyncGroupSchemaTable_STATUSGenerator returns a generator of SyncGroupSchemaTable_STATUS instances for property testing.
// We first initialize syncGroupSchemaTable_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func SyncGroupSchemaTable_STATUSGenerator() gopter.Gen {
	if syncGroupSchemaTable_STATUSGenerator != nil {
		return syncGroupSchemaTable_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchemaTable_STATUS(generators)
	syncGroupSchemaTable_STATUSGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchemaTable_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchemaTable_STATUS(generators)
	AddRelatedPropertyGeneratorsForSyncGroupSchemaTable_STATUS(generators)
	syncGroupSchemaTable_STATUSGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchemaTable_STATUS{}), generators)

	return syncGroupSchemaTable_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSyncGroupSchemaTable_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSyncGroupSchemaTable_STATUS(gens map[string]gopter.Gen) {
	gens["QuotedName"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForSyncGroupSchemaTable_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForSyncGroupSchemaTable_STATUS(gens map[string]gopter.Gen) {
	gens["Columns"] = gen.SliceOf(SyncGroupSchemaTableColumn_STATUSGenerator())
}

func Test_SyncGroupSchemaTableColumn_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SyncGroupSchemaTableColumn via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSyncGroupSchemaTableColumn, SyncGroupSchemaTableColumnGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSyncGroupSchemaTableColumn runs a test to see if a specific instance of SyncGroupSchemaTableColumn round trips to JSON and back losslessly
func RunJSONSerializationTestForSyncGroupSchemaTableColumn(subject SyncGroupSchemaTableColumn) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SyncGroupSchemaTableColumn
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SyncGroupSchemaTableColumn instances for property testing - lazily instantiated by
// SyncGroupSchemaTableColumnGenerator()
var syncGroupSchemaTableColumnGenerator gopter.Gen

// SyncGroupSchemaTableColumnGenerator returns a generator of SyncGroupSchemaTableColumn instances for property testing.
func SyncGroupSchemaTableColumnGenerator() gopter.Gen {
	if syncGroupSchemaTableColumnGenerator != nil {
		return syncGroupSchemaTableColumnGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchemaTableColumn(generators)
	syncGroupSchemaTableColumnGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchemaTableColumn{}), generators)

	return syncGroupSchemaTableColumnGenerator
}

// AddIndependentPropertyGeneratorsForSyncGroupSchemaTableColumn is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSyncGroupSchemaTableColumn(gens map[string]gopter.Gen) {
	gens["DataSize"] = gen.PtrOf(gen.AlphaString())
	gens["DataType"] = gen.PtrOf(gen.AlphaString())
	gens["QuotedName"] = gen.PtrOf(gen.AlphaString())
}

func Test_SyncGroupSchemaTableColumn_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SyncGroupSchemaTableColumn_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSyncGroupSchemaTableColumn_STATUS, SyncGroupSchemaTableColumn_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSyncGroupSchemaTableColumn_STATUS runs a test to see if a specific instance of SyncGroupSchemaTableColumn_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForSyncGroupSchemaTableColumn_STATUS(subject SyncGroupSchemaTableColumn_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SyncGroupSchemaTableColumn_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SyncGroupSchemaTableColumn_STATUS instances for property testing - lazily instantiated by
// SyncGroupSchemaTableColumn_STATUSGenerator()
var syncGroupSchemaTableColumn_STATUSGenerator gopter.Gen

// SyncGroupSchemaTableColumn_STATUSGenerator returns a generator of SyncGroupSchemaTableColumn_STATUS instances for property testing.
func SyncGroupSchemaTableColumn_STATUSGenerator() gopter.Gen {
	if syncGroupSchemaTableColumn_STATUSGenerator != nil {
		return syncGroupSchemaTableColumn_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSyncGroupSchemaTableColumn_STATUS(generators)
	syncGroupSchemaTableColumn_STATUSGenerator = gen.Struct(reflect.TypeOf(SyncGroupSchemaTableColumn_STATUS{}), generators)

	return syncGroupSchemaTableColumn_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForSyncGroupSchemaTableColumn_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSyncGroupSchemaTableColumn_STATUS(gens map[string]gopter.Gen) {
	gens["DataSize"] = gen.PtrOf(gen.AlphaString())
	gens["DataType"] = gen.PtrOf(gen.AlphaString())
	gens["QuotedName"] = gen.PtrOf(gen.AlphaString())
}
