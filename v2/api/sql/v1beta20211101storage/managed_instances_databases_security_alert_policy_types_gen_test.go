// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_ManagedInstances_Databases_SecurityAlertPolicy_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstances_Databases_SecurityAlertPolicy via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstances_Databases_SecurityAlertPolicy, ManagedInstances_Databases_SecurityAlertPolicyGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstances_Databases_SecurityAlertPolicy runs a test to see if a specific instance of ManagedInstances_Databases_SecurityAlertPolicy round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstances_Databases_SecurityAlertPolicy(subject ManagedInstances_Databases_SecurityAlertPolicy) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstances_Databases_SecurityAlertPolicy
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstances_Databases_SecurityAlertPolicy instances for property testing - lazily instantiated by
// ManagedInstances_Databases_SecurityAlertPolicyGenerator()
var managedInstances_Databases_SecurityAlertPolicyGenerator gopter.Gen

// ManagedInstances_Databases_SecurityAlertPolicyGenerator returns a generator of ManagedInstances_Databases_SecurityAlertPolicy instances for property testing.
func ManagedInstances_Databases_SecurityAlertPolicyGenerator() gopter.Gen {
	if managedInstances_Databases_SecurityAlertPolicyGenerator != nil {
		return managedInstances_Databases_SecurityAlertPolicyGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy(generators)
	managedInstances_Databases_SecurityAlertPolicyGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_Databases_SecurityAlertPolicy{}), generators)

	return managedInstances_Databases_SecurityAlertPolicyGenerator
}

// AddRelatedPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy(gens map[string]gopter.Gen) {
	gens["Spec"] = ManagedInstances_Databases_SecurityAlertPolicy_SpecGenerator()
	gens["Status"] = ManagedInstances_Databases_SecurityAlertPolicy_STATUSGenerator()
}

func Test_ManagedInstances_Databases_SecurityAlertPolicy_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstances_Databases_SecurityAlertPolicy_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstances_Databases_SecurityAlertPolicy_Spec, ManagedInstances_Databases_SecurityAlertPolicy_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstances_Databases_SecurityAlertPolicy_Spec runs a test to see if a specific instance of ManagedInstances_Databases_SecurityAlertPolicy_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstances_Databases_SecurityAlertPolicy_Spec(subject ManagedInstances_Databases_SecurityAlertPolicy_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstances_Databases_SecurityAlertPolicy_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstances_Databases_SecurityAlertPolicy_Spec instances for property testing - lazily instantiated
// by ManagedInstances_Databases_SecurityAlertPolicy_SpecGenerator()
var managedInstances_Databases_SecurityAlertPolicy_SpecGenerator gopter.Gen

// ManagedInstances_Databases_SecurityAlertPolicy_SpecGenerator returns a generator of ManagedInstances_Databases_SecurityAlertPolicy_Spec instances for property testing.
func ManagedInstances_Databases_SecurityAlertPolicy_SpecGenerator() gopter.Gen {
	if managedInstances_Databases_SecurityAlertPolicy_SpecGenerator != nil {
		return managedInstances_Databases_SecurityAlertPolicy_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy_Spec(generators)
	managedInstances_Databases_SecurityAlertPolicy_SpecGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_Databases_SecurityAlertPolicy_Spec{}), generators)

	return managedInstances_Databases_SecurityAlertPolicy_SpecGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy_Spec(gens map[string]gopter.Gen) {
	gens["DisabledAlerts"] = gen.SliceOf(gen.AlphaString())
	gens["EmailAccountAdmins"] = gen.PtrOf(gen.Bool())
	gens["EmailAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["RetentionDays"] = gen.PtrOf(gen.Int())
	gens["State"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountAccessKey"] = gen.PtrOf(gen.AlphaString())
	gens["StorageEndpoint"] = gen.PtrOf(gen.AlphaString())
}

func Test_ManagedInstances_Databases_SecurityAlertPolicy_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ManagedInstances_Databases_SecurityAlertPolicy_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForManagedInstances_Databases_SecurityAlertPolicy_STATUS, ManagedInstances_Databases_SecurityAlertPolicy_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForManagedInstances_Databases_SecurityAlertPolicy_STATUS runs a test to see if a specific instance of ManagedInstances_Databases_SecurityAlertPolicy_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForManagedInstances_Databases_SecurityAlertPolicy_STATUS(subject ManagedInstances_Databases_SecurityAlertPolicy_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ManagedInstances_Databases_SecurityAlertPolicy_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ManagedInstances_Databases_SecurityAlertPolicy_STATUS instances for property testing - lazily
// instantiated by ManagedInstances_Databases_SecurityAlertPolicy_STATUSGenerator()
var managedInstances_Databases_SecurityAlertPolicy_STATUSGenerator gopter.Gen

// ManagedInstances_Databases_SecurityAlertPolicy_STATUSGenerator returns a generator of ManagedInstances_Databases_SecurityAlertPolicy_STATUS instances for property testing.
func ManagedInstances_Databases_SecurityAlertPolicy_STATUSGenerator() gopter.Gen {
	if managedInstances_Databases_SecurityAlertPolicy_STATUSGenerator != nil {
		return managedInstances_Databases_SecurityAlertPolicy_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy_STATUS(generators)
	managedInstances_Databases_SecurityAlertPolicy_STATUSGenerator = gen.Struct(reflect.TypeOf(ManagedInstances_Databases_SecurityAlertPolicy_STATUS{}), generators)

	return managedInstances_Databases_SecurityAlertPolicy_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForManagedInstances_Databases_SecurityAlertPolicy_STATUS(gens map[string]gopter.Gen) {
	gens["CreationTime"] = gen.PtrOf(gen.AlphaString())
	gens["DisabledAlerts"] = gen.SliceOf(gen.AlphaString())
	gens["EmailAccountAdmins"] = gen.PtrOf(gen.Bool())
	gens["EmailAddresses"] = gen.SliceOf(gen.AlphaString())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["RetentionDays"] = gen.PtrOf(gen.Int())
	gens["State"] = gen.PtrOf(gen.AlphaString())
	gens["StorageAccountAccessKey"] = gen.PtrOf(gen.AlphaString())
	gens["StorageEndpoint"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}
