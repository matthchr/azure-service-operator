// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1beta20211101storage

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_Servers_Database_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 20
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_Database via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_Database, Servers_DatabaseGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_Database runs a test to see if a specific instance of Servers_Database round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_Database(subject Servers_Database) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_Database
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_Database instances for property testing - lazily instantiated by Servers_DatabaseGenerator()
var servers_DatabaseGenerator gopter.Gen

// Servers_DatabaseGenerator returns a generator of Servers_Database instances for property testing.
func Servers_DatabaseGenerator() gopter.Gen {
	if servers_DatabaseGenerator != nil {
		return servers_DatabaseGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForServers_Database(generators)
	servers_DatabaseGenerator = gen.Struct(reflect.TypeOf(Servers_Database{}), generators)

	return servers_DatabaseGenerator
}

// AddRelatedPropertyGeneratorsForServers_Database is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_Database(gens map[string]gopter.Gen) {
	gens["Spec"] = Servers_Database_SpecGenerator()
	gens["Status"] = Servers_Database_STATUSGenerator()
}

func Test_Servers_Database_Spec_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_Database_Spec via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_Database_Spec, Servers_Database_SpecGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_Database_Spec runs a test to see if a specific instance of Servers_Database_Spec round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_Database_Spec(subject Servers_Database_Spec) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_Database_Spec
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_Database_Spec instances for property testing - lazily instantiated by
// Servers_Database_SpecGenerator()
var servers_Database_SpecGenerator gopter.Gen

// Servers_Database_SpecGenerator returns a generator of Servers_Database_Spec instances for property testing.
// We first initialize servers_Database_SpecGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_Database_SpecGenerator() gopter.Gen {
	if servers_Database_SpecGenerator != nil {
		return servers_Database_SpecGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Database_Spec(generators)
	servers_Database_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_Database_Spec{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Database_Spec(generators)
	AddRelatedPropertyGeneratorsForServers_Database_Spec(generators)
	servers_Database_SpecGenerator = gen.Struct(reflect.TypeOf(Servers_Database_Spec{}), generators)

	return servers_Database_SpecGenerator
}

// AddIndependentPropertyGeneratorsForServers_Database_Spec is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_Database_Spec(gens map[string]gopter.Gen) {
	gens["AutoPauseDelay"] = gen.PtrOf(gen.Int())
	gens["AzureName"] = gen.AlphaString()
	gens["CatalogCollation"] = gen.PtrOf(gen.AlphaString())
	gens["Collation"] = gen.PtrOf(gen.AlphaString())
	gens["CreateMode"] = gen.PtrOf(gen.AlphaString())
	gens["FederatedClientId"] = gen.PtrOf(gen.AlphaString())
	gens["HighAvailabilityReplicaCount"] = gen.PtrOf(gen.Int())
	gens["IsLedgerOn"] = gen.PtrOf(gen.Bool())
	gens["LicenseType"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["MaintenanceConfigurationId"] = gen.PtrOf(gen.AlphaString())
	gens["MaxSizeBytes"] = gen.PtrOf(gen.Int())
	gens["MinCapacity"] = gen.PtrOf(gen.Float64())
	gens["OriginalVersion"] = gen.AlphaString()
	gens["ReadScale"] = gen.PtrOf(gen.AlphaString())
	gens["RequestedBackupStorageRedundancy"] = gen.PtrOf(gen.AlphaString())
	gens["RestorePointInTime"] = gen.PtrOf(gen.AlphaString())
	gens["SampleName"] = gen.PtrOf(gen.AlphaString())
	gens["SecondaryType"] = gen.PtrOf(gen.AlphaString())
	gens["SourceDatabaseDeletionDate"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["ZoneRedundant"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForServers_Database_Spec is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_Database_Spec(gens map[string]gopter.Gen) {
	gens["Identity"] = gen.PtrOf(DatabaseIdentityGenerator())
	gens["Sku"] = gen.PtrOf(SkuGenerator())
}

func Test_Servers_Database_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of Servers_Database_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForServers_Database_STATUS, Servers_Database_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForServers_Database_STATUS runs a test to see if a specific instance of Servers_Database_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForServers_Database_STATUS(subject Servers_Database_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual Servers_Database_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of Servers_Database_STATUS instances for property testing - lazily instantiated by
// Servers_Database_STATUSGenerator()
var servers_Database_STATUSGenerator gopter.Gen

// Servers_Database_STATUSGenerator returns a generator of Servers_Database_STATUS instances for property testing.
// We first initialize servers_Database_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func Servers_Database_STATUSGenerator() gopter.Gen {
	if servers_Database_STATUSGenerator != nil {
		return servers_Database_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Database_STATUS(generators)
	servers_Database_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_Database_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForServers_Database_STATUS(generators)
	AddRelatedPropertyGeneratorsForServers_Database_STATUS(generators)
	servers_Database_STATUSGenerator = gen.Struct(reflect.TypeOf(Servers_Database_STATUS{}), generators)

	return servers_Database_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForServers_Database_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForServers_Database_STATUS(gens map[string]gopter.Gen) {
	gens["AutoPauseDelay"] = gen.PtrOf(gen.Int())
	gens["CatalogCollation"] = gen.PtrOf(gen.AlphaString())
	gens["Collation"] = gen.PtrOf(gen.AlphaString())
	gens["CreateMode"] = gen.PtrOf(gen.AlphaString())
	gens["CreationDate"] = gen.PtrOf(gen.AlphaString())
	gens["CurrentBackupStorageRedundancy"] = gen.PtrOf(gen.AlphaString())
	gens["CurrentServiceObjectiveName"] = gen.PtrOf(gen.AlphaString())
	gens["DatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["DefaultSecondaryLocation"] = gen.PtrOf(gen.AlphaString())
	gens["EarliestRestoreDate"] = gen.PtrOf(gen.AlphaString())
	gens["ElasticPoolId"] = gen.PtrOf(gen.AlphaString())
	gens["FailoverGroupId"] = gen.PtrOf(gen.AlphaString())
	gens["FederatedClientId"] = gen.PtrOf(gen.AlphaString())
	gens["HighAvailabilityReplicaCount"] = gen.PtrOf(gen.Int())
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["IsInfraEncryptionEnabled"] = gen.PtrOf(gen.Bool())
	gens["IsLedgerOn"] = gen.PtrOf(gen.Bool())
	gens["Kind"] = gen.PtrOf(gen.AlphaString())
	gens["LicenseType"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["LongTermRetentionBackupResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["MaintenanceConfigurationId"] = gen.PtrOf(gen.AlphaString())
	gens["ManagedBy"] = gen.PtrOf(gen.AlphaString())
	gens["MaxLogSizeBytes"] = gen.PtrOf(gen.Int())
	gens["MaxSizeBytes"] = gen.PtrOf(gen.Int())
	gens["MinCapacity"] = gen.PtrOf(gen.Float64())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["PausedDate"] = gen.PtrOf(gen.AlphaString())
	gens["ReadScale"] = gen.PtrOf(gen.AlphaString())
	gens["RecoverableDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["RecoveryServicesRecoveryPointId"] = gen.PtrOf(gen.AlphaString())
	gens["RequestedBackupStorageRedundancy"] = gen.PtrOf(gen.AlphaString())
	gens["RequestedServiceObjectiveName"] = gen.PtrOf(gen.AlphaString())
	gens["RestorableDroppedDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["RestorePointInTime"] = gen.PtrOf(gen.AlphaString())
	gens["ResumedDate"] = gen.PtrOf(gen.AlphaString())
	gens["SampleName"] = gen.PtrOf(gen.AlphaString())
	gens["SecondaryType"] = gen.PtrOf(gen.AlphaString())
	gens["SourceDatabaseDeletionDate"] = gen.PtrOf(gen.AlphaString())
	gens["SourceDatabaseId"] = gen.PtrOf(gen.AlphaString())
	gens["SourceResourceId"] = gen.PtrOf(gen.AlphaString())
	gens["Status"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
	gens["ZoneRedundant"] = gen.PtrOf(gen.Bool())
}

// AddRelatedPropertyGeneratorsForServers_Database_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForServers_Database_STATUS(gens map[string]gopter.Gen) {
	gens["CurrentSku"] = gen.PtrOf(Sku_STATUSGenerator())
	gens["Identity"] = gen.PtrOf(DatabaseIdentity_STATUSGenerator())
	gens["Sku"] = gen.PtrOf(Sku_STATUSGenerator())
}

func Test_DatabaseIdentity_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseIdentity via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseIdentity, DatabaseIdentityGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseIdentity runs a test to see if a specific instance of DatabaseIdentity round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseIdentity(subject DatabaseIdentity) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseIdentity
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseIdentity instances for property testing - lazily instantiated by DatabaseIdentityGenerator()
var databaseIdentityGenerator gopter.Gen

// DatabaseIdentityGenerator returns a generator of DatabaseIdentity instances for property testing.
func DatabaseIdentityGenerator() gopter.Gen {
	if databaseIdentityGenerator != nil {
		return databaseIdentityGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseIdentity(generators)
	databaseIdentityGenerator = gen.Struct(reflect.TypeOf(DatabaseIdentity{}), generators)

	return databaseIdentityGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseIdentity is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseIdentity(gens map[string]gopter.Gen) {
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

func Test_DatabaseIdentity_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseIdentity_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseIdentity_STATUS, DatabaseIdentity_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseIdentity_STATUS runs a test to see if a specific instance of DatabaseIdentity_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseIdentity_STATUS(subject DatabaseIdentity_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseIdentity_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseIdentity_STATUS instances for property testing - lazily instantiated by
// DatabaseIdentity_STATUSGenerator()
var databaseIdentity_STATUSGenerator gopter.Gen

// DatabaseIdentity_STATUSGenerator returns a generator of DatabaseIdentity_STATUS instances for property testing.
// We first initialize databaseIdentity_STATUSGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func DatabaseIdentity_STATUSGenerator() gopter.Gen {
	if databaseIdentity_STATUSGenerator != nil {
		return databaseIdentity_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseIdentity_STATUS(generators)
	databaseIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(DatabaseIdentity_STATUS{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseIdentity_STATUS(generators)
	AddRelatedPropertyGeneratorsForDatabaseIdentity_STATUS(generators)
	databaseIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(DatabaseIdentity_STATUS{}), generators)

	return databaseIdentity_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseIdentity_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["TenantId"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForDatabaseIdentity_STATUS is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForDatabaseIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["UserAssignedIdentities"] = gen.MapOf(gen.AlphaString(), DatabaseUserIdentity_STATUSGenerator())
}

func Test_DatabaseUserIdentity_STATUS_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of DatabaseUserIdentity_STATUS via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForDatabaseUserIdentity_STATUS, DatabaseUserIdentity_STATUSGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForDatabaseUserIdentity_STATUS runs a test to see if a specific instance of DatabaseUserIdentity_STATUS round trips to JSON and back losslessly
func RunJSONSerializationTestForDatabaseUserIdentity_STATUS(subject DatabaseUserIdentity_STATUS) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual DatabaseUserIdentity_STATUS
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of DatabaseUserIdentity_STATUS instances for property testing - lazily instantiated by
// DatabaseUserIdentity_STATUSGenerator()
var databaseUserIdentity_STATUSGenerator gopter.Gen

// DatabaseUserIdentity_STATUSGenerator returns a generator of DatabaseUserIdentity_STATUS instances for property testing.
func DatabaseUserIdentity_STATUSGenerator() gopter.Gen {
	if databaseUserIdentity_STATUSGenerator != nil {
		return databaseUserIdentity_STATUSGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForDatabaseUserIdentity_STATUS(generators)
	databaseUserIdentity_STATUSGenerator = gen.Struct(reflect.TypeOf(DatabaseUserIdentity_STATUS{}), generators)

	return databaseUserIdentity_STATUSGenerator
}

// AddIndependentPropertyGeneratorsForDatabaseUserIdentity_STATUS is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForDatabaseUserIdentity_STATUS(gens map[string]gopter.Gen) {
	gens["ClientId"] = gen.PtrOf(gen.AlphaString())
	gens["PrincipalId"] = gen.PtrOf(gen.AlphaString())
}
