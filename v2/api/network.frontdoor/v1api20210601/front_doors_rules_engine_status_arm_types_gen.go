// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210601

import "encoding/json"

type FrontDoors_RulesEngine_STATUS_ARM struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the Rules Engine Configuration.
	Properties *RulesEngineProperties_STATUS_ARM `json:"properties,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`
}

// The JSON object that contains the properties required to create a Rules Engine Configuration.
type RulesEngineProperties_STATUS_ARM struct {
	// ResourceState: Resource status.
	ResourceState *ResourceState_STATUS `json:"resourceState,omitempty"`

	// Rules: A list of rules that define a particular Rules Engine Configuration.
	Rules []RulesEngineRule_STATUS_ARM `json:"rules,omitempty"`
}

// Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the
// actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of
// headers manipulation.
type RulesEngineRule_STATUS_ARM struct {
	// Action: Actions to perform on the request and response if all of the match conditions are met.
	Action *RulesEngineAction_STATUS_ARM `json:"action,omitempty"`

	// MatchConditions: A list of match conditions that must meet in order for the actions of this rule to run. Having no match
	// conditions means the actions will always run.
	MatchConditions []RulesEngineMatchCondition_STATUS_ARM `json:"matchConditions,omitempty"`

	// MatchProcessingBehavior: If this rule is a match should the rules engine continue running the remaining rules or stop.
	// If not present, defaults to Continue.
	MatchProcessingBehavior *RulesEngineRule_MatchProcessingBehavior_STATUS `json:"matchProcessingBehavior,omitempty"`

	// Name: A name to refer to this specific rule.
	Name *string `json:"name,omitempty"`

	// Priority: A priority assigned to this rule.
	Priority *int `json:"priority,omitempty"`
}

// One or more actions that will execute, modifying the request and/or response.
type RulesEngineAction_STATUS_ARM struct {
	// RequestHeaderActions: A list of header actions to apply from the request from AFD to the origin.
	RequestHeaderActions []HeaderAction_STATUS_ARM `json:"requestHeaderActions,omitempty"`

	// ResponseHeaderActions: A list of header actions to apply from the response from AFD to the client.
	ResponseHeaderActions []HeaderAction_STATUS_ARM `json:"responseHeaderActions,omitempty"`

	// RouteConfigurationOverride: Override the route configuration.
	RouteConfigurationOverride *RouteConfiguration_STATUS_ARM `json:"routeConfigurationOverride,omitempty"`
}

// Define a match condition
type RulesEngineMatchCondition_STATUS_ARM struct {
	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// RulesEngineMatchValue: Match values to match against. The operator will apply to each value in here with OR semantics.
	// If any of them match the variable with the given operator this match condition is considered a match.
	RulesEngineMatchValue []string `json:"rulesEngineMatchValue,omitempty"`

	// RulesEngineMatchVariable: Match Variable
	RulesEngineMatchVariable *RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS `json:"rulesEngineMatchVariable,omitempty"`

	// RulesEngineOperator: Describes operator to apply to the match condition.
	RulesEngineOperator *RulesEngineMatchCondition_RulesEngineOperator_STATUS `json:"rulesEngineOperator,omitempty"`

	// Selector: Name of selector in RequestHeader or RequestBody to be matched
	Selector *string `json:"selector,omitempty"`

	// Transforms: List of transforms
	Transforms []Transform_STATUS `json:"transforms,omitempty"`
}

type RulesEngineRule_MatchProcessingBehavior_STATUS string

const (
	RulesEngineRule_MatchProcessingBehavior_STATUS_Continue = RulesEngineRule_MatchProcessingBehavior_STATUS("Continue")
	RulesEngineRule_MatchProcessingBehavior_STATUS_Stop     = RulesEngineRule_MatchProcessingBehavior_STATUS("Stop")
)

// An action that can manipulate an http header.
type HeaderAction_STATUS_ARM struct {
	// HeaderActionType: Which type of manipulation to apply to the header.
	HeaderActionType *HeaderAction_HeaderActionType_STATUS `json:"headerActionType,omitempty"`

	// HeaderName: The name of the header this action will apply to.
	HeaderName *string `json:"headerName,omitempty"`

	// Value: The value to update the given header name with. This value is not used if the actionType is Delete.
	Value *string `json:"value,omitempty"`
}

type RouteConfiguration_STATUS_ARM struct {
	// MicrosoftAzureFrontDoorModelsFrontdoorForwarding: Mutually exclusive with all other properties
	MicrosoftAzureFrontDoorModelsFrontdoorForwarding *ForwardingConfiguration_STATUS_ARM `json:"microsoftAzureFrontDoorModelsFrontdoorForwardingConfiguration,omitempty"`

	// MicrosoftAzureFrontDoorModelsFrontdoorRedirect: Mutually exclusive with all other properties
	MicrosoftAzureFrontDoorModelsFrontdoorRedirect *RedirectConfiguration_STATUS_ARM `json:"microsoftAzureFrontDoorModelsFrontdoorRedirectConfiguration,omitempty"`
}

// MarshalJSON defers JSON marshaling to the first non-nil property, because RouteConfiguration_STATUS_ARM represents a discriminated union (JSON OneOf)
func (configuration RouteConfiguration_STATUS_ARM) MarshalJSON() ([]byte, error) {
	if configuration.MicrosoftAzureFrontDoorModelsFrontdoorForwarding != nil {
		return json.Marshal(configuration.MicrosoftAzureFrontDoorModelsFrontdoorForwarding)
	}
	if configuration.MicrosoftAzureFrontDoorModelsFrontdoorRedirect != nil {
		return json.Marshal(configuration.MicrosoftAzureFrontDoorModelsFrontdoorRedirect)
	}
	return nil, nil
}

// UnmarshalJSON unmarshals the RouteConfiguration_STATUS_ARM
func (configuration *RouteConfiguration_STATUS_ARM) UnmarshalJSON(data []byte) error {
	var rawJson map[string]interface{}
	err := json.Unmarshal(data, &rawJson)
	if err != nil {
		return err
	}
	discriminator := rawJson["@odata.type"]
	if discriminator == "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration" {
		configuration.MicrosoftAzureFrontDoorModelsFrontdoorForwarding = &ForwardingConfiguration_STATUS_ARM{}
		return json.Unmarshal(data, configuration.MicrosoftAzureFrontDoorModelsFrontdoorForwarding)
	}
	if discriminator == "#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration" {
		configuration.MicrosoftAzureFrontDoorModelsFrontdoorRedirect = &RedirectConfiguration_STATUS_ARM{}
		return json.Unmarshal(data, configuration.MicrosoftAzureFrontDoorModelsFrontdoorRedirect)
	}

	// No error
	return nil
}

type RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS string

const (
	RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_IsMobile                 = RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS("IsMobile")
	RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_PostArgs                 = RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS("PostArgs")
	RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_QueryString              = RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS("QueryString")
	RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RemoteAddr               = RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS("RemoteAddr")
	RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestBody              = RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS("RequestBody")
	RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestFilename          = RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS("RequestFilename")
	RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestFilenameExtension = RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS("RequestFilenameExtension")
	RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestHeader            = RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS("RequestHeader")
	RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestMethod            = RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS("RequestMethod")
	RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestPath              = RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS("RequestPath")
	RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestScheme            = RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS("RequestScheme")
	RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestUri               = RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS("RequestUri")
)

type RulesEngineMatchCondition_RulesEngineOperator_STATUS string

const (
	RulesEngineMatchCondition_RulesEngineOperator_STATUS_Any                = RulesEngineMatchCondition_RulesEngineOperator_STATUS("Any")
	RulesEngineMatchCondition_RulesEngineOperator_STATUS_BeginsWith         = RulesEngineMatchCondition_RulesEngineOperator_STATUS("BeginsWith")
	RulesEngineMatchCondition_RulesEngineOperator_STATUS_Contains           = RulesEngineMatchCondition_RulesEngineOperator_STATUS("Contains")
	RulesEngineMatchCondition_RulesEngineOperator_STATUS_EndsWith           = RulesEngineMatchCondition_RulesEngineOperator_STATUS("EndsWith")
	RulesEngineMatchCondition_RulesEngineOperator_STATUS_Equal              = RulesEngineMatchCondition_RulesEngineOperator_STATUS("Equal")
	RulesEngineMatchCondition_RulesEngineOperator_STATUS_GeoMatch           = RulesEngineMatchCondition_RulesEngineOperator_STATUS("GeoMatch")
	RulesEngineMatchCondition_RulesEngineOperator_STATUS_GreaterThan        = RulesEngineMatchCondition_RulesEngineOperator_STATUS("GreaterThan")
	RulesEngineMatchCondition_RulesEngineOperator_STATUS_GreaterThanOrEqual = RulesEngineMatchCondition_RulesEngineOperator_STATUS("GreaterThanOrEqual")
	RulesEngineMatchCondition_RulesEngineOperator_STATUS_IPMatch            = RulesEngineMatchCondition_RulesEngineOperator_STATUS("IPMatch")
	RulesEngineMatchCondition_RulesEngineOperator_STATUS_LessThan           = RulesEngineMatchCondition_RulesEngineOperator_STATUS("LessThan")
	RulesEngineMatchCondition_RulesEngineOperator_STATUS_LessThanOrEqual    = RulesEngineMatchCondition_RulesEngineOperator_STATUS("LessThanOrEqual")
)

// Describes what transforms are applied before matching
type Transform_STATUS string

const (
	Transform_STATUS_Lowercase   = Transform_STATUS("Lowercase")
	Transform_STATUS_RemoveNulls = Transform_STATUS("RemoveNulls")
	Transform_STATUS_Trim        = Transform_STATUS("Trim")
	Transform_STATUS_Uppercase   = Transform_STATUS("Uppercase")
	Transform_STATUS_UrlDecode   = Transform_STATUS("UrlDecode")
	Transform_STATUS_UrlEncode   = Transform_STATUS("UrlEncode")
)

type ForwardingConfiguration_STATUS_ARM struct {
	// BackendPool: A reference to the BackendPool which this rule routes to.
	BackendPool *SubResource_STATUS_ARM `json:"backendPool,omitempty"`

	// CacheConfiguration: The caching configuration associated with this rule.
	CacheConfiguration *CacheConfiguration_STATUS_ARM `json:"cacheConfiguration,omitempty"`

	// CustomForwardingPath: A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming
	// path.
	CustomForwardingPath *string `json:"customForwardingPath,omitempty"`

	// ForwardingProtocol: Protocol this rule will use when forwarding traffic to backends.
	ForwardingProtocol *ForwardingConfiguration_ForwardingProtocol_STATUS `json:"forwardingProtocol,omitempty"`
	OdataType          ForwardingConfiguration_OdataType_STATUS           `json:"@odata.type,omitempty"`
}

type HeaderAction_HeaderActionType_STATUS string

const (
	HeaderAction_HeaderActionType_STATUS_Append    = HeaderAction_HeaderActionType_STATUS("Append")
	HeaderAction_HeaderActionType_STATUS_Delete    = HeaderAction_HeaderActionType_STATUS("Delete")
	HeaderAction_HeaderActionType_STATUS_Overwrite = HeaderAction_HeaderActionType_STATUS("Overwrite")
)

type RedirectConfiguration_STATUS_ARM struct {
	// CustomFragment: Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include
	// the #.
	CustomFragment *string `json:"customFragment,omitempty"`

	// CustomHost: Host to redirect. Leave empty to use the incoming host as the destination host.
	CustomHost *string `json:"customHost,omitempty"`

	// CustomPath: The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path
	// as destination path.
	CustomPath *string `json:"customPath,omitempty"`

	// CustomQueryString: The set of query strings to be placed in the redirect URL. Setting this value would replace any
	// existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format.
	// The first ? and & will be added automatically so do not include them in the front, but do separate multiple query
	// strings with &.
	CustomQueryString *string                                `json:"customQueryString,omitempty"`
	OdataType         RedirectConfiguration_OdataType_STATUS `json:"@odata.type,omitempty"`

	// RedirectProtocol: The protocol of the destination to where the traffic is redirected
	RedirectProtocol *RedirectConfiguration_RedirectProtocol_STATUS `json:"redirectProtocol,omitempty"`

	// RedirectType: The redirect type the rule will use when redirecting traffic.
	RedirectType *RedirectConfiguration_RedirectType_STATUS `json:"redirectType,omitempty"`
}

// Caching settings for a caching-type route. To disable caching, do not provide a cacheConfiguration object.
type CacheConfiguration_STATUS_ARM struct {
	// CacheDuration: The duration for which the content needs to be cached. Allowed format is in ISO 8601 format
	// (http://en.wikipedia.org/wiki/ISO_8601#Durations). HTTP requires the value to be no more than a year
	CacheDuration *string `json:"cacheDuration,omitempty"`

	// DynamicCompression: Whether to use dynamic compression for cached content
	DynamicCompression *CacheConfiguration_DynamicCompression_STATUS `json:"dynamicCompression,omitempty"`

	// QueryParameterStripDirective: Treatment of URL query terms when forming the cache key.
	QueryParameterStripDirective *CacheConfiguration_QueryParameterStripDirective_STATUS `json:"queryParameterStripDirective,omitempty"`

	// QueryParameters: query parameters to include or exclude (comma separated).
	QueryParameters *string `json:"queryParameters,omitempty"`
}

// Reference to another subresource.
type SubResource_STATUS_ARM struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`
}
