// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FrontDoor_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontDoor_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontDoor_STATUS_ARM, FrontDoor_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontDoor_STATUS_ARM runs a test to see if a specific instance of FrontDoor_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontDoor_STATUS_ARM(subject FrontDoor_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontDoor_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontDoor_STATUS_ARM instances for property testing - lazily instantiated by
// FrontDoor_STATUS_ARMGenerator()
var frontDoor_STATUS_ARMGenerator gopter.Gen

// FrontDoor_STATUS_ARMGenerator returns a generator of FrontDoor_STATUS_ARM instances for property testing.
// We first initialize frontDoor_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontDoor_STATUS_ARMGenerator() gopter.Gen {
	if frontDoor_STATUS_ARMGenerator != nil {
		return frontDoor_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontDoor_STATUS_ARM(generators)
	frontDoor_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FrontDoor_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontDoor_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForFrontDoor_STATUS_ARM(generators)
	frontDoor_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FrontDoor_STATUS_ARM{}), generators)

	return frontDoor_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontDoor_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontDoor_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Location"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Tags"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFrontDoor_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontDoor_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(FrontDoorProperties_STATUS_ARMGenerator())
}

func Test_FrontDoorProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontDoorProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontDoorProperties_STATUS_ARM, FrontDoorProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontDoorProperties_STATUS_ARM runs a test to see if a specific instance of FrontDoorProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontDoorProperties_STATUS_ARM(subject FrontDoorProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontDoorProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontDoorProperties_STATUS_ARM instances for property testing - lazily instantiated by
// FrontDoorProperties_STATUS_ARMGenerator()
var frontDoorProperties_STATUS_ARMGenerator gopter.Gen

// FrontDoorProperties_STATUS_ARMGenerator returns a generator of FrontDoorProperties_STATUS_ARM instances for property testing.
// We first initialize frontDoorProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontDoorProperties_STATUS_ARMGenerator() gopter.Gen {
	if frontDoorProperties_STATUS_ARMGenerator != nil {
		return frontDoorProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontDoorProperties_STATUS_ARM(generators)
	frontDoorProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FrontDoorProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontDoorProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForFrontDoorProperties_STATUS_ARM(generators)
	frontDoorProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FrontDoorProperties_STATUS_ARM{}), generators)

	return frontDoorProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontDoorProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontDoorProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Cname"] = gen.PtrOf(gen.AlphaString())
	gens["EnabledState"] = gen.PtrOf(gen.OneConstOf(FrontDoorProperties_EnabledState_STATUS_Disabled, FrontDoorProperties_EnabledState_STATUS_Enabled))
	gens["ExtendedProperties"] = gen.MapOf(gen.AlphaString(), gen.AlphaString())
	gens["FriendlyName"] = gen.PtrOf(gen.AlphaString())
	gens["FrontdoorId"] = gen.PtrOf(gen.AlphaString())
	gens["ProvisioningState"] = gen.PtrOf(gen.AlphaString())
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		ResourceState_STATUS_Creating,
		ResourceState_STATUS_Deleting,
		ResourceState_STATUS_Disabled,
		ResourceState_STATUS_Disabling,
		ResourceState_STATUS_Enabled,
		ResourceState_STATUS_Enabling,
		ResourceState_STATUS_Migrated,
		ResourceState_STATUS_Migrating))
}

// AddRelatedPropertyGeneratorsForFrontDoorProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontDoorProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BackendPools"] = gen.SliceOf(BackendPool_STATUS_ARMGenerator())
	gens["BackendPoolsSettings"] = gen.PtrOf(BackendPoolsSettings_STATUS_ARMGenerator())
	gens["FrontendEndpoints"] = gen.SliceOf(FrontendEndpoint_STATUS_ARMGenerator())
	gens["HealthProbeSettings"] = gen.SliceOf(HealthProbeSettingsModel_STATUS_ARMGenerator())
	gens["LoadBalancingSettings"] = gen.SliceOf(LoadBalancingSettingsModel_STATUS_ARMGenerator())
	gens["RoutingRules"] = gen.SliceOf(RoutingRule_STATUS_ARMGenerator())
	gens["RulesEngines"] = gen.SliceOf(RulesEngine_STATUS_ARMGenerator())
}

func Test_BackendPool_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendPool_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendPool_STATUS_ARM, BackendPool_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendPool_STATUS_ARM runs a test to see if a specific instance of BackendPool_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendPool_STATUS_ARM(subject BackendPool_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendPool_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendPool_STATUS_ARM instances for property testing - lazily instantiated by
// BackendPool_STATUS_ARMGenerator()
var backendPool_STATUS_ARMGenerator gopter.Gen

// BackendPool_STATUS_ARMGenerator returns a generator of BackendPool_STATUS_ARM instances for property testing.
func BackendPool_STATUS_ARMGenerator() gopter.Gen {
	if backendPool_STATUS_ARMGenerator != nil {
		return backendPool_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendPool_STATUS_ARM(generators)
	backendPool_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackendPool_STATUS_ARM{}), generators)

	return backendPool_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendPool_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendPool_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_BackendPoolsSettings_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of BackendPoolsSettings_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForBackendPoolsSettings_STATUS_ARM, BackendPoolsSettings_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForBackendPoolsSettings_STATUS_ARM runs a test to see if a specific instance of BackendPoolsSettings_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForBackendPoolsSettings_STATUS_ARM(subject BackendPoolsSettings_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual BackendPoolsSettings_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of BackendPoolsSettings_STATUS_ARM instances for property testing - lazily instantiated by
// BackendPoolsSettings_STATUS_ARMGenerator()
var backendPoolsSettings_STATUS_ARMGenerator gopter.Gen

// BackendPoolsSettings_STATUS_ARMGenerator returns a generator of BackendPoolsSettings_STATUS_ARM instances for property testing.
func BackendPoolsSettings_STATUS_ARMGenerator() gopter.Gen {
	if backendPoolsSettings_STATUS_ARMGenerator != nil {
		return backendPoolsSettings_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForBackendPoolsSettings_STATUS_ARM(generators)
	backendPoolsSettings_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(BackendPoolsSettings_STATUS_ARM{}), generators)

	return backendPoolsSettings_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForBackendPoolsSettings_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForBackendPoolsSettings_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["EnforceCertificateNameCheck"] = gen.PtrOf(gen.OneConstOf(BackendPoolsSettings_EnforceCertificateNameCheck_STATUS_Disabled, BackendPoolsSettings_EnforceCertificateNameCheck_STATUS_Enabled))
	gens["SendRecvTimeoutSeconds"] = gen.PtrOf(gen.Int())
}

func Test_FrontendEndpoint_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontendEndpoint_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontendEndpoint_STATUS_ARM, FrontendEndpoint_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontendEndpoint_STATUS_ARM runs a test to see if a specific instance of FrontendEndpoint_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontendEndpoint_STATUS_ARM(subject FrontendEndpoint_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontendEndpoint_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontendEndpoint_STATUS_ARM instances for property testing - lazily instantiated by
// FrontendEndpoint_STATUS_ARMGenerator()
var frontendEndpoint_STATUS_ARMGenerator gopter.Gen

// FrontendEndpoint_STATUS_ARMGenerator returns a generator of FrontendEndpoint_STATUS_ARM instances for property testing.
func FrontendEndpoint_STATUS_ARMGenerator() gopter.Gen {
	if frontendEndpoint_STATUS_ARMGenerator != nil {
		return frontendEndpoint_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontendEndpoint_STATUS_ARM(generators)
	frontendEndpoint_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FrontendEndpoint_STATUS_ARM{}), generators)

	return frontendEndpoint_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontendEndpoint_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontendEndpoint_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_HealthProbeSettingsModel_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HealthProbeSettingsModel_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHealthProbeSettingsModel_STATUS_ARM, HealthProbeSettingsModel_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHealthProbeSettingsModel_STATUS_ARM runs a test to see if a specific instance of HealthProbeSettingsModel_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHealthProbeSettingsModel_STATUS_ARM(subject HealthProbeSettingsModel_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HealthProbeSettingsModel_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HealthProbeSettingsModel_STATUS_ARM instances for property testing - lazily instantiated by
// HealthProbeSettingsModel_STATUS_ARMGenerator()
var healthProbeSettingsModel_STATUS_ARMGenerator gopter.Gen

// HealthProbeSettingsModel_STATUS_ARMGenerator returns a generator of HealthProbeSettingsModel_STATUS_ARM instances for property testing.
func HealthProbeSettingsModel_STATUS_ARMGenerator() gopter.Gen {
	if healthProbeSettingsModel_STATUS_ARMGenerator != nil {
		return healthProbeSettingsModel_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHealthProbeSettingsModel_STATUS_ARM(generators)
	healthProbeSettingsModel_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HealthProbeSettingsModel_STATUS_ARM{}), generators)

	return healthProbeSettingsModel_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHealthProbeSettingsModel_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHealthProbeSettingsModel_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_LoadBalancingSettingsModel_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of LoadBalancingSettingsModel_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForLoadBalancingSettingsModel_STATUS_ARM, LoadBalancingSettingsModel_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForLoadBalancingSettingsModel_STATUS_ARM runs a test to see if a specific instance of LoadBalancingSettingsModel_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForLoadBalancingSettingsModel_STATUS_ARM(subject LoadBalancingSettingsModel_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual LoadBalancingSettingsModel_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of LoadBalancingSettingsModel_STATUS_ARM instances for property testing - lazily instantiated by
// LoadBalancingSettingsModel_STATUS_ARMGenerator()
var loadBalancingSettingsModel_STATUS_ARMGenerator gopter.Gen

// LoadBalancingSettingsModel_STATUS_ARMGenerator returns a generator of LoadBalancingSettingsModel_STATUS_ARM instances for property testing.
func LoadBalancingSettingsModel_STATUS_ARMGenerator() gopter.Gen {
	if loadBalancingSettingsModel_STATUS_ARMGenerator != nil {
		return loadBalancingSettingsModel_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForLoadBalancingSettingsModel_STATUS_ARM(generators)
	loadBalancingSettingsModel_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(LoadBalancingSettingsModel_STATUS_ARM{}), generators)

	return loadBalancingSettingsModel_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForLoadBalancingSettingsModel_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForLoadBalancingSettingsModel_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_RoutingRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RoutingRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRoutingRule_STATUS_ARM, RoutingRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRoutingRule_STATUS_ARM runs a test to see if a specific instance of RoutingRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRoutingRule_STATUS_ARM(subject RoutingRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RoutingRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RoutingRule_STATUS_ARM instances for property testing - lazily instantiated by
// RoutingRule_STATUS_ARMGenerator()
var routingRule_STATUS_ARMGenerator gopter.Gen

// RoutingRule_STATUS_ARMGenerator returns a generator of RoutingRule_STATUS_ARM instances for property testing.
func RoutingRule_STATUS_ARMGenerator() gopter.Gen {
	if routingRule_STATUS_ARMGenerator != nil {
		return routingRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRoutingRule_STATUS_ARM(generators)
	routingRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RoutingRule_STATUS_ARM{}), generators)

	return routingRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRoutingRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRoutingRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}

func Test_RulesEngine_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RulesEngine_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRulesEngine_STATUS_ARM, RulesEngine_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRulesEngine_STATUS_ARM runs a test to see if a specific instance of RulesEngine_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRulesEngine_STATUS_ARM(subject RulesEngine_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RulesEngine_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RulesEngine_STATUS_ARM instances for property testing - lazily instantiated by
// RulesEngine_STATUS_ARMGenerator()
var rulesEngine_STATUS_ARMGenerator gopter.Gen

// RulesEngine_STATUS_ARMGenerator returns a generator of RulesEngine_STATUS_ARM instances for property testing.
func RulesEngine_STATUS_ARMGenerator() gopter.Gen {
	if rulesEngine_STATUS_ARMGenerator != nil {
		return rulesEngine_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRulesEngine_STATUS_ARM(generators)
	rulesEngine_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RulesEngine_STATUS_ARM{}), generators)

	return rulesEngine_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRulesEngine_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRulesEngine_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
