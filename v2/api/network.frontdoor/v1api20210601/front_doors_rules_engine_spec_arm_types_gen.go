// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210601

import "github.com/Azure/azure-service-operator/v2/pkg/genruntime"

type FrontDoors_RulesEngine_Spec_ARM struct {
	Name string `json:"name,omitempty"`

	// Properties: Properties of the Rules Engine Configuration.
	Properties *RulesEngineProperties_ARM `json:"properties,omitempty"`
}

var _ genruntime.ARMResourceSpec = &FrontDoors_RulesEngine_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-06-01"
func (engine FrontDoors_RulesEngine_Spec_ARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (engine *FrontDoors_RulesEngine_Spec_ARM) GetName() string {
	return engine.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/frontDoors/rulesEngines"
func (engine *FrontDoors_RulesEngine_Spec_ARM) GetType() string {
	return "Microsoft.Network/frontDoors/rulesEngines"
}

// The JSON object that contains the properties required to create a Rules Engine Configuration.
type RulesEngineProperties_ARM struct {
	// Rules: A list of rules that define a particular Rules Engine Configuration.
	Rules []RulesEngineRule_ARM `json:"rules,omitempty"`
}

// Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the
// actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of
// headers manipulation.
type RulesEngineRule_ARM struct {
	// Action: Actions to perform on the request and response if all of the match conditions are met.
	Action *RulesEngineAction_ARM `json:"action,omitempty"`

	// MatchConditions: A list of match conditions that must meet in order for the actions of this rule to run. Having no match
	// conditions means the actions will always run.
	MatchConditions []RulesEngineMatchCondition_ARM `json:"matchConditions,omitempty"`

	// MatchProcessingBehavior: If this rule is a match should the rules engine continue running the remaining rules or stop.
	// If not present, defaults to Continue.
	MatchProcessingBehavior *RulesEngineRule_MatchProcessingBehavior `json:"matchProcessingBehavior,omitempty"`

	// Name: A name to refer to this specific rule.
	Name *string `json:"name,omitempty"`

	// Priority: A priority assigned to this rule.
	Priority *int `json:"priority,omitempty"`
}

// One or more actions that will execute, modifying the request and/or response.
type RulesEngineAction_ARM struct {
	// RequestHeaderActions: A list of header actions to apply from the request from AFD to the origin.
	RequestHeaderActions []HeaderAction_ARM `json:"requestHeaderActions,omitempty"`

	// ResponseHeaderActions: A list of header actions to apply from the response from AFD to the client.
	ResponseHeaderActions []HeaderAction_ARM `json:"responseHeaderActions,omitempty"`

	// RouteConfigurationOverride: Override the route configuration.
	RouteConfigurationOverride *RouteConfiguration_ARM `json:"routeConfigurationOverride,omitempty"`
}

// Define a match condition
type RulesEngineMatchCondition_ARM struct {
	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// RulesEngineMatchValue: Match values to match against. The operator will apply to each value in here with OR semantics.
	// If any of them match the variable with the given operator this match condition is considered a match.
	RulesEngineMatchValue []string `json:"rulesEngineMatchValue,omitempty"`

	// RulesEngineMatchVariable: Match Variable
	RulesEngineMatchVariable *RulesEngineMatchCondition_RulesEngineMatchVariable `json:"rulesEngineMatchVariable,omitempty"`

	// RulesEngineOperator: Describes operator to apply to the match condition.
	RulesEngineOperator *RulesEngineMatchCondition_RulesEngineOperator `json:"rulesEngineOperator,omitempty"`

	// Selector: Name of selector in RequestHeader or RequestBody to be matched
	Selector *string `json:"selector,omitempty"`

	// Transforms: List of transforms
	Transforms []Transform `json:"transforms,omitempty"`
}

// +kubebuilder:validation:Enum={"Continue","Stop"}
type RulesEngineRule_MatchProcessingBehavior string

const (
	RulesEngineRule_MatchProcessingBehavior_Continue = RulesEngineRule_MatchProcessingBehavior("Continue")
	RulesEngineRule_MatchProcessingBehavior_Stop     = RulesEngineRule_MatchProcessingBehavior("Stop")
)

// An action that can manipulate an http header.
type HeaderAction_ARM struct {
	// HeaderActionType: Which type of manipulation to apply to the header.
	HeaderActionType *HeaderAction_HeaderActionType `json:"headerActionType,omitempty"`

	// HeaderName: The name of the header this action will apply to.
	HeaderName *string `json:"headerName,omitempty"`

	// Value: The value to update the given header name with. This value is not used if the actionType is Delete.
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:validation:Enum={"IsMobile","PostArgs","QueryString","RemoteAddr","RequestBody","RequestFilename","RequestFilenameExtension","RequestHeader","RequestMethod","RequestPath","RequestScheme","RequestUri"}
type RulesEngineMatchCondition_RulesEngineMatchVariable string

const (
	RulesEngineMatchCondition_RulesEngineMatchVariable_IsMobile                 = RulesEngineMatchCondition_RulesEngineMatchVariable("IsMobile")
	RulesEngineMatchCondition_RulesEngineMatchVariable_PostArgs                 = RulesEngineMatchCondition_RulesEngineMatchVariable("PostArgs")
	RulesEngineMatchCondition_RulesEngineMatchVariable_QueryString              = RulesEngineMatchCondition_RulesEngineMatchVariable("QueryString")
	RulesEngineMatchCondition_RulesEngineMatchVariable_RemoteAddr               = RulesEngineMatchCondition_RulesEngineMatchVariable("RemoteAddr")
	RulesEngineMatchCondition_RulesEngineMatchVariable_RequestBody              = RulesEngineMatchCondition_RulesEngineMatchVariable("RequestBody")
	RulesEngineMatchCondition_RulesEngineMatchVariable_RequestFilename          = RulesEngineMatchCondition_RulesEngineMatchVariable("RequestFilename")
	RulesEngineMatchCondition_RulesEngineMatchVariable_RequestFilenameExtension = RulesEngineMatchCondition_RulesEngineMatchVariable("RequestFilenameExtension")
	RulesEngineMatchCondition_RulesEngineMatchVariable_RequestHeader            = RulesEngineMatchCondition_RulesEngineMatchVariable("RequestHeader")
	RulesEngineMatchCondition_RulesEngineMatchVariable_RequestMethod            = RulesEngineMatchCondition_RulesEngineMatchVariable("RequestMethod")
	RulesEngineMatchCondition_RulesEngineMatchVariable_RequestPath              = RulesEngineMatchCondition_RulesEngineMatchVariable("RequestPath")
	RulesEngineMatchCondition_RulesEngineMatchVariable_RequestScheme            = RulesEngineMatchCondition_RulesEngineMatchVariable("RequestScheme")
	RulesEngineMatchCondition_RulesEngineMatchVariable_RequestUri               = RulesEngineMatchCondition_RulesEngineMatchVariable("RequestUri")
)

// +kubebuilder:validation:Enum={"Any","BeginsWith","Contains","EndsWith","Equal","GeoMatch","GreaterThan","GreaterThanOrEqual","IPMatch","LessThan","LessThanOrEqual"}
type RulesEngineMatchCondition_RulesEngineOperator string

const (
	RulesEngineMatchCondition_RulesEngineOperator_Any                = RulesEngineMatchCondition_RulesEngineOperator("Any")
	RulesEngineMatchCondition_RulesEngineOperator_BeginsWith         = RulesEngineMatchCondition_RulesEngineOperator("BeginsWith")
	RulesEngineMatchCondition_RulesEngineOperator_Contains           = RulesEngineMatchCondition_RulesEngineOperator("Contains")
	RulesEngineMatchCondition_RulesEngineOperator_EndsWith           = RulesEngineMatchCondition_RulesEngineOperator("EndsWith")
	RulesEngineMatchCondition_RulesEngineOperator_Equal              = RulesEngineMatchCondition_RulesEngineOperator("Equal")
	RulesEngineMatchCondition_RulesEngineOperator_GeoMatch           = RulesEngineMatchCondition_RulesEngineOperator("GeoMatch")
	RulesEngineMatchCondition_RulesEngineOperator_GreaterThan        = RulesEngineMatchCondition_RulesEngineOperator("GreaterThan")
	RulesEngineMatchCondition_RulesEngineOperator_GreaterThanOrEqual = RulesEngineMatchCondition_RulesEngineOperator("GreaterThanOrEqual")
	RulesEngineMatchCondition_RulesEngineOperator_IPMatch            = RulesEngineMatchCondition_RulesEngineOperator("IPMatch")
	RulesEngineMatchCondition_RulesEngineOperator_LessThan           = RulesEngineMatchCondition_RulesEngineOperator("LessThan")
	RulesEngineMatchCondition_RulesEngineOperator_LessThanOrEqual    = RulesEngineMatchCondition_RulesEngineOperator("LessThanOrEqual")
)

// Describes what transforms are applied before matching
// +kubebuilder:validation:Enum={"Lowercase","RemoveNulls","Trim","Uppercase","UrlDecode","UrlEncode"}
type Transform string

const (
	Transform_Lowercase   = Transform("Lowercase")
	Transform_RemoveNulls = Transform("RemoveNulls")
	Transform_Trim        = Transform("Trim")
	Transform_Uppercase   = Transform("Uppercase")
	Transform_UrlDecode   = Transform("UrlDecode")
	Transform_UrlEncode   = Transform("UrlEncode")
)

// +kubebuilder:validation:Enum={"Append","Delete","Overwrite"}
type HeaderAction_HeaderActionType string

const (
	HeaderAction_HeaderActionType_Append    = HeaderAction_HeaderActionType("Append")
	HeaderAction_HeaderActionType_Delete    = HeaderAction_HeaderActionType("Delete")
	HeaderAction_HeaderActionType_Overwrite = HeaderAction_HeaderActionType("Overwrite")
)
