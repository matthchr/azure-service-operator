// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FrontDoors_RulesEngine_Spec_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontDoors_RulesEngine_Spec_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontDoors_RulesEngine_Spec_ARM, FrontDoors_RulesEngine_Spec_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontDoors_RulesEngine_Spec_ARM runs a test to see if a specific instance of FrontDoors_RulesEngine_Spec_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontDoors_RulesEngine_Spec_ARM(subject FrontDoors_RulesEngine_Spec_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontDoors_RulesEngine_Spec_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontDoors_RulesEngine_Spec_ARM instances for property testing - lazily instantiated by
// FrontDoors_RulesEngine_Spec_ARMGenerator()
var frontDoors_RulesEngine_Spec_ARMGenerator gopter.Gen

// FrontDoors_RulesEngine_Spec_ARMGenerator returns a generator of FrontDoors_RulesEngine_Spec_ARM instances for property testing.
// We first initialize frontDoors_RulesEngine_Spec_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontDoors_RulesEngine_Spec_ARMGenerator() gopter.Gen {
	if frontDoors_RulesEngine_Spec_ARMGenerator != nil {
		return frontDoors_RulesEngine_Spec_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontDoors_RulesEngine_Spec_ARM(generators)
	frontDoors_RulesEngine_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(FrontDoors_RulesEngine_Spec_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontDoors_RulesEngine_Spec_ARM(generators)
	AddRelatedPropertyGeneratorsForFrontDoors_RulesEngine_Spec_ARM(generators)
	frontDoors_RulesEngine_Spec_ARMGenerator = gen.Struct(reflect.TypeOf(FrontDoors_RulesEngine_Spec_ARM{}), generators)

	return frontDoors_RulesEngine_Spec_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontDoors_RulesEngine_Spec_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontDoors_RulesEngine_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Name"] = gen.AlphaString()
}

// AddRelatedPropertyGeneratorsForFrontDoors_RulesEngine_Spec_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontDoors_RulesEngine_Spec_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RulesEngineProperties_ARMGenerator())
}

func Test_RulesEngineProperties_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RulesEngineProperties_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRulesEngineProperties_ARM, RulesEngineProperties_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRulesEngineProperties_ARM runs a test to see if a specific instance of RulesEngineProperties_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRulesEngineProperties_ARM(subject RulesEngineProperties_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RulesEngineProperties_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RulesEngineProperties_ARM instances for property testing - lazily instantiated by
// RulesEngineProperties_ARMGenerator()
var rulesEngineProperties_ARMGenerator gopter.Gen

// RulesEngineProperties_ARMGenerator returns a generator of RulesEngineProperties_ARM instances for property testing.
func RulesEngineProperties_ARMGenerator() gopter.Gen {
	if rulesEngineProperties_ARMGenerator != nil {
		return rulesEngineProperties_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRulesEngineProperties_ARM(generators)
	rulesEngineProperties_ARMGenerator = gen.Struct(reflect.TypeOf(RulesEngineProperties_ARM{}), generators)

	return rulesEngineProperties_ARMGenerator
}

// AddRelatedPropertyGeneratorsForRulesEngineProperties_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRulesEngineProperties_ARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(RulesEngineRule_ARMGenerator())
}

func Test_RulesEngineRule_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RulesEngineRule_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRulesEngineRule_ARM, RulesEngineRule_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRulesEngineRule_ARM runs a test to see if a specific instance of RulesEngineRule_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRulesEngineRule_ARM(subject RulesEngineRule_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RulesEngineRule_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RulesEngineRule_ARM instances for property testing - lazily instantiated by
// RulesEngineRule_ARMGenerator()
var rulesEngineRule_ARMGenerator gopter.Gen

// RulesEngineRule_ARMGenerator returns a generator of RulesEngineRule_ARM instances for property testing.
// We first initialize rulesEngineRule_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RulesEngineRule_ARMGenerator() gopter.Gen {
	if rulesEngineRule_ARMGenerator != nil {
		return rulesEngineRule_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRulesEngineRule_ARM(generators)
	rulesEngineRule_ARMGenerator = gen.Struct(reflect.TypeOf(RulesEngineRule_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRulesEngineRule_ARM(generators)
	AddRelatedPropertyGeneratorsForRulesEngineRule_ARM(generators)
	rulesEngineRule_ARMGenerator = gen.Struct(reflect.TypeOf(RulesEngineRule_ARM{}), generators)

	return rulesEngineRule_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRulesEngineRule_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRulesEngineRule_ARM(gens map[string]gopter.Gen) {
	gens["MatchProcessingBehavior"] = gen.PtrOf(gen.OneConstOf(RulesEngineRule_MatchProcessingBehavior_Continue, RulesEngineRule_MatchProcessingBehavior_Stop))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForRulesEngineRule_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRulesEngineRule_ARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(RulesEngineAction_ARMGenerator())
	gens["MatchConditions"] = gen.SliceOf(RulesEngineMatchCondition_ARMGenerator())
}

func Test_RulesEngineAction_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RulesEngineAction_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRulesEngineAction_ARM, RulesEngineAction_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRulesEngineAction_ARM runs a test to see if a specific instance of RulesEngineAction_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRulesEngineAction_ARM(subject RulesEngineAction_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RulesEngineAction_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RulesEngineAction_ARM instances for property testing - lazily instantiated by
// RulesEngineAction_ARMGenerator()
var rulesEngineAction_ARMGenerator gopter.Gen

// RulesEngineAction_ARMGenerator returns a generator of RulesEngineAction_ARM instances for property testing.
func RulesEngineAction_ARMGenerator() gopter.Gen {
	if rulesEngineAction_ARMGenerator != nil {
		return rulesEngineAction_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRulesEngineAction_ARM(generators)
	rulesEngineAction_ARMGenerator = gen.Struct(reflect.TypeOf(RulesEngineAction_ARM{}), generators)

	return rulesEngineAction_ARMGenerator
}

// AddRelatedPropertyGeneratorsForRulesEngineAction_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRulesEngineAction_ARM(gens map[string]gopter.Gen) {
	gens["RequestHeaderActions"] = gen.SliceOf(HeaderAction_ARMGenerator())
	gens["ResponseHeaderActions"] = gen.SliceOf(HeaderAction_ARMGenerator())
	gens["RouteConfigurationOverride"] = gen.PtrOf(RouteConfiguration_ARMGenerator())
}

func Test_RulesEngineMatchCondition_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RulesEngineMatchCondition_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRulesEngineMatchCondition_ARM, RulesEngineMatchCondition_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRulesEngineMatchCondition_ARM runs a test to see if a specific instance of RulesEngineMatchCondition_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRulesEngineMatchCondition_ARM(subject RulesEngineMatchCondition_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RulesEngineMatchCondition_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RulesEngineMatchCondition_ARM instances for property testing - lazily instantiated by
// RulesEngineMatchCondition_ARMGenerator()
var rulesEngineMatchCondition_ARMGenerator gopter.Gen

// RulesEngineMatchCondition_ARMGenerator returns a generator of RulesEngineMatchCondition_ARM instances for property testing.
func RulesEngineMatchCondition_ARMGenerator() gopter.Gen {
	if rulesEngineMatchCondition_ARMGenerator != nil {
		return rulesEngineMatchCondition_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRulesEngineMatchCondition_ARM(generators)
	rulesEngineMatchCondition_ARMGenerator = gen.Struct(reflect.TypeOf(RulesEngineMatchCondition_ARM{}), generators)

	return rulesEngineMatchCondition_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRulesEngineMatchCondition_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRulesEngineMatchCondition_ARM(gens map[string]gopter.Gen) {
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["RulesEngineMatchValue"] = gen.SliceOf(gen.AlphaString())
	gens["RulesEngineMatchVariable"] = gen.PtrOf(gen.OneConstOf(
		RulesEngineMatchCondition_RulesEngineMatchVariable_IsMobile,
		RulesEngineMatchCondition_RulesEngineMatchVariable_PostArgs,
		RulesEngineMatchCondition_RulesEngineMatchVariable_QueryString,
		RulesEngineMatchCondition_RulesEngineMatchVariable_RemoteAddr,
		RulesEngineMatchCondition_RulesEngineMatchVariable_RequestBody,
		RulesEngineMatchCondition_RulesEngineMatchVariable_RequestFilename,
		RulesEngineMatchCondition_RulesEngineMatchVariable_RequestFilenameExtension,
		RulesEngineMatchCondition_RulesEngineMatchVariable_RequestHeader,
		RulesEngineMatchCondition_RulesEngineMatchVariable_RequestMethod,
		RulesEngineMatchCondition_RulesEngineMatchVariable_RequestPath,
		RulesEngineMatchCondition_RulesEngineMatchVariable_RequestScheme,
		RulesEngineMatchCondition_RulesEngineMatchVariable_RequestUri))
	gens["RulesEngineOperator"] = gen.PtrOf(gen.OneConstOf(
		RulesEngineMatchCondition_RulesEngineOperator_Any,
		RulesEngineMatchCondition_RulesEngineOperator_BeginsWith,
		RulesEngineMatchCondition_RulesEngineOperator_Contains,
		RulesEngineMatchCondition_RulesEngineOperator_EndsWith,
		RulesEngineMatchCondition_RulesEngineOperator_Equal,
		RulesEngineMatchCondition_RulesEngineOperator_GeoMatch,
		RulesEngineMatchCondition_RulesEngineOperator_GreaterThan,
		RulesEngineMatchCondition_RulesEngineOperator_GreaterThanOrEqual,
		RulesEngineMatchCondition_RulesEngineOperator_IPMatch,
		RulesEngineMatchCondition_RulesEngineOperator_LessThan,
		RulesEngineMatchCondition_RulesEngineOperator_LessThanOrEqual))
	gens["Selector"] = gen.PtrOf(gen.AlphaString())
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_Lowercase,
		Transform_RemoveNulls,
		Transform_Trim,
		Transform_Uppercase,
		Transform_UrlDecode,
		Transform_UrlEncode))
}

func Test_HeaderAction_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 100
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HeaderAction_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHeaderAction_ARM, HeaderAction_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHeaderAction_ARM runs a test to see if a specific instance of HeaderAction_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHeaderAction_ARM(subject HeaderAction_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HeaderAction_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HeaderAction_ARM instances for property testing - lazily instantiated by HeaderAction_ARMGenerator()
var headerAction_ARMGenerator gopter.Gen

// HeaderAction_ARMGenerator returns a generator of HeaderAction_ARM instances for property testing.
func HeaderAction_ARMGenerator() gopter.Gen {
	if headerAction_ARMGenerator != nil {
		return headerAction_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHeaderAction_ARM(generators)
	headerAction_ARMGenerator = gen.Struct(reflect.TypeOf(HeaderAction_ARM{}), generators)

	return headerAction_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHeaderAction_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHeaderAction_ARM(gens map[string]gopter.Gen) {
	gens["HeaderActionType"] = gen.PtrOf(gen.OneConstOf(HeaderAction_HeaderActionType_Append, HeaderAction_HeaderActionType_Delete, HeaderAction_HeaderActionType_Overwrite))
	gens["HeaderName"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}
