// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210601

import (
	"encoding/json"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
)

type FrontDoor_Spec_ARM struct {
	// Location: Resource location.
	Location *string `json:"location,omitempty"`
	Name     string  `json:"name,omitempty"`

	// Properties: Properties of the Front Door Load Balancer
	Properties *FrontDoorProperties_ARM `json:"properties,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

var _ genruntime.ARMResourceSpec = &FrontDoor_Spec_ARM{}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-06-01"
func (door FrontDoor_Spec_ARM) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetName returns the Name of the resource
func (door *FrontDoor_Spec_ARM) GetName() string {
	return door.Name
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/frontDoors"
func (door *FrontDoor_Spec_ARM) GetType() string {
	return "Microsoft.Network/frontDoors"
}

// The JSON object that contains the properties required to create an endpoint.
type FrontDoorProperties_ARM struct {
	// BackendPools: Backend pools available to routing rules.
	BackendPools []BackendPool_ARM `json:"backendPools,omitempty"`

	// BackendPoolsSettings: Settings for all backendPools
	BackendPoolsSettings *BackendPoolsSettings_ARM `json:"backendPoolsSettings,omitempty"`

	// EnabledState: Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *FrontDoorProperties_EnabledState `json:"enabledState,omitempty"`

	// FriendlyName: A friendly name for the frontDoor
	FriendlyName *string `json:"friendlyName,omitempty"`

	// FrontendEndpoints: Frontend endpoints available to routing rules.
	FrontendEndpoints []FrontendEndpoint_ARM `json:"frontendEndpoints,omitempty"`

	// HealthProbeSettings: Health probe settings associated with this Front Door instance.
	HealthProbeSettings []HealthProbeSettingsModel_ARM `json:"healthProbeSettings,omitempty"`

	// LoadBalancingSettings: Load balancing settings associated with this Front Door instance.
	LoadBalancingSettings []LoadBalancingSettingsModel_ARM `json:"loadBalancingSettings,omitempty"`

	// RoutingRules: Routing rules associated with this Front Door.
	RoutingRules []RoutingRule_ARM `json:"routingRules,omitempty"`
}

// A backend pool is a collection of backends that can be routed to.
type BackendPool_ARM struct {
	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the Front Door Backend Pool
	Properties *BackendPoolProperties_ARM `json:"properties,omitempty"`
}

// Settings that apply to all backend pools.
type BackendPoolsSettings_ARM struct {
	// EnforceCertificateNameCheck: Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect
	// on non-HTTPS requests.
	EnforceCertificateNameCheck *BackendPoolsSettings_EnforceCertificateNameCheck `json:"enforceCertificateNameCheck,omitempty"`

	// SendRecvTimeoutSeconds: Send and receive timeout on forwarding request to the backend. When timeout is reached, the
	// request fails and returns.
	SendRecvTimeoutSeconds *int `json:"sendRecvTimeoutSeconds,omitempty"`
}

// A frontend endpoint used for routing.
type FrontendEndpoint_ARM struct {
	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the Frontend endpoint
	Properties *FrontendEndpointProperties_ARM `json:"properties,omitempty"`
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModel_ARM struct {
	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the health probe settings
	Properties *HealthProbeSettingsProperties_ARM `json:"properties,omitempty"`
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModel_ARM struct {
	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the load balancing settings
	Properties *LoadBalancingSettingsProperties_ARM `json:"properties,omitempty"`
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRule_ARM struct {
	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the Front Door Routing Rule
	Properties *RoutingRuleProperties_ARM `json:"properties,omitempty"`
}

// The JSON object that contains the properties required to create a Backend Pool.
type BackendPoolProperties_ARM struct {
	// Backends: The set of backends for this pool
	Backends []Backend_ARM `json:"backends,omitempty"`

	// HealthProbeSettings: L7 health probe settings for a backend pool
	HealthProbeSettings *SubResource_ARM `json:"healthProbeSettings,omitempty"`

	// LoadBalancingSettings: Load balancing settings for a backend pool
	LoadBalancingSettings *SubResource_ARM `json:"loadBalancingSettings,omitempty"`
}

// The JSON object that contains the properties required to create a frontend endpoint.
type FrontendEndpointProperties_ARM struct {
	// HostName: The host name of the frontendEndpoint. Must be a domain name.
	HostName *string `json:"hostName,omitempty"`

	// SessionAffinityEnabledState: Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
	SessionAffinityEnabledState *FrontendEndpointProperties_SessionAffinityEnabledState `json:"sessionAffinityEnabledState,omitempty"`

	// SessionAffinityTtlSeconds: UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if
	// applicable.
	SessionAffinityTtlSeconds *int `json:"sessionAffinityTtlSeconds,omitempty"`

	// WebApplicationFirewallPolicyLink: Defines the Web Application Firewall policy for each host (if applicable)
	WebApplicationFirewallPolicyLink *FrontendEndpointProperties_WebApplicationFirewallPolicyLink_ARM `json:"webApplicationFirewallPolicyLink,omitempty"`
}

// The JSON object that contains the properties required to create a health probe settings.
type HealthProbeSettingsProperties_ARM struct {
	// EnabledState: Whether to enable health probes to be made against backends defined under backendPools. Health probes can
	// only be disabled if there is a single enabled backend in single enabled backend pool.
	EnabledState *HealthProbeSettingsProperties_EnabledState `json:"enabledState,omitempty"`

	// HealthProbeMethod: Configures which HTTP method to use to probe the backends defined under backendPools.
	HealthProbeMethod *HealthProbeSettingsProperties_HealthProbeMethod `json:"healthProbeMethod,omitempty"`

	// IntervalInSeconds: The number of seconds between health probes.
	IntervalInSeconds *int `json:"intervalInSeconds,omitempty"`

	// Path: The path to use for the health probe. Default is /
	Path *string `json:"path,omitempty"`

	// Protocol: Protocol scheme to use for this probe
	Protocol *HealthProbeSettingsProperties_Protocol `json:"protocol,omitempty"`
}

// The JSON object that contains the properties required to create load balancing settings
type LoadBalancingSettingsProperties_ARM struct {
	// AdditionalLatencyMilliseconds: The additional latency in milliseconds for probes to fall into the lowest latency bucket
	AdditionalLatencyMilliseconds *int `json:"additionalLatencyMilliseconds,omitempty"`

	// SampleSize: The number of samples to consider for load balancing decisions
	SampleSize *int `json:"sampleSize,omitempty"`

	// SuccessfulSamplesRequired: The number of samples within the sample period that must succeed
	SuccessfulSamplesRequired *int `json:"successfulSamplesRequired,omitempty"`
}

// The JSON object that contains the properties required to create a routing rule.
type RoutingRuleProperties_ARM struct {
	// AcceptedProtocols: Protocol schemes to match for this rule
	AcceptedProtocols []RoutingRuleProperties_AcceptedProtocols `json:"acceptedProtocols,omitempty"`

	// EnabledState: Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *RoutingRuleProperties_EnabledState `json:"enabledState,omitempty"`

	// FrontendEndpoints: Frontend endpoints associated with this rule
	FrontendEndpoints []SubResource_ARM `json:"frontendEndpoints,omitempty"`

	// PatternsToMatch: The route patterns of the rule.
	PatternsToMatch []string `json:"patternsToMatch,omitempty"`

	// RouteConfiguration: A reference to the routing configuration.
	RouteConfiguration *RouteConfiguration_ARM `json:"routeConfiguration,omitempty"`

	// RulesEngine: A reference to a specific Rules Engine Configuration to apply to this route.
	RulesEngine *SubResource_ARM `json:"rulesEngine,omitempty"`

	// WebApplicationFirewallPolicyLink: Defines the Web Application Firewall policy for each routing rule (if applicable)
	WebApplicationFirewallPolicyLink *RoutingRuleProperties_WebApplicationFirewallPolicyLink_ARM `json:"webApplicationFirewallPolicyLink,omitempty"`
}

// Backend address of a frontDoor load balancer.
type Backend_ARM struct {
	// Address: Location of the backend (IP address or FQDN)
	Address *string `json:"address,omitempty"`

	// BackendHostHeader: The value to use as the host header sent to the backend. If blank or unspecified, this defaults to
	// the incoming host.
	BackendHostHeader *string `json:"backendHostHeader,omitempty"`

	// EnabledState: Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *Backend_EnabledState `json:"enabledState,omitempty"`

	// HttpPort: The HTTP TCP port number. Must be between 1 and 65535.
	HttpPort *int `json:"httpPort,omitempty"`

	// HttpsPort: The HTTPS TCP port number. Must be between 1 and 65535.
	HttpsPort *int `json:"httpsPort,omitempty"`

	// Priority: Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower
	// priority backend is healthy.
	Priority *int `json:"priority,omitempty"`

	// PrivateLinkAlias: The Alias of the Private Link resource. Populating this optional field indicates that this backend is
	// 'Private'
	PrivateLinkAlias *string `json:"privateLinkAlias,omitempty"`

	// PrivateLinkApprovalMessage: A custom message to be included in the approval request to connect to the Private Link
	PrivateLinkApprovalMessage *string `json:"privateLinkApprovalMessage,omitempty"`

	// PrivateLinkLocation: The location of the Private Link resource. Required only if 'privateLinkResourceId' is populated
	PrivateLinkLocation   *string `json:"privateLinkLocation,omitempty"`
	PrivateLinkResourceId *string `json:"privateLinkResourceId,omitempty"`

	// Weight: Weight of this endpoint for load balancing purposes.
	Weight *int `json:"weight,omitempty"`
}

type FrontendEndpointProperties_WebApplicationFirewallPolicyLink_ARM struct {
	Id *string `json:"id,omitempty"`
}

type RouteConfiguration_ARM struct {
	// MicrosoftAzureFrontDoorModelsFrontdoorForwarding: Mutually exclusive with all other properties
	MicrosoftAzureFrontDoorModelsFrontdoorForwarding *ForwardingConfiguration_ARM `json:"microsoftAzureFrontDoorModelsFrontdoorForwardingConfiguration,omitempty"`

	// MicrosoftAzureFrontDoorModelsFrontdoorRedirect: Mutually exclusive with all other properties
	MicrosoftAzureFrontDoorModelsFrontdoorRedirect *RedirectConfiguration_ARM `json:"microsoftAzureFrontDoorModelsFrontdoorRedirectConfiguration,omitempty"`
}

// MarshalJSON defers JSON marshaling to the first non-nil property, because RouteConfiguration_ARM represents a discriminated union (JSON OneOf)
func (configuration RouteConfiguration_ARM) MarshalJSON() ([]byte, error) {
	if configuration.MicrosoftAzureFrontDoorModelsFrontdoorForwarding != nil {
		return json.Marshal(configuration.MicrosoftAzureFrontDoorModelsFrontdoorForwarding)
	}
	if configuration.MicrosoftAzureFrontDoorModelsFrontdoorRedirect != nil {
		return json.Marshal(configuration.MicrosoftAzureFrontDoorModelsFrontdoorRedirect)
	}
	return nil, nil
}

// UnmarshalJSON unmarshals the RouteConfiguration_ARM
func (configuration *RouteConfiguration_ARM) UnmarshalJSON(data []byte) error {
	var rawJson map[string]interface{}
	err := json.Unmarshal(data, &rawJson)
	if err != nil {
		return err
	}
	discriminator := rawJson["@odata.type"]
	if discriminator == "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration" {
		configuration.MicrosoftAzureFrontDoorModelsFrontdoorForwarding = &ForwardingConfiguration_ARM{}
		return json.Unmarshal(data, configuration.MicrosoftAzureFrontDoorModelsFrontdoorForwarding)
	}
	if discriminator == "#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration" {
		configuration.MicrosoftAzureFrontDoorModelsFrontdoorRedirect = &RedirectConfiguration_ARM{}
		return json.Unmarshal(data, configuration.MicrosoftAzureFrontDoorModelsFrontdoorRedirect)
	}

	// No error
	return nil
}

type RoutingRuleProperties_WebApplicationFirewallPolicyLink_ARM struct {
	Id *string `json:"id,omitempty"`
}

// Reference to another subresource.
type SubResource_ARM struct {
	Id *string `json:"id,omitempty"`
}

type ForwardingConfiguration_ARM struct {
	// BackendPool: A reference to the BackendPool which this rule routes to.
	BackendPool *SubResource_ARM `json:"backendPool,omitempty"`

	// CacheConfiguration: The caching configuration associated with this rule.
	CacheConfiguration *CacheConfiguration_ARM `json:"cacheConfiguration,omitempty"`

	// CustomForwardingPath: A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming
	// path.
	CustomForwardingPath *string `json:"customForwardingPath,omitempty"`

	// ForwardingProtocol: Protocol this rule will use when forwarding traffic to backends.
	ForwardingProtocol *ForwardingConfiguration_ForwardingProtocol `json:"forwardingProtocol,omitempty"`
	OdataType          ForwardingConfiguration_OdataType           `json:"@odata.type,omitempty"`
}

type RedirectConfiguration_ARM struct {
	// CustomFragment: Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include
	// the #.
	CustomFragment *string `json:"customFragment,omitempty"`

	// CustomHost: Host to redirect. Leave empty to use the incoming host as the destination host.
	CustomHost *string `json:"customHost,omitempty"`

	// CustomPath: The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path
	// as destination path.
	CustomPath *string `json:"customPath,omitempty"`

	// CustomQueryString: The set of query strings to be placed in the redirect URL. Setting this value would replace any
	// existing query string; leave empty to preserve the incoming query string. Query string must be in <key>=<value> format.
	// The first ? and & will be added automatically so do not include them in the front, but do separate multiple query
	// strings with &.
	CustomQueryString *string                         `json:"customQueryString,omitempty"`
	OdataType         RedirectConfiguration_OdataType `json:"@odata.type,omitempty"`

	// RedirectProtocol: The protocol of the destination to where the traffic is redirected
	RedirectProtocol *RedirectConfiguration_RedirectProtocol `json:"redirectProtocol,omitempty"`

	// RedirectType: The redirect type the rule will use when redirecting traffic.
	RedirectType *RedirectConfiguration_RedirectType `json:"redirectType,omitempty"`
}

// Caching settings for a caching-type route. To disable caching, do not provide a cacheConfiguration object.
type CacheConfiguration_ARM struct {
	// CacheDuration: The duration for which the content needs to be cached. Allowed format is in ISO 8601 format
	// (http://en.wikipedia.org/wiki/ISO_8601#Durations). HTTP requires the value to be no more than a year
	CacheDuration *string `json:"cacheDuration,omitempty"`

	// DynamicCompression: Whether to use dynamic compression for cached content
	DynamicCompression *CacheConfiguration_DynamicCompression `json:"dynamicCompression,omitempty"`

	// QueryParameterStripDirective: Treatment of URL query terms when forming the cache key.
	QueryParameterStripDirective *CacheConfiguration_QueryParameterStripDirective `json:"queryParameterStripDirective,omitempty"`

	// QueryParameters: query parameters to include or exclude (comma separated).
	QueryParameters *string `json:"queryParameters,omitempty"`
}
