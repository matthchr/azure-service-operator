// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210601

// Front Door represents a collection of backend endpoints to route traffic to along with rules that specify how traffic is
// sent there.
type FrontDoor_STATUS_ARM struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Location: Resource location.
	Location *string `json:"location,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// Properties: Properties of the Front Door Load Balancer
	Properties *FrontDoorProperties_STATUS_ARM `json:"properties,omitempty"`

	// Tags: Resource tags.
	Tags map[string]string `json:"tags,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`
}

// The JSON object that contains the properties required to create an endpoint.
type FrontDoorProperties_STATUS_ARM struct {
	// BackendPools: Backend pools available to routing rules.
	BackendPools []BackendPool_STATUS_ARM `json:"backendPools,omitempty"`

	// BackendPoolsSettings: Settings for all backendPools
	BackendPoolsSettings *BackendPoolsSettings_STATUS_ARM `json:"backendPoolsSettings,omitempty"`

	// Cname: The host that each frontendEndpoint must CNAME to.
	Cname *string `json:"cname,omitempty"`

	// EnabledState: Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'
	EnabledState *FrontDoorProperties_EnabledState_STATUS `json:"enabledState,omitempty"`

	// ExtendedProperties: Key-Value pair representing additional properties for frontdoor.
	ExtendedProperties map[string]string `json:"extendedProperties,omitempty"`

	// FriendlyName: A friendly name for the frontDoor
	FriendlyName *string `json:"friendlyName,omitempty"`

	// FrontdoorId: The Id of the frontdoor.
	FrontdoorId *string `json:"frontdoorId,omitempty"`

	// FrontendEndpoints: Frontend endpoints available to routing rules.
	FrontendEndpoints []FrontendEndpoint_STATUS_ARM `json:"frontendEndpoints,omitempty"`

	// HealthProbeSettings: Health probe settings associated with this Front Door instance.
	HealthProbeSettings []HealthProbeSettingsModel_STATUS_ARM `json:"healthProbeSettings,omitempty"`

	// LoadBalancingSettings: Load balancing settings associated with this Front Door instance.
	LoadBalancingSettings []LoadBalancingSettingsModel_STATUS_ARM `json:"loadBalancingSettings,omitempty"`

	// ProvisioningState: Provisioning state of the Front Door.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	// ResourceState: Resource status of the Front Door.
	ResourceState *ResourceState_STATUS `json:"resourceState,omitempty"`

	// RoutingRules: Routing rules associated with this Front Door.
	RoutingRules []RoutingRule_STATUS_ARM `json:"routingRules,omitempty"`

	// RulesEngines: Rules Engine Configurations available to routing rules.
	RulesEngines []RulesEngine_STATUS_ARM `json:"rulesEngines,omitempty"`
}

// A backend pool is a collection of backends that can be routed to.
type BackendPool_STATUS_ARM struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

// Settings that apply to all backend pools.
type BackendPoolsSettings_STATUS_ARM struct {
	// EnforceCertificateNameCheck: Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect
	// on non-HTTPS requests.
	EnforceCertificateNameCheck *BackendPoolsSettings_EnforceCertificateNameCheck_STATUS `json:"enforceCertificateNameCheck,omitempty"`

	// SendRecvTimeoutSeconds: Send and receive timeout on forwarding request to the backend. When timeout is reached, the
	// request fails and returns.
	SendRecvTimeoutSeconds *int `json:"sendRecvTimeoutSeconds,omitempty"`
}

// A frontend endpoint used for routing.
type FrontendEndpoint_STATUS_ARM struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

// Load balancing settings for a backend pool
type HealthProbeSettingsModel_STATUS_ARM struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

// Load balancing settings for a backend pool
type LoadBalancingSettingsModel_STATUS_ARM struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRule_STATUS_ARM struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`
}

// A rules engine configuration containing a list of rules that will run to modify the runtime behavior of the request and
// response.
type RulesEngine_STATUS_ARM struct {
	// Id: Resource ID.
	Id *string `json:"id,omitempty"`
}
