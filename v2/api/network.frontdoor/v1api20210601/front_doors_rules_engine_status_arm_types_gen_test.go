// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210601

import (
	"encoding/json"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kr/pretty"
	"github.com/kylelemons/godebug/diff"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/gen"
	"github.com/leanovate/gopter/prop"
	"os"
	"reflect"
	"testing"
)

func Test_FrontDoors_RulesEngine_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of FrontDoors_RulesEngine_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForFrontDoors_RulesEngine_STATUS_ARM, FrontDoors_RulesEngine_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForFrontDoors_RulesEngine_STATUS_ARM runs a test to see if a specific instance of FrontDoors_RulesEngine_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForFrontDoors_RulesEngine_STATUS_ARM(subject FrontDoors_RulesEngine_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual FrontDoors_RulesEngine_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of FrontDoors_RulesEngine_STATUS_ARM instances for property testing - lazily instantiated by
// FrontDoors_RulesEngine_STATUS_ARMGenerator()
var frontDoors_RulesEngine_STATUS_ARMGenerator gopter.Gen

// FrontDoors_RulesEngine_STATUS_ARMGenerator returns a generator of FrontDoors_RulesEngine_STATUS_ARM instances for property testing.
// We first initialize frontDoors_RulesEngine_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func FrontDoors_RulesEngine_STATUS_ARMGenerator() gopter.Gen {
	if frontDoors_RulesEngine_STATUS_ARMGenerator != nil {
		return frontDoors_RulesEngine_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontDoors_RulesEngine_STATUS_ARM(generators)
	frontDoors_RulesEngine_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FrontDoors_RulesEngine_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForFrontDoors_RulesEngine_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForFrontDoors_RulesEngine_STATUS_ARM(generators)
	frontDoors_RulesEngine_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(FrontDoors_RulesEngine_STATUS_ARM{}), generators)

	return frontDoors_RulesEngine_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForFrontDoors_RulesEngine_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForFrontDoors_RulesEngine_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Type"] = gen.PtrOf(gen.AlphaString())
}

// AddRelatedPropertyGeneratorsForFrontDoors_RulesEngine_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForFrontDoors_RulesEngine_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Properties"] = gen.PtrOf(RulesEngineProperties_STATUS_ARMGenerator())
}

func Test_RulesEngineProperties_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RulesEngineProperties_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRulesEngineProperties_STATUS_ARM, RulesEngineProperties_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRulesEngineProperties_STATUS_ARM runs a test to see if a specific instance of RulesEngineProperties_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRulesEngineProperties_STATUS_ARM(subject RulesEngineProperties_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RulesEngineProperties_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RulesEngineProperties_STATUS_ARM instances for property testing - lazily instantiated by
// RulesEngineProperties_STATUS_ARMGenerator()
var rulesEngineProperties_STATUS_ARMGenerator gopter.Gen

// RulesEngineProperties_STATUS_ARMGenerator returns a generator of RulesEngineProperties_STATUS_ARM instances for property testing.
// We first initialize rulesEngineProperties_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RulesEngineProperties_STATUS_ARMGenerator() gopter.Gen {
	if rulesEngineProperties_STATUS_ARMGenerator != nil {
		return rulesEngineProperties_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRulesEngineProperties_STATUS_ARM(generators)
	rulesEngineProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RulesEngineProperties_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRulesEngineProperties_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRulesEngineProperties_STATUS_ARM(generators)
	rulesEngineProperties_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RulesEngineProperties_STATUS_ARM{}), generators)

	return rulesEngineProperties_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRulesEngineProperties_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRulesEngineProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["ResourceState"] = gen.PtrOf(gen.OneConstOf(
		ResourceState_STATUS_Creating,
		ResourceState_STATUS_Deleting,
		ResourceState_STATUS_Disabled,
		ResourceState_STATUS_Disabling,
		ResourceState_STATUS_Enabled,
		ResourceState_STATUS_Enabling,
		ResourceState_STATUS_Migrated,
		ResourceState_STATUS_Migrating))
}

// AddRelatedPropertyGeneratorsForRulesEngineProperties_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRulesEngineProperties_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Rules"] = gen.SliceOf(RulesEngineRule_STATUS_ARMGenerator())
}

func Test_RulesEngineRule_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RulesEngineRule_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRulesEngineRule_STATUS_ARM, RulesEngineRule_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRulesEngineRule_STATUS_ARM runs a test to see if a specific instance of RulesEngineRule_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRulesEngineRule_STATUS_ARM(subject RulesEngineRule_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RulesEngineRule_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RulesEngineRule_STATUS_ARM instances for property testing - lazily instantiated by
// RulesEngineRule_STATUS_ARMGenerator()
var rulesEngineRule_STATUS_ARMGenerator gopter.Gen

// RulesEngineRule_STATUS_ARMGenerator returns a generator of RulesEngineRule_STATUS_ARM instances for property testing.
// We first initialize rulesEngineRule_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func RulesEngineRule_STATUS_ARMGenerator() gopter.Gen {
	if rulesEngineRule_STATUS_ARMGenerator != nil {
		return rulesEngineRule_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRulesEngineRule_STATUS_ARM(generators)
	rulesEngineRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RulesEngineRule_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRulesEngineRule_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForRulesEngineRule_STATUS_ARM(generators)
	rulesEngineRule_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RulesEngineRule_STATUS_ARM{}), generators)

	return rulesEngineRule_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRulesEngineRule_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRulesEngineRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MatchProcessingBehavior"] = gen.PtrOf(gen.OneConstOf(RulesEngineRule_MatchProcessingBehavior_STATUS_Continue, RulesEngineRule_MatchProcessingBehavior_STATUS_Stop))
	gens["Name"] = gen.PtrOf(gen.AlphaString())
	gens["Priority"] = gen.PtrOf(gen.Int())
}

// AddRelatedPropertyGeneratorsForRulesEngineRule_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRulesEngineRule_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Action"] = gen.PtrOf(RulesEngineAction_STATUS_ARMGenerator())
	gens["MatchConditions"] = gen.SliceOf(RulesEngineMatchCondition_STATUS_ARMGenerator())
}

func Test_RulesEngineAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RulesEngineAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRulesEngineAction_STATUS_ARM, RulesEngineAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRulesEngineAction_STATUS_ARM runs a test to see if a specific instance of RulesEngineAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRulesEngineAction_STATUS_ARM(subject RulesEngineAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RulesEngineAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RulesEngineAction_STATUS_ARM instances for property testing - lazily instantiated by
// RulesEngineAction_STATUS_ARMGenerator()
var rulesEngineAction_STATUS_ARMGenerator gopter.Gen

// RulesEngineAction_STATUS_ARMGenerator returns a generator of RulesEngineAction_STATUS_ARM instances for property testing.
func RulesEngineAction_STATUS_ARMGenerator() gopter.Gen {
	if rulesEngineAction_STATUS_ARMGenerator != nil {
		return rulesEngineAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRulesEngineAction_STATUS_ARM(generators)
	rulesEngineAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RulesEngineAction_STATUS_ARM{}), generators)

	return rulesEngineAction_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForRulesEngineAction_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRulesEngineAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["RequestHeaderActions"] = gen.SliceOf(HeaderAction_STATUS_ARMGenerator())
	gens["ResponseHeaderActions"] = gen.SliceOf(HeaderAction_STATUS_ARMGenerator())
	gens["RouteConfigurationOverride"] = gen.PtrOf(RouteConfiguration_STATUS_ARMGenerator())
}

func Test_RulesEngineMatchCondition_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RulesEngineMatchCondition_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRulesEngineMatchCondition_STATUS_ARM, RulesEngineMatchCondition_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRulesEngineMatchCondition_STATUS_ARM runs a test to see if a specific instance of RulesEngineMatchCondition_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRulesEngineMatchCondition_STATUS_ARM(subject RulesEngineMatchCondition_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RulesEngineMatchCondition_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RulesEngineMatchCondition_STATUS_ARM instances for property testing - lazily instantiated by
// RulesEngineMatchCondition_STATUS_ARMGenerator()
var rulesEngineMatchCondition_STATUS_ARMGenerator gopter.Gen

// RulesEngineMatchCondition_STATUS_ARMGenerator returns a generator of RulesEngineMatchCondition_STATUS_ARM instances for property testing.
func RulesEngineMatchCondition_STATUS_ARMGenerator() gopter.Gen {
	if rulesEngineMatchCondition_STATUS_ARMGenerator != nil {
		return rulesEngineMatchCondition_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRulesEngineMatchCondition_STATUS_ARM(generators)
	rulesEngineMatchCondition_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RulesEngineMatchCondition_STATUS_ARM{}), generators)

	return rulesEngineMatchCondition_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRulesEngineMatchCondition_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRulesEngineMatchCondition_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["NegateCondition"] = gen.PtrOf(gen.Bool())
	gens["RulesEngineMatchValue"] = gen.SliceOf(gen.AlphaString())
	gens["RulesEngineMatchVariable"] = gen.PtrOf(gen.OneConstOf(
		RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_IsMobile,
		RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_PostArgs,
		RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_QueryString,
		RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RemoteAddr,
		RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestBody,
		RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestFilename,
		RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestFilenameExtension,
		RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestHeader,
		RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestMethod,
		RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestPath,
		RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestScheme,
		RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS_RequestUri))
	gens["RulesEngineOperator"] = gen.PtrOf(gen.OneConstOf(
		RulesEngineMatchCondition_RulesEngineOperator_STATUS_Any,
		RulesEngineMatchCondition_RulesEngineOperator_STATUS_BeginsWith,
		RulesEngineMatchCondition_RulesEngineOperator_STATUS_Contains,
		RulesEngineMatchCondition_RulesEngineOperator_STATUS_EndsWith,
		RulesEngineMatchCondition_RulesEngineOperator_STATUS_Equal,
		RulesEngineMatchCondition_RulesEngineOperator_STATUS_GeoMatch,
		RulesEngineMatchCondition_RulesEngineOperator_STATUS_GreaterThan,
		RulesEngineMatchCondition_RulesEngineOperator_STATUS_GreaterThanOrEqual,
		RulesEngineMatchCondition_RulesEngineOperator_STATUS_IPMatch,
		RulesEngineMatchCondition_RulesEngineOperator_STATUS_LessThan,
		RulesEngineMatchCondition_RulesEngineOperator_STATUS_LessThanOrEqual))
	gens["Selector"] = gen.PtrOf(gen.AlphaString())
	gens["Transforms"] = gen.SliceOf(gen.OneConstOf(
		Transform_STATUS_Lowercase,
		Transform_STATUS_RemoveNulls,
		Transform_STATUS_Trim,
		Transform_STATUS_Uppercase,
		Transform_STATUS_UrlDecode,
		Transform_STATUS_UrlEncode))
}

func Test_HeaderAction_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of HeaderAction_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForHeaderAction_STATUS_ARM, HeaderAction_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForHeaderAction_STATUS_ARM runs a test to see if a specific instance of HeaderAction_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForHeaderAction_STATUS_ARM(subject HeaderAction_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual HeaderAction_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of HeaderAction_STATUS_ARM instances for property testing - lazily instantiated by
// HeaderAction_STATUS_ARMGenerator()
var headerAction_STATUS_ARMGenerator gopter.Gen

// HeaderAction_STATUS_ARMGenerator returns a generator of HeaderAction_STATUS_ARM instances for property testing.
func HeaderAction_STATUS_ARMGenerator() gopter.Gen {
	if headerAction_STATUS_ARMGenerator != nil {
		return headerAction_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForHeaderAction_STATUS_ARM(generators)
	headerAction_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(HeaderAction_STATUS_ARM{}), generators)

	return headerAction_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForHeaderAction_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForHeaderAction_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["HeaderActionType"] = gen.PtrOf(gen.OneConstOf(HeaderAction_HeaderActionType_STATUS_Append, HeaderAction_HeaderActionType_STATUS_Delete, HeaderAction_HeaderActionType_STATUS_Overwrite))
	gens["HeaderName"] = gen.PtrOf(gen.AlphaString())
	gens["Value"] = gen.PtrOf(gen.AlphaString())
}

func Test_RouteConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RouteConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRouteConfiguration_STATUS_ARM, RouteConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRouteConfiguration_STATUS_ARM runs a test to see if a specific instance of RouteConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRouteConfiguration_STATUS_ARM(subject RouteConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RouteConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RouteConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// RouteConfiguration_STATUS_ARMGenerator()
var routeConfiguration_STATUS_ARMGenerator gopter.Gen

// RouteConfiguration_STATUS_ARMGenerator returns a generator of RouteConfiguration_STATUS_ARM instances for property testing.
func RouteConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if routeConfiguration_STATUS_ARMGenerator != nil {
		return routeConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddRelatedPropertyGeneratorsForRouteConfiguration_STATUS_ARM(generators)

	// handle OneOf by choosing only one field to instantiate
	var gens []gopter.Gen
	for propName, propGen := range generators {
		gens = append(gens, gen.Struct(reflect.TypeOf(RouteConfiguration_STATUS_ARM{}), map[string]gopter.Gen{propName: propGen}))
	}
	routeConfiguration_STATUS_ARMGenerator = gen.OneGenOf(gens...)

	return routeConfiguration_STATUS_ARMGenerator
}

// AddRelatedPropertyGeneratorsForRouteConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForRouteConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["MicrosoftAzureFrontDoorModelsFrontdoorForwarding"] = ForwardingConfiguration_STATUS_ARMGenerator().Map(func(it ForwardingConfiguration_STATUS_ARM) *ForwardingConfiguration_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
	gens["MicrosoftAzureFrontDoorModelsFrontdoorRedirect"] = RedirectConfiguration_STATUS_ARMGenerator().Map(func(it RedirectConfiguration_STATUS_ARM) *RedirectConfiguration_STATUS_ARM {
		return &it
	}) // generate one case for OneOf type
}

func Test_ForwardingConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of ForwardingConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForForwardingConfiguration_STATUS_ARM, ForwardingConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForForwardingConfiguration_STATUS_ARM runs a test to see if a specific instance of ForwardingConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForForwardingConfiguration_STATUS_ARM(subject ForwardingConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual ForwardingConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of ForwardingConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// ForwardingConfiguration_STATUS_ARMGenerator()
var forwardingConfiguration_STATUS_ARMGenerator gopter.Gen

// ForwardingConfiguration_STATUS_ARMGenerator returns a generator of ForwardingConfiguration_STATUS_ARM instances for property testing.
// We first initialize forwardingConfiguration_STATUS_ARMGenerator with a simplified generator based on the
// fields with primitive types then replacing it with a more complex one that also handles complex fields
// to ensure any cycles in the object graph properly terminate.
func ForwardingConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if forwardingConfiguration_STATUS_ARMGenerator != nil {
		return forwardingConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForForwardingConfiguration_STATUS_ARM(generators)
	forwardingConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ForwardingConfiguration_STATUS_ARM{}), generators)

	// The above call to gen.Struct() captures the map, so create a new one
	generators = make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForForwardingConfiguration_STATUS_ARM(generators)
	AddRelatedPropertyGeneratorsForForwardingConfiguration_STATUS_ARM(generators)
	forwardingConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(ForwardingConfiguration_STATUS_ARM{}), generators)

	return forwardingConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForForwardingConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForForwardingConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CustomForwardingPath"] = gen.PtrOf(gen.AlphaString())
	gens["ForwardingProtocol"] = gen.PtrOf(gen.OneConstOf(ForwardingConfiguration_ForwardingProtocol_STATUS_HttpOnly, ForwardingConfiguration_ForwardingProtocol_STATUS_HttpsOnly, ForwardingConfiguration_ForwardingProtocol_STATUS_MatchRequest))
	gens["OdataType"] = gen.OneConstOf(ForwardingConfiguration_OdataType_STATUS_MicrosoftAzureFrontDoorModelsFrontdoorForwardingConfiguration)
}

// AddRelatedPropertyGeneratorsForForwardingConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddRelatedPropertyGeneratorsForForwardingConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["BackendPool"] = gen.PtrOf(SubResource_STATUS_ARMGenerator())
	gens["CacheConfiguration"] = gen.PtrOf(CacheConfiguration_STATUS_ARMGenerator())
}

func Test_RedirectConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of RedirectConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForRedirectConfiguration_STATUS_ARM, RedirectConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForRedirectConfiguration_STATUS_ARM runs a test to see if a specific instance of RedirectConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForRedirectConfiguration_STATUS_ARM(subject RedirectConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual RedirectConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of RedirectConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// RedirectConfiguration_STATUS_ARMGenerator()
var redirectConfiguration_STATUS_ARMGenerator gopter.Gen

// RedirectConfiguration_STATUS_ARMGenerator returns a generator of RedirectConfiguration_STATUS_ARM instances for property testing.
func RedirectConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if redirectConfiguration_STATUS_ARMGenerator != nil {
		return redirectConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForRedirectConfiguration_STATUS_ARM(generators)
	redirectConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(RedirectConfiguration_STATUS_ARM{}), generators)

	return redirectConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForRedirectConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForRedirectConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CustomFragment"] = gen.PtrOf(gen.AlphaString())
	gens["CustomHost"] = gen.PtrOf(gen.AlphaString())
	gens["CustomPath"] = gen.PtrOf(gen.AlphaString())
	gens["CustomQueryString"] = gen.PtrOf(gen.AlphaString())
	gens["OdataType"] = gen.OneConstOf(RedirectConfiguration_OdataType_STATUS_MicrosoftAzureFrontDoorModelsFrontdoorRedirectConfiguration)
	gens["RedirectProtocol"] = gen.PtrOf(gen.OneConstOf(RedirectConfiguration_RedirectProtocol_STATUS_HttpOnly, RedirectConfiguration_RedirectProtocol_STATUS_HttpsOnly, RedirectConfiguration_RedirectProtocol_STATUS_MatchRequest))
	gens["RedirectType"] = gen.PtrOf(gen.OneConstOf(
		RedirectConfiguration_RedirectType_STATUS_Found,
		RedirectConfiguration_RedirectType_STATUS_Moved,
		RedirectConfiguration_RedirectType_STATUS_PermanentRedirect,
		RedirectConfiguration_RedirectType_STATUS_TemporaryRedirect))
}

func Test_CacheConfiguration_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of CacheConfiguration_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForCacheConfiguration_STATUS_ARM, CacheConfiguration_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForCacheConfiguration_STATUS_ARM runs a test to see if a specific instance of CacheConfiguration_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForCacheConfiguration_STATUS_ARM(subject CacheConfiguration_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual CacheConfiguration_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of CacheConfiguration_STATUS_ARM instances for property testing - lazily instantiated by
// CacheConfiguration_STATUS_ARMGenerator()
var cacheConfiguration_STATUS_ARMGenerator gopter.Gen

// CacheConfiguration_STATUS_ARMGenerator returns a generator of CacheConfiguration_STATUS_ARM instances for property testing.
func CacheConfiguration_STATUS_ARMGenerator() gopter.Gen {
	if cacheConfiguration_STATUS_ARMGenerator != nil {
		return cacheConfiguration_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForCacheConfiguration_STATUS_ARM(generators)
	cacheConfiguration_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(CacheConfiguration_STATUS_ARM{}), generators)

	return cacheConfiguration_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForCacheConfiguration_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForCacheConfiguration_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["CacheDuration"] = gen.PtrOf(gen.AlphaString())
	gens["DynamicCompression"] = gen.PtrOf(gen.OneConstOf(CacheConfiguration_DynamicCompression_STATUS_Disabled, CacheConfiguration_DynamicCompression_STATUS_Enabled))
	gens["QueryParameterStripDirective"] = gen.PtrOf(gen.OneConstOf(
		CacheConfiguration_QueryParameterStripDirective_STATUS_StripAll,
		CacheConfiguration_QueryParameterStripDirective_STATUS_StripAllExcept,
		CacheConfiguration_QueryParameterStripDirective_STATUS_StripNone,
		CacheConfiguration_QueryParameterStripDirective_STATUS_StripOnly))
	gens["QueryParameters"] = gen.PtrOf(gen.AlphaString())
}

func Test_SubResource_STATUS_ARM_WhenSerializedToJson_DeserializesAsEqual(t *testing.T) {
	t.Parallel()
	parameters := gopter.DefaultTestParameters()
	parameters.MinSuccessfulTests = 80
	parameters.MaxSize = 3
	properties := gopter.NewProperties(parameters)
	properties.Property(
		"Round trip of SubResource_STATUS_ARM via JSON returns original",
		prop.ForAll(RunJSONSerializationTestForSubResource_STATUS_ARM, SubResource_STATUS_ARMGenerator()))
	properties.TestingRun(t, gopter.NewFormatedReporter(true, 240, os.Stdout))
}

// RunJSONSerializationTestForSubResource_STATUS_ARM runs a test to see if a specific instance of SubResource_STATUS_ARM round trips to JSON and back losslessly
func RunJSONSerializationTestForSubResource_STATUS_ARM(subject SubResource_STATUS_ARM) string {
	// Serialize to JSON
	bin, err := json.Marshal(subject)
	if err != nil {
		return err.Error()
	}

	// Deserialize back into memory
	var actual SubResource_STATUS_ARM
	err = json.Unmarshal(bin, &actual)
	if err != nil {
		return err.Error()
	}

	// Check for outcome
	match := cmp.Equal(subject, actual, cmpopts.EquateEmpty())
	if !match {
		actualFmt := pretty.Sprint(actual)
		subjectFmt := pretty.Sprint(subject)
		result := diff.Diff(subjectFmt, actualFmt)
		return result
	}

	return ""
}

// Generator of SubResource_STATUS_ARM instances for property testing - lazily instantiated by
// SubResource_STATUS_ARMGenerator()
var subResource_STATUS_ARMGenerator gopter.Gen

// SubResource_STATUS_ARMGenerator returns a generator of SubResource_STATUS_ARM instances for property testing.
func SubResource_STATUS_ARMGenerator() gopter.Gen {
	if subResource_STATUS_ARMGenerator != nil {
		return subResource_STATUS_ARMGenerator
	}

	generators := make(map[string]gopter.Gen)
	AddIndependentPropertyGeneratorsForSubResource_STATUS_ARM(generators)
	subResource_STATUS_ARMGenerator = gen.Struct(reflect.TypeOf(SubResource_STATUS_ARM{}), generators)

	return subResource_STATUS_ARMGenerator
}

// AddIndependentPropertyGeneratorsForSubResource_STATUS_ARM is a factory method for creating gopter generators
func AddIndependentPropertyGeneratorsForSubResource_STATUS_ARM(gens map[string]gopter.Gen) {
	gens["Id"] = gen.PtrOf(gen.AlphaString())
}
