// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package storage

import (
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// +kubebuilder:rbac:groups=network.frontdoor.azure.com,resources=frontdoors,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=network.frontdoor.azure.com,resources={frontdoors/status,frontdoors/finalizers},verbs=get;update;patch

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Storage version of v1api20210601.FrontDoor
// Generator information:
// - Generated from: /frontdoor/resource-manager/Microsoft.Network/stable/2021-06-01/frontdoor.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}
type FrontDoor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FrontDoor_Spec   `json:"spec,omitempty"`
	Status            FrontDoor_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &FrontDoor{}

// GetConditions returns the conditions of the resource
func (door *FrontDoor) GetConditions() conditions.Conditions {
	return door.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (door *FrontDoor) SetConditions(conditions conditions.Conditions) {
	door.Status.Conditions = conditions
}

var _ genruntime.KubernetesResource = &FrontDoor{}

// AzureName returns the Azure name of the resource
func (door *FrontDoor) AzureName() string {
	return door.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-06-01"
func (door FrontDoor) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (door *FrontDoor) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (door *FrontDoor) GetSpec() genruntime.ConvertibleSpec {
	return &door.Spec
}

// GetStatus returns the status of this resource
func (door *FrontDoor) GetStatus() genruntime.ConvertibleStatus {
	return &door.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (door *FrontDoor) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/frontDoors"
func (door *FrontDoor) GetType() string {
	return "Microsoft.Network/frontDoors"
}

// NewEmptyStatus returns a new empty (blank) status
func (door *FrontDoor) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &FrontDoor_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (door *FrontDoor) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(door.Spec)
	return door.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (door *FrontDoor) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*FrontDoor_STATUS); ok {
		door.Status = *st
		return nil
	}

	// Convert status to required version
	var st FrontDoor_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	door.Status = st
	return nil
}

// Hub marks that this FrontDoor is the hub type for conversion
func (door *FrontDoor) Hub() {}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (door *FrontDoor) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: door.Spec.OriginalVersion,
		Kind:    "FrontDoor",
	}
}

// +kubebuilder:object:root=true
// Storage version of v1api20210601.FrontDoor
// Generator information:
// - Generated from: /frontdoor/resource-manager/Microsoft.Network/stable/2021-06-01/frontdoor.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}
type FrontDoorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FrontDoor `json:"items"`
}

// Storage version of v1api20210601.APIVersion
// +kubebuilder:validation:Enum={"2021-06-01"}
type APIVersion string

const APIVersion_Value = APIVersion("2021-06-01")

// Storage version of v1api20210601.FrontDoor_Spec
type FrontDoor_Spec struct {
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName             string                       `json:"azureName,omitempty"`
	BackendPools          []BackendPool                `json:"backendPools,omitempty"`
	BackendPoolsSettings  *BackendPoolsSettings        `json:"backendPoolsSettings,omitempty"`
	EnabledState          *string                      `json:"enabledState,omitempty"`
	FriendlyName          *string                      `json:"friendlyName,omitempty"`
	FrontendEndpoints     []FrontendEndpoint           `json:"frontendEndpoints,omitempty"`
	HealthProbeSettings   []HealthProbeSettingsModel   `json:"healthProbeSettings,omitempty"`
	LoadBalancingSettings []LoadBalancingSettingsModel `json:"loadBalancingSettings,omitempty"`
	Location              *string                      `json:"location,omitempty"`
	OriginalVersion       string                       `json:"originalVersion,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a resources.azure.com/ResourceGroup resource
	Owner        *genruntime.KnownResourceReference `group:"resources.azure.com" json:"owner,omitempty" kind:"ResourceGroup"`
	PropertyBag  genruntime.PropertyBag             `json:"$propertyBag,omitempty"`
	RoutingRules []RoutingRule                      `json:"routingRules,omitempty"`
	Tags         map[string]string                  `json:"tags,omitempty"`
}

var _ genruntime.ConvertibleSpec = &FrontDoor_Spec{}

// ConvertSpecFrom populates our FrontDoor_Spec from the provided source
func (door *FrontDoor_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	if source == door {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return source.ConvertSpecTo(door)
}

// ConvertSpecTo populates the provided destination from our FrontDoor_Spec
func (door *FrontDoor_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	if destination == door {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleSpec")
	}

	return destination.ConvertSpecFrom(door)
}

// Storage version of v1api20210601.FrontDoor_STATUS
// Front Door represents a collection of backend endpoints to route traffic to along with rules that specify how traffic is
// sent there.
type FrontDoor_STATUS struct {
	BackendPools          []BackendPool_STATUS                `json:"backendPools,omitempty"`
	BackendPoolsSettings  *BackendPoolsSettings_STATUS        `json:"backendPoolsSettings,omitempty"`
	Cname                 *string                             `json:"cname,omitempty"`
	Conditions            []conditions.Condition              `json:"conditions,omitempty"`
	EnabledState          *string                             `json:"enabledState,omitempty"`
	ExtendedProperties    map[string]string                   `json:"extendedProperties,omitempty"`
	FriendlyName          *string                             `json:"friendlyName,omitempty"`
	FrontdoorId           *string                             `json:"frontdoorId,omitempty"`
	FrontendEndpoints     []FrontendEndpoint_STATUS           `json:"frontendEndpoints,omitempty"`
	HealthProbeSettings   []HealthProbeSettingsModel_STATUS   `json:"healthProbeSettings,omitempty"`
	Id                    *string                             `json:"id,omitempty"`
	LoadBalancingSettings []LoadBalancingSettingsModel_STATUS `json:"loadBalancingSettings,omitempty"`
	Location              *string                             `json:"location,omitempty"`
	Name                  *string                             `json:"name,omitempty"`
	PropertyBag           genruntime.PropertyBag              `json:"$propertyBag,omitempty"`
	ProvisioningState     *string                             `json:"provisioningState,omitempty"`
	ResourceState         *string                             `json:"resourceState,omitempty"`
	RoutingRules          []RoutingRule_STATUS                `json:"routingRules,omitempty"`
	RulesEngines          []RulesEngine_STATUS                `json:"rulesEngines,omitempty"`
	Tags                  map[string]string                   `json:"tags,omitempty"`
	Type                  *string                             `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &FrontDoor_STATUS{}

// ConvertStatusFrom populates our FrontDoor_STATUS from the provided source
func (door *FrontDoor_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	if source == door {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return source.ConvertStatusTo(door)
}

// ConvertStatusTo populates the provided destination from our FrontDoor_STATUS
func (door *FrontDoor_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	if destination == door {
		return errors.New("attempted conversion between unrelated implementations of github.com/Azure/azure-service-operator/v2/pkg/genruntime/ConvertibleStatus")
	}

	return destination.ConvertStatusFrom(door)
}

// Storage version of v1api20210601.BackendPool
// A backend pool is a collection of backends that can be routed to.
type BackendPool struct {
	Backends              []Backend              `json:"backends,omitempty"`
	HealthProbeSettings   *SubResource           `json:"healthProbeSettings,omitempty"`
	LoadBalancingSettings *SubResource           `json:"loadBalancingSettings,omitempty"`
	Name                  *string                `json:"name,omitempty"`
	PropertyBag           genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20210601.BackendPool_STATUS
// A backend pool is a collection of backends that can be routed to.
type BackendPool_STATUS struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20210601.BackendPoolsSettings
// Settings that apply to all backend pools.
type BackendPoolsSettings struct {
	EnforceCertificateNameCheck *string                `json:"enforceCertificateNameCheck,omitempty"`
	PropertyBag                 genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SendRecvTimeoutSeconds      *int                   `json:"sendRecvTimeoutSeconds,omitempty"`
}

// Storage version of v1api20210601.BackendPoolsSettings_STATUS
// Settings that apply to all backend pools.
type BackendPoolsSettings_STATUS struct {
	EnforceCertificateNameCheck *string                `json:"enforceCertificateNameCheck,omitempty"`
	PropertyBag                 genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SendRecvTimeoutSeconds      *int                   `json:"sendRecvTimeoutSeconds,omitempty"`
}

// Storage version of v1api20210601.FrontendEndpoint
// A frontend endpoint used for routing.
type FrontendEndpoint struct {
	HostName                         *string                                                      `json:"hostName,omitempty"`
	Name                             *string                                                      `json:"name,omitempty"`
	PropertyBag                      genruntime.PropertyBag                                       `json:"$propertyBag,omitempty"`
	SessionAffinityEnabledState      *string                                                      `json:"sessionAffinityEnabledState,omitempty"`
	SessionAffinityTtlSeconds        *int                                                         `json:"sessionAffinityTtlSeconds,omitempty"`
	WebApplicationFirewallPolicyLink *FrontendEndpointProperties_WebApplicationFirewallPolicyLink `json:"webApplicationFirewallPolicyLink,omitempty"`
}

// Storage version of v1api20210601.FrontendEndpoint_STATUS
// A frontend endpoint used for routing.
type FrontendEndpoint_STATUS struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20210601.HealthProbeSettingsModel
// Load balancing settings for a backend pool
type HealthProbeSettingsModel struct {
	EnabledState      *string                `json:"enabledState,omitempty"`
	HealthProbeMethod *string                `json:"healthProbeMethod,omitempty"`
	IntervalInSeconds *int                   `json:"intervalInSeconds,omitempty"`
	Name              *string                `json:"name,omitempty"`
	Path              *string                `json:"path,omitempty"`
	PropertyBag       genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	Protocol          *string                `json:"protocol,omitempty"`
}

// Storage version of v1api20210601.HealthProbeSettingsModel_STATUS
// Load balancing settings for a backend pool
type HealthProbeSettingsModel_STATUS struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20210601.LoadBalancingSettingsModel
// Load balancing settings for a backend pool
type LoadBalancingSettingsModel struct {
	AdditionalLatencyMilliseconds *int                   `json:"additionalLatencyMilliseconds,omitempty"`
	Name                          *string                `json:"name,omitempty"`
	PropertyBag                   genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	SampleSize                    *int                   `json:"sampleSize,omitempty"`
	SuccessfulSamplesRequired     *int                   `json:"successfulSamplesRequired,omitempty"`
}

// Storage version of v1api20210601.LoadBalancingSettingsModel_STATUS
// Load balancing settings for a backend pool
type LoadBalancingSettingsModel_STATUS struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20210601.RoutingRule
// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRule struct {
	AcceptedProtocols                []string                                                `json:"acceptedProtocols,omitempty"`
	EnabledState                     *string                                                 `json:"enabledState,omitempty"`
	FrontendEndpoints                []SubResource                                           `json:"frontendEndpoints,omitempty"`
	Name                             *string                                                 `json:"name,omitempty"`
	PatternsToMatch                  []string                                                `json:"patternsToMatch,omitempty"`
	PropertyBag                      genruntime.PropertyBag                                  `json:"$propertyBag,omitempty"`
	RouteConfiguration               *RouteConfiguration                                     `json:"routeConfiguration,omitempty"`
	RulesEngine                      *SubResource                                            `json:"rulesEngine,omitempty"`
	WebApplicationFirewallPolicyLink *RoutingRuleProperties_WebApplicationFirewallPolicyLink `json:"webApplicationFirewallPolicyLink,omitempty"`
}

// Storage version of v1api20210601.RoutingRule_STATUS
// A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
type RoutingRule_STATUS struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20210601.RulesEngine_STATUS
// A rules engine configuration containing a list of rules that will run to modify the runtime behavior of the request and
// response.
type RulesEngine_STATUS struct {
	Id          *string                `json:"id,omitempty"`
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20210601.Backend
// Backend address of a frontDoor load balancer.
type Backend struct {
	Address                    *string `json:"address,omitempty"`
	BackendHostHeader          *string `json:"backendHostHeader,omitempty"`
	EnabledState               *string `json:"enabledState,omitempty"`
	HttpPort                   *int    `json:"httpPort,omitempty"`
	HttpsPort                  *int    `json:"httpsPort,omitempty"`
	Priority                   *int    `json:"priority,omitempty"`
	PrivateLinkAlias           *string `json:"privateLinkAlias,omitempty"`
	PrivateLinkApprovalMessage *string `json:"privateLinkApprovalMessage,omitempty"`
	PrivateLinkLocation        *string `json:"privateLinkLocation,omitempty"`

	// PrivateLinkResourceReference: The Resource Id of the Private Link resource. Populating this optional field indicates
	// that this backend is 'Private'
	PrivateLinkResourceReference *genruntime.ResourceReference `armReference:"PrivateLinkResourceId" json:"privateLinkResourceReference,omitempty"`
	PropertyBag                  genruntime.PropertyBag        `json:"$propertyBag,omitempty"`
	Weight                       *int                          `json:"weight,omitempty"`
}

// Storage version of v1api20210601.FrontendEndpointProperties_WebApplicationFirewallPolicyLink
type FrontendEndpointProperties_WebApplicationFirewallPolicyLink struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`

	// Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

// Storage version of v1api20210601.RouteConfiguration
type RouteConfiguration struct {
	MicrosoftAzureFrontDoorModelsFrontdoorForwarding *ForwardingConfiguration `json:"microsoftAzureFrontDoorModelsFrontdoorForwardingConfiguration,omitempty"`
	MicrosoftAzureFrontDoorModelsFrontdoorRedirect   *RedirectConfiguration   `json:"microsoftAzureFrontDoorModelsFrontdoorRedirectConfiguration,omitempty"`
	PropertyBag                                      genruntime.PropertyBag   `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20210601.RoutingRuleProperties_WebApplicationFirewallPolicyLink
type RoutingRuleProperties_WebApplicationFirewallPolicyLink struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`

	// Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

// Storage version of v1api20210601.SubResource
// Reference to another subresource.
type SubResource struct {
	PropertyBag genruntime.PropertyBag `json:"$propertyBag,omitempty"`

	// Reference: Resource ID.
	Reference *genruntime.ResourceReference `armReference:"Id" json:"reference,omitempty"`
}

// Storage version of v1api20210601.ForwardingConfiguration
type ForwardingConfiguration struct {
	BackendPool          *SubResource           `json:"backendPool,omitempty"`
	CacheConfiguration   *CacheConfiguration    `json:"cacheConfiguration,omitempty"`
	CustomForwardingPath *string                `json:"customForwardingPath,omitempty"`
	ForwardingProtocol   *string                `json:"forwardingProtocol,omitempty"`
	OdataType            *string                `json:"@odata.type,omitempty"`
	PropertyBag          genruntime.PropertyBag `json:"$propertyBag,omitempty"`
}

// Storage version of v1api20210601.RedirectConfiguration
type RedirectConfiguration struct {
	CustomFragment    *string                `json:"customFragment,omitempty"`
	CustomHost        *string                `json:"customHost,omitempty"`
	CustomPath        *string                `json:"customPath,omitempty"`
	CustomQueryString *string                `json:"customQueryString,omitempty"`
	OdataType         *string                `json:"@odata.type,omitempty"`
	PropertyBag       genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	RedirectProtocol  *string                `json:"redirectProtocol,omitempty"`
	RedirectType      *string                `json:"redirectType,omitempty"`
}

// Storage version of v1api20210601.CacheConfiguration
// Caching settings for a caching-type route. To disable caching, do not provide a cacheConfiguration object.
type CacheConfiguration struct {
	CacheDuration                *string                `json:"cacheDuration,omitempty"`
	DynamicCompression           *string                `json:"dynamicCompression,omitempty"`
	PropertyBag                  genruntime.PropertyBag `json:"$propertyBag,omitempty"`
	QueryParameterStripDirective *string                `json:"queryParameterStripDirective,omitempty"`
	QueryParameters              *string                `json:"queryParameters,omitempty"`
}

func init() {
	SchemeBuilder.Register(&FrontDoor{}, &FrontDoorList{})
}
