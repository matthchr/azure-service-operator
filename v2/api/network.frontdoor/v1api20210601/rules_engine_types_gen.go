// Code generated by azure-service-operator-codegen. DO NOT EDIT.
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
package v1api20210601

import (
	"fmt"
	v20210601s "github.com/Azure/azure-service-operator/v2/api/network.frontdoor/v1api20210601/storage"
	"github.com/Azure/azure-service-operator/v2/internal/reflecthelpers"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	"github.com/Azure/azure-service-operator/v2/pkg/genruntime/conditions"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Severity",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].severity"
// +kubebuilder:printcolumn:name="Reason",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].reason"
// +kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].message"
// Generator information:
// - Generated from: /frontdoor/resource-manager/Microsoft.Network/stable/2021-06-01/frontdoor.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/rulesEngines/{rulesEngineName}
type RulesEngine struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FrontDoors_RulesEngine_Spec   `json:"spec,omitempty"`
	Status            FrontDoors_RulesEngine_STATUS `json:"status,omitempty"`
}

var _ conditions.Conditioner = &RulesEngine{}

// GetConditions returns the conditions of the resource
func (engine *RulesEngine) GetConditions() conditions.Conditions {
	return engine.Status.Conditions
}

// SetConditions sets the conditions on the resource status
func (engine *RulesEngine) SetConditions(conditions conditions.Conditions) {
	engine.Status.Conditions = conditions
}

var _ conversion.Convertible = &RulesEngine{}

// ConvertFrom populates our RulesEngine from the provided hub RulesEngine
func (engine *RulesEngine) ConvertFrom(hub conversion.Hub) error {
	source, ok := hub.(*v20210601s.RulesEngine)
	if !ok {
		return fmt.Errorf("expected network.frontdoor/v1api20210601/storage/RulesEngine but received %T instead", hub)
	}

	return engine.AssignProperties_From_RulesEngine(source)
}

// ConvertTo populates the provided hub RulesEngine from our RulesEngine
func (engine *RulesEngine) ConvertTo(hub conversion.Hub) error {
	destination, ok := hub.(*v20210601s.RulesEngine)
	if !ok {
		return fmt.Errorf("expected network.frontdoor/v1api20210601/storage/RulesEngine but received %T instead", hub)
	}

	return engine.AssignProperties_To_RulesEngine(destination)
}

// +kubebuilder:webhook:path=/mutate-network-frontdoor-azure-com-v1api20210601-rulesengine,mutating=true,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.frontdoor.azure.com,resources=rulesengines,verbs=create;update,versions=v1api20210601,name=default.v1api20210601.rulesengines.network.frontdoor.azure.com,admissionReviewVersions=v1

var _ admission.Defaulter = &RulesEngine{}

// Default applies defaults to the RulesEngine resource
func (engine *RulesEngine) Default() {
	engine.defaultImpl()
	var temp any = engine
	if runtimeDefaulter, ok := temp.(genruntime.Defaulter); ok {
		runtimeDefaulter.CustomDefault()
	}
}

// defaultAzureName defaults the Azure name of the resource to the Kubernetes name
func (engine *RulesEngine) defaultAzureName() {
	if engine.Spec.AzureName == "" {
		engine.Spec.AzureName = engine.Name
	}
}

// defaultImpl applies the code generated defaults to the RulesEngine resource
func (engine *RulesEngine) defaultImpl() { engine.defaultAzureName() }

var _ genruntime.ImportableResource = &RulesEngine{}

// InitializeSpec initializes the spec for this resource from the given status
func (engine *RulesEngine) InitializeSpec(status genruntime.ConvertibleStatus) error {
	if s, ok := status.(*FrontDoors_RulesEngine_STATUS); ok {
		return engine.Spec.Initialize_From_FrontDoors_RulesEngine_STATUS(s)
	}

	return fmt.Errorf("expected Status of type FrontDoors_RulesEngine_STATUS but received %T instead", status)
}

var _ genruntime.KubernetesResource = &RulesEngine{}

// AzureName returns the Azure name of the resource
func (engine *RulesEngine) AzureName() string {
	return engine.Spec.AzureName
}

// GetAPIVersion returns the ARM API version of the resource. This is always "2021-06-01"
func (engine RulesEngine) GetAPIVersion() string {
	return string(APIVersion_Value)
}

// GetResourceScope returns the scope of the resource
func (engine *RulesEngine) GetResourceScope() genruntime.ResourceScope {
	return genruntime.ResourceScopeResourceGroup
}

// GetSpec returns the specification of this resource
func (engine *RulesEngine) GetSpec() genruntime.ConvertibleSpec {
	return &engine.Spec
}

// GetStatus returns the status of this resource
func (engine *RulesEngine) GetStatus() genruntime.ConvertibleStatus {
	return &engine.Status
}

// GetSupportedOperations returns the operations supported by the resource
func (engine *RulesEngine) GetSupportedOperations() []genruntime.ResourceOperation {
	return []genruntime.ResourceOperation{
		genruntime.ResourceOperationDelete,
		genruntime.ResourceOperationGet,
		genruntime.ResourceOperationPut,
	}
}

// GetType returns the ARM Type of the resource. This is always "Microsoft.Network/frontDoors/rulesEngines"
func (engine *RulesEngine) GetType() string {
	return "Microsoft.Network/frontDoors/rulesEngines"
}

// NewEmptyStatus returns a new empty (blank) status
func (engine *RulesEngine) NewEmptyStatus() genruntime.ConvertibleStatus {
	return &FrontDoors_RulesEngine_STATUS{}
}

// Owner returns the ResourceReference of the owner
func (engine *RulesEngine) Owner() *genruntime.ResourceReference {
	group, kind := genruntime.LookupOwnerGroupKind(engine.Spec)
	return engine.Spec.Owner.AsResourceReference(group, kind)
}

// SetStatus sets the status of this resource
func (engine *RulesEngine) SetStatus(status genruntime.ConvertibleStatus) error {
	// If we have exactly the right type of status, assign it
	if st, ok := status.(*FrontDoors_RulesEngine_STATUS); ok {
		engine.Status = *st
		return nil
	}

	// Convert status to required version
	var st FrontDoors_RulesEngine_STATUS
	err := status.ConvertStatusTo(&st)
	if err != nil {
		return errors.Wrap(err, "failed to convert status")
	}

	engine.Status = st
	return nil
}

// +kubebuilder:webhook:path=/validate-network-frontdoor-azure-com-v1api20210601-rulesengine,mutating=false,sideEffects=None,matchPolicy=Exact,failurePolicy=fail,groups=network.frontdoor.azure.com,resources=rulesengines,verbs=create;update,versions=v1api20210601,name=validate.v1api20210601.rulesengines.network.frontdoor.azure.com,admissionReviewVersions=v1

var _ admission.Validator = &RulesEngine{}

// ValidateCreate validates the creation of the resource
func (engine *RulesEngine) ValidateCreate() (admission.Warnings, error) {
	validations := engine.createValidations()
	var temp any = engine
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.CreateValidations()...)
	}
	return genruntime.ValidateCreate(validations)
}

// ValidateDelete validates the deletion of the resource
func (engine *RulesEngine) ValidateDelete() (admission.Warnings, error) {
	validations := engine.deleteValidations()
	var temp any = engine
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.DeleteValidations()...)
	}
	return genruntime.ValidateDelete(validations)
}

// ValidateUpdate validates an update of the resource
func (engine *RulesEngine) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	validations := engine.updateValidations()
	var temp any = engine
	if runtimeValidator, ok := temp.(genruntime.Validator); ok {
		validations = append(validations, runtimeValidator.UpdateValidations()...)
	}
	return genruntime.ValidateUpdate(old, validations)
}

// createValidations validates the creation of the resource
func (engine *RulesEngine) createValidations() []func() (admission.Warnings, error) {
	return []func() (admission.Warnings, error){engine.validateResourceReferences, engine.validateOwnerReference}
}

// deleteValidations validates the deletion of the resource
func (engine *RulesEngine) deleteValidations() []func() (admission.Warnings, error) {
	return nil
}

// updateValidations validates the update of the resource
func (engine *RulesEngine) updateValidations() []func(old runtime.Object) (admission.Warnings, error) {
	return []func(old runtime.Object) (admission.Warnings, error){
		func(old runtime.Object) (admission.Warnings, error) {
			return engine.validateResourceReferences()
		},
		engine.validateWriteOnceProperties,
		func(old runtime.Object) (admission.Warnings, error) {
			return engine.validateOwnerReference()
		},
	}
}

// validateOwnerReference validates the owner field
func (engine *RulesEngine) validateOwnerReference() (admission.Warnings, error) {
	return genruntime.ValidateOwner(engine)
}

// validateResourceReferences validates all resource references
func (engine *RulesEngine) validateResourceReferences() (admission.Warnings, error) {
	refs, err := reflecthelpers.FindResourceReferences(&engine.Spec)
	if err != nil {
		return nil, err
	}
	return genruntime.ValidateResourceReferences(refs)
}

// validateWriteOnceProperties validates all WriteOnce properties
func (engine *RulesEngine) validateWriteOnceProperties(old runtime.Object) (admission.Warnings, error) {
	oldObj, ok := old.(*RulesEngine)
	if !ok {
		return nil, nil
	}

	return genruntime.ValidateWriteOnceProperties(oldObj, engine)
}

// AssignProperties_From_RulesEngine populates our RulesEngine from the provided source RulesEngine
func (engine *RulesEngine) AssignProperties_From_RulesEngine(source *v20210601s.RulesEngine) error {

	// ObjectMeta
	engine.ObjectMeta = *source.ObjectMeta.DeepCopy()

	// Spec
	var spec FrontDoors_RulesEngine_Spec
	err := spec.AssignProperties_From_FrontDoors_RulesEngine_Spec(&source.Spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_FrontDoors_RulesEngine_Spec() to populate field Spec")
	}
	engine.Spec = spec

	// Status
	var status FrontDoors_RulesEngine_STATUS
	err = status.AssignProperties_From_FrontDoors_RulesEngine_STATUS(&source.Status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_From_FrontDoors_RulesEngine_STATUS() to populate field Status")
	}
	engine.Status = status

	// No error
	return nil
}

// AssignProperties_To_RulesEngine populates the provided destination RulesEngine from our RulesEngine
func (engine *RulesEngine) AssignProperties_To_RulesEngine(destination *v20210601s.RulesEngine) error {

	// ObjectMeta
	destination.ObjectMeta = *engine.ObjectMeta.DeepCopy()

	// Spec
	var spec v20210601s.FrontDoors_RulesEngine_Spec
	err := engine.Spec.AssignProperties_To_FrontDoors_RulesEngine_Spec(&spec)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_FrontDoors_RulesEngine_Spec() to populate field Spec")
	}
	destination.Spec = spec

	// Status
	var status v20210601s.FrontDoors_RulesEngine_STATUS
	err = engine.Status.AssignProperties_To_FrontDoors_RulesEngine_STATUS(&status)
	if err != nil {
		return errors.Wrap(err, "calling AssignProperties_To_FrontDoors_RulesEngine_STATUS() to populate field Status")
	}
	destination.Status = status

	// No error
	return nil
}

// OriginalGVK returns a GroupValueKind for the original API version used to create the resource
func (engine *RulesEngine) OriginalGVK() *schema.GroupVersionKind {
	return &schema.GroupVersionKind{
		Group:   GroupVersion.Group,
		Version: engine.Spec.OriginalVersion(),
		Kind:    "RulesEngine",
	}
}

// +kubebuilder:object:root=true
// Generator information:
// - Generated from: /frontdoor/resource-manager/Microsoft.Network/stable/2021-06-01/frontdoor.json
// - ARM URI: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/rulesEngines/{rulesEngineName}
type RulesEngineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RulesEngine `json:"items"`
}

type FrontDoors_RulesEngine_Spec struct {
	// +kubebuilder:validation:MaxLength=90
	// +kubebuilder:validation:MinLength=1
	// +kubebuilder:validation:Pattern="^[a-zA-Z0-9]+(-*[a-zA-Z0-9])*$"
	// AzureName: The name of the resource in Azure. This is often the same as the name of the resource in Kubernetes but it
	// doesn't have to be.
	AzureName string `json:"azureName,omitempty"`

	// +kubebuilder:validation:Required
	// Owner: The owner of the resource. The owner controls where the resource goes when it is deployed. The owner also
	// controls the resources lifecycle. When the owner is deleted the resource will also be deleted. Owner is expected to be a
	// reference to a network.frontdoor.azure.com/FrontDoor resource
	Owner *genruntime.KnownResourceReference `group:"network.frontdoor.azure.com" json:"owner,omitempty" kind:"FrontDoor"`

	// Rules: A list of rules that define a particular Rules Engine Configuration.
	Rules []RulesEngineRule `json:"rules,omitempty"`
}

var _ genruntime.ARMTransformer = &FrontDoors_RulesEngine_Spec{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (engine *FrontDoors_RulesEngine_Spec) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if engine == nil {
		return nil, nil
	}
	result := &FrontDoors_RulesEngine_Spec_ARM{}

	// Set property "Name":
	result.Name = resolved.Name

	// Set property "Properties":
	if engine.Rules != nil {
		result.Properties = &RulesEngineProperties_ARM{}
	}
	for _, item := range engine.Rules {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.Properties.Rules = append(result.Properties.Rules, *item_ARM.(*RulesEngineRule_ARM))
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (engine *FrontDoors_RulesEngine_Spec) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FrontDoors_RulesEngine_Spec_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (engine *FrontDoors_RulesEngine_Spec) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FrontDoors_RulesEngine_Spec_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FrontDoors_RulesEngine_Spec_ARM, got %T", armInput)
	}

	// Set property "AzureName":
	engine.SetAzureName(genruntime.ExtractKubernetesResourceNameFromARMName(typedInput.Name))

	// Set property "Owner":
	engine.Owner = &genruntime.KnownResourceReference{
		Name:  owner.Name,
		ARMID: owner.ARMID,
	}

	// Set property "Rules":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Rules {
			var item1 RulesEngineRule
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			engine.Rules = append(engine.Rules, item1)
		}
	}

	// No error
	return nil
}

var _ genruntime.ConvertibleSpec = &FrontDoors_RulesEngine_Spec{}

// ConvertSpecFrom populates our FrontDoors_RulesEngine_Spec from the provided source
func (engine *FrontDoors_RulesEngine_Spec) ConvertSpecFrom(source genruntime.ConvertibleSpec) error {
	src, ok := source.(*v20210601s.FrontDoors_RulesEngine_Spec)
	if ok {
		// Populate our instance from source
		return engine.AssignProperties_From_FrontDoors_RulesEngine_Spec(src)
	}

	// Convert to an intermediate form
	src = &v20210601s.FrontDoors_RulesEngine_Spec{}
	err := src.ConvertSpecFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecFrom()")
	}

	// Update our instance from src
	err = engine.AssignProperties_From_FrontDoors_RulesEngine_Spec(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecFrom()")
	}

	return nil
}

// ConvertSpecTo populates the provided destination from our FrontDoors_RulesEngine_Spec
func (engine *FrontDoors_RulesEngine_Spec) ConvertSpecTo(destination genruntime.ConvertibleSpec) error {
	dst, ok := destination.(*v20210601s.FrontDoors_RulesEngine_Spec)
	if ok {
		// Populate destination from our instance
		return engine.AssignProperties_To_FrontDoors_RulesEngine_Spec(dst)
	}

	// Convert to an intermediate form
	dst = &v20210601s.FrontDoors_RulesEngine_Spec{}
	err := engine.AssignProperties_To_FrontDoors_RulesEngine_Spec(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertSpecTo()")
	}

	// Update dst from our instance
	err = dst.ConvertSpecTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertSpecTo()")
	}

	return nil
}

// AssignProperties_From_FrontDoors_RulesEngine_Spec populates our FrontDoors_RulesEngine_Spec from the provided source FrontDoors_RulesEngine_Spec
func (engine *FrontDoors_RulesEngine_Spec) AssignProperties_From_FrontDoors_RulesEngine_Spec(source *v20210601s.FrontDoors_RulesEngine_Spec) error {

	// AzureName
	engine.AzureName = source.AzureName

	// Owner
	if source.Owner != nil {
		owner := source.Owner.Copy()
		engine.Owner = &owner
	} else {
		engine.Owner = nil
	}

	// Rules
	if source.Rules != nil {
		ruleList := make([]RulesEngineRule, len(source.Rules))
		for ruleIndex, ruleItem := range source.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule RulesEngineRule
			err := rule.AssignProperties_From_RulesEngineRule(&ruleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_RulesEngineRule() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		engine.Rules = ruleList
	} else {
		engine.Rules = nil
	}

	// No error
	return nil
}

// AssignProperties_To_FrontDoors_RulesEngine_Spec populates the provided destination FrontDoors_RulesEngine_Spec from our FrontDoors_RulesEngine_Spec
func (engine *FrontDoors_RulesEngine_Spec) AssignProperties_To_FrontDoors_RulesEngine_Spec(destination *v20210601s.FrontDoors_RulesEngine_Spec) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// AzureName
	destination.AzureName = engine.AzureName

	// OriginalVersion
	destination.OriginalVersion = engine.OriginalVersion()

	// Owner
	if engine.Owner != nil {
		owner := engine.Owner.Copy()
		destination.Owner = &owner
	} else {
		destination.Owner = nil
	}

	// Rules
	if engine.Rules != nil {
		ruleList := make([]v20210601s.RulesEngineRule, len(engine.Rules))
		for ruleIndex, ruleItem := range engine.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule v20210601s.RulesEngineRule
			err := ruleItem.AssignProperties_To_RulesEngineRule(&rule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_RulesEngineRule() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		destination.Rules = ruleList
	} else {
		destination.Rules = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_FrontDoors_RulesEngine_STATUS populates our FrontDoors_RulesEngine_Spec from the provided source FrontDoors_RulesEngine_STATUS
func (engine *FrontDoors_RulesEngine_Spec) Initialize_From_FrontDoors_RulesEngine_STATUS(source *FrontDoors_RulesEngine_STATUS) error {

	// Rules
	if source.Rules != nil {
		ruleList := make([]RulesEngineRule, len(source.Rules))
		for ruleIndex, ruleItem := range source.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule RulesEngineRule
			err := rule.Initialize_From_RulesEngineRule_STATUS(&ruleItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_RulesEngineRule_STATUS() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		engine.Rules = ruleList
	} else {
		engine.Rules = nil
	}

	// No error
	return nil
}

// OriginalVersion returns the original API version used to create the resource.
func (engine *FrontDoors_RulesEngine_Spec) OriginalVersion() string {
	return GroupVersion.Version
}

// SetAzureName sets the Azure name of the resource
func (engine *FrontDoors_RulesEngine_Spec) SetAzureName(azureName string) {
	engine.AzureName = azureName
}

type FrontDoors_RulesEngine_STATUS struct {
	// Conditions: The observed state of the resource
	Conditions []conditions.Condition `json:"conditions,omitempty"`

	// Id: Resource ID.
	Id *string `json:"id,omitempty"`

	// Name: Resource name.
	Name *string `json:"name,omitempty"`

	// ResourceState: Resource status.
	ResourceState *ResourceState_STATUS `json:"resourceState,omitempty"`

	// Rules: A list of rules that define a particular Rules Engine Configuration.
	Rules []RulesEngineRule_STATUS `json:"rules,omitempty"`

	// Type: Resource type.
	Type *string `json:"type,omitempty"`
}

var _ genruntime.ConvertibleStatus = &FrontDoors_RulesEngine_STATUS{}

// ConvertStatusFrom populates our FrontDoors_RulesEngine_STATUS from the provided source
func (engine *FrontDoors_RulesEngine_STATUS) ConvertStatusFrom(source genruntime.ConvertibleStatus) error {
	src, ok := source.(*v20210601s.FrontDoors_RulesEngine_STATUS)
	if ok {
		// Populate our instance from source
		return engine.AssignProperties_From_FrontDoors_RulesEngine_STATUS(src)
	}

	// Convert to an intermediate form
	src = &v20210601s.FrontDoors_RulesEngine_STATUS{}
	err := src.ConvertStatusFrom(source)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusFrom()")
	}

	// Update our instance from src
	err = engine.AssignProperties_From_FrontDoors_RulesEngine_STATUS(src)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusFrom()")
	}

	return nil
}

// ConvertStatusTo populates the provided destination from our FrontDoors_RulesEngine_STATUS
func (engine *FrontDoors_RulesEngine_STATUS) ConvertStatusTo(destination genruntime.ConvertibleStatus) error {
	dst, ok := destination.(*v20210601s.FrontDoors_RulesEngine_STATUS)
	if ok {
		// Populate destination from our instance
		return engine.AssignProperties_To_FrontDoors_RulesEngine_STATUS(dst)
	}

	// Convert to an intermediate form
	dst = &v20210601s.FrontDoors_RulesEngine_STATUS{}
	err := engine.AssignProperties_To_FrontDoors_RulesEngine_STATUS(dst)
	if err != nil {
		return errors.Wrap(err, "initial step of conversion in ConvertStatusTo()")
	}

	// Update dst from our instance
	err = dst.ConvertStatusTo(destination)
	if err != nil {
		return errors.Wrap(err, "final step of conversion in ConvertStatusTo()")
	}

	return nil
}

var _ genruntime.FromARMConverter = &FrontDoors_RulesEngine_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (engine *FrontDoors_RulesEngine_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &FrontDoors_RulesEngine_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (engine *FrontDoors_RulesEngine_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(FrontDoors_RulesEngine_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected FrontDoors_RulesEngine_STATUS_ARM, got %T", armInput)
	}

	// no assignment for property "Conditions"

	// Set property "Id":
	if typedInput.Id != nil {
		id := *typedInput.Id
		engine.Id = &id
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		engine.Name = &name
	}

	// Set property "ResourceState":
	// copying flattened property:
	if typedInput.Properties != nil {
		if typedInput.Properties.ResourceState != nil {
			resourceState := *typedInput.Properties.ResourceState
			engine.ResourceState = &resourceState
		}
	}

	// Set property "Rules":
	// copying flattened property:
	if typedInput.Properties != nil {
		for _, item := range typedInput.Properties.Rules {
			var item1 RulesEngineRule_STATUS
			err := item1.PopulateFromARM(owner, item)
			if err != nil {
				return err
			}
			engine.Rules = append(engine.Rules, item1)
		}
	}

	// Set property "Type":
	if typedInput.Type != nil {
		typeVar := *typedInput.Type
		engine.Type = &typeVar
	}

	// No error
	return nil
}

// AssignProperties_From_FrontDoors_RulesEngine_STATUS populates our FrontDoors_RulesEngine_STATUS from the provided source FrontDoors_RulesEngine_STATUS
func (engine *FrontDoors_RulesEngine_STATUS) AssignProperties_From_FrontDoors_RulesEngine_STATUS(source *v20210601s.FrontDoors_RulesEngine_STATUS) error {

	// Conditions
	engine.Conditions = genruntime.CloneSliceOfCondition(source.Conditions)

	// Id
	engine.Id = genruntime.ClonePointerToString(source.Id)

	// Name
	engine.Name = genruntime.ClonePointerToString(source.Name)

	// ResourceState
	if source.ResourceState != nil {
		resourceState := ResourceState_STATUS(*source.ResourceState)
		engine.ResourceState = &resourceState
	} else {
		engine.ResourceState = nil
	}

	// Rules
	if source.Rules != nil {
		ruleList := make([]RulesEngineRule_STATUS, len(source.Rules))
		for ruleIndex, ruleItem := range source.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule RulesEngineRule_STATUS
			err := rule.AssignProperties_From_RulesEngineRule_STATUS(&ruleItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_RulesEngineRule_STATUS() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		engine.Rules = ruleList
	} else {
		engine.Rules = nil
	}

	// Type
	engine.Type = genruntime.ClonePointerToString(source.Type)

	// No error
	return nil
}

// AssignProperties_To_FrontDoors_RulesEngine_STATUS populates the provided destination FrontDoors_RulesEngine_STATUS from our FrontDoors_RulesEngine_STATUS
func (engine *FrontDoors_RulesEngine_STATUS) AssignProperties_To_FrontDoors_RulesEngine_STATUS(destination *v20210601s.FrontDoors_RulesEngine_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Conditions
	destination.Conditions = genruntime.CloneSliceOfCondition(engine.Conditions)

	// Id
	destination.Id = genruntime.ClonePointerToString(engine.Id)

	// Name
	destination.Name = genruntime.ClonePointerToString(engine.Name)

	// ResourceState
	if engine.ResourceState != nil {
		resourceState := string(*engine.ResourceState)
		destination.ResourceState = &resourceState
	} else {
		destination.ResourceState = nil
	}

	// Rules
	if engine.Rules != nil {
		ruleList := make([]v20210601s.RulesEngineRule_STATUS, len(engine.Rules))
		for ruleIndex, ruleItem := range engine.Rules {
			// Shadow the loop variable to avoid aliasing
			ruleItem := ruleItem
			var rule v20210601s.RulesEngineRule_STATUS
			err := ruleItem.AssignProperties_To_RulesEngineRule_STATUS(&rule)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_RulesEngineRule_STATUS() to populate field Rules")
			}
			ruleList[ruleIndex] = rule
		}
		destination.Rules = ruleList
	} else {
		destination.Rules = nil
	}

	// Type
	destination.Type = genruntime.ClonePointerToString(engine.Type)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the
// actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of
// headers manipulation.
type RulesEngineRule struct {
	// +kubebuilder:validation:Required
	// Action: Actions to perform on the request and response if all of the match conditions are met.
	Action *RulesEngineAction `json:"action,omitempty"`

	// MatchConditions: A list of match conditions that must meet in order for the actions of this rule to run. Having no match
	// conditions means the actions will always run.
	MatchConditions []RulesEngineMatchCondition `json:"matchConditions,omitempty"`

	// MatchProcessingBehavior: If this rule is a match should the rules engine continue running the remaining rules or stop.
	// If not present, defaults to Continue.
	MatchProcessingBehavior *RulesEngineRule_MatchProcessingBehavior `json:"matchProcessingBehavior,omitempty"`

	// +kubebuilder:validation:Required
	// Name: A name to refer to this specific rule.
	Name *string `json:"name,omitempty"`

	// +kubebuilder:validation:Required
	// Priority: A priority assigned to this rule.
	Priority *int `json:"priority,omitempty"`
}

var _ genruntime.ARMTransformer = &RulesEngineRule{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (rule *RulesEngineRule) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if rule == nil {
		return nil, nil
	}
	result := &RulesEngineRule_ARM{}

	// Set property "Action":
	if rule.Action != nil {
		action_ARM, err := (*rule.Action).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		action := *action_ARM.(*RulesEngineAction_ARM)
		result.Action = &action
	}

	// Set property "MatchConditions":
	for _, item := range rule.MatchConditions {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.MatchConditions = append(result.MatchConditions, *item_ARM.(*RulesEngineMatchCondition_ARM))
	}

	// Set property "MatchProcessingBehavior":
	if rule.MatchProcessingBehavior != nil {
		matchProcessingBehavior := *rule.MatchProcessingBehavior
		result.MatchProcessingBehavior = &matchProcessingBehavior
	}

	// Set property "Name":
	if rule.Name != nil {
		name := *rule.Name
		result.Name = &name
	}

	// Set property "Priority":
	if rule.Priority != nil {
		priority := *rule.Priority
		result.Priority = &priority
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *RulesEngineRule) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RulesEngineRule_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *RulesEngineRule) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RulesEngineRule_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RulesEngineRule_ARM, got %T", armInput)
	}

	// Set property "Action":
	if typedInput.Action != nil {
		var action1 RulesEngineAction
		err := action1.PopulateFromARM(owner, *typedInput.Action)
		if err != nil {
			return err
		}
		action := action1
		rule.Action = &action
	}

	// Set property "MatchConditions":
	for _, item := range typedInput.MatchConditions {
		var item1 RulesEngineMatchCondition
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		rule.MatchConditions = append(rule.MatchConditions, item1)
	}

	// Set property "MatchProcessingBehavior":
	if typedInput.MatchProcessingBehavior != nil {
		matchProcessingBehavior := *typedInput.MatchProcessingBehavior
		rule.MatchProcessingBehavior = &matchProcessingBehavior
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		rule.Name = &name
	}

	// Set property "Priority":
	if typedInput.Priority != nil {
		priority := *typedInput.Priority
		rule.Priority = &priority
	}

	// No error
	return nil
}

// AssignProperties_From_RulesEngineRule populates our RulesEngineRule from the provided source RulesEngineRule
func (rule *RulesEngineRule) AssignProperties_From_RulesEngineRule(source *v20210601s.RulesEngineRule) error {

	// Action
	if source.Action != nil {
		var action RulesEngineAction
		err := action.AssignProperties_From_RulesEngineAction(source.Action)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RulesEngineAction() to populate field Action")
		}
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// MatchConditions
	if source.MatchConditions != nil {
		matchConditionList := make([]RulesEngineMatchCondition, len(source.MatchConditions))
		for matchConditionIndex, matchConditionItem := range source.MatchConditions {
			// Shadow the loop variable to avoid aliasing
			matchConditionItem := matchConditionItem
			var matchCondition RulesEngineMatchCondition
			err := matchCondition.AssignProperties_From_RulesEngineMatchCondition(&matchConditionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_RulesEngineMatchCondition() to populate field MatchConditions")
			}
			matchConditionList[matchConditionIndex] = matchCondition
		}
		rule.MatchConditions = matchConditionList
	} else {
		rule.MatchConditions = nil
	}

	// MatchProcessingBehavior
	if source.MatchProcessingBehavior != nil {
		matchProcessingBehavior := RulesEngineRule_MatchProcessingBehavior(*source.MatchProcessingBehavior)
		rule.MatchProcessingBehavior = &matchProcessingBehavior
	} else {
		rule.MatchProcessingBehavior = nil
	}

	// Name
	rule.Name = genruntime.ClonePointerToString(source.Name)

	// Priority
	rule.Priority = genruntime.ClonePointerToInt(source.Priority)

	// No error
	return nil
}

// AssignProperties_To_RulesEngineRule populates the provided destination RulesEngineRule from our RulesEngineRule
func (rule *RulesEngineRule) AssignProperties_To_RulesEngineRule(destination *v20210601s.RulesEngineRule) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		var action v20210601s.RulesEngineAction
		err := rule.Action.AssignProperties_To_RulesEngineAction(&action)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RulesEngineAction() to populate field Action")
		}
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// MatchConditions
	if rule.MatchConditions != nil {
		matchConditionList := make([]v20210601s.RulesEngineMatchCondition, len(rule.MatchConditions))
		for matchConditionIndex, matchConditionItem := range rule.MatchConditions {
			// Shadow the loop variable to avoid aliasing
			matchConditionItem := matchConditionItem
			var matchCondition v20210601s.RulesEngineMatchCondition
			err := matchConditionItem.AssignProperties_To_RulesEngineMatchCondition(&matchCondition)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_RulesEngineMatchCondition() to populate field MatchConditions")
			}
			matchConditionList[matchConditionIndex] = matchCondition
		}
		destination.MatchConditions = matchConditionList
	} else {
		destination.MatchConditions = nil
	}

	// MatchProcessingBehavior
	if rule.MatchProcessingBehavior != nil {
		matchProcessingBehavior := string(*rule.MatchProcessingBehavior)
		destination.MatchProcessingBehavior = &matchProcessingBehavior
	} else {
		destination.MatchProcessingBehavior = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(rule.Name)

	// Priority
	destination.Priority = genruntime.ClonePointerToInt(rule.Priority)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_RulesEngineRule_STATUS populates our RulesEngineRule from the provided source RulesEngineRule_STATUS
func (rule *RulesEngineRule) Initialize_From_RulesEngineRule_STATUS(source *RulesEngineRule_STATUS) error {

	// Action
	if source.Action != nil {
		var action RulesEngineAction
		err := action.Initialize_From_RulesEngineAction_STATUS(source.Action)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_RulesEngineAction_STATUS() to populate field Action")
		}
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// MatchConditions
	if source.MatchConditions != nil {
		matchConditionList := make([]RulesEngineMatchCondition, len(source.MatchConditions))
		for matchConditionIndex, matchConditionItem := range source.MatchConditions {
			// Shadow the loop variable to avoid aliasing
			matchConditionItem := matchConditionItem
			var matchCondition RulesEngineMatchCondition
			err := matchCondition.Initialize_From_RulesEngineMatchCondition_STATUS(&matchConditionItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_RulesEngineMatchCondition_STATUS() to populate field MatchConditions")
			}
			matchConditionList[matchConditionIndex] = matchCondition
		}
		rule.MatchConditions = matchConditionList
	} else {
		rule.MatchConditions = nil
	}

	// MatchProcessingBehavior
	if source.MatchProcessingBehavior != nil {
		matchProcessingBehavior := RulesEngineRule_MatchProcessingBehavior(*source.MatchProcessingBehavior)
		rule.MatchProcessingBehavior = &matchProcessingBehavior
	} else {
		rule.MatchProcessingBehavior = nil
	}

	// Name
	rule.Name = genruntime.ClonePointerToString(source.Name)

	// Priority
	rule.Priority = genruntime.ClonePointerToInt(source.Priority)

	// No error
	return nil
}

// Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the
// actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of
// headers manipulation.
type RulesEngineRule_STATUS struct {
	// Action: Actions to perform on the request and response if all of the match conditions are met.
	Action *RulesEngineAction_STATUS `json:"action,omitempty"`

	// MatchConditions: A list of match conditions that must meet in order for the actions of this rule to run. Having no match
	// conditions means the actions will always run.
	MatchConditions []RulesEngineMatchCondition_STATUS `json:"matchConditions,omitempty"`

	// MatchProcessingBehavior: If this rule is a match should the rules engine continue running the remaining rules or stop.
	// If not present, defaults to Continue.
	MatchProcessingBehavior *RulesEngineRule_MatchProcessingBehavior_STATUS `json:"matchProcessingBehavior,omitempty"`

	// Name: A name to refer to this specific rule.
	Name *string `json:"name,omitempty"`

	// Priority: A priority assigned to this rule.
	Priority *int `json:"priority,omitempty"`
}

var _ genruntime.FromARMConverter = &RulesEngineRule_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (rule *RulesEngineRule_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RulesEngineRule_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (rule *RulesEngineRule_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RulesEngineRule_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RulesEngineRule_STATUS_ARM, got %T", armInput)
	}

	// Set property "Action":
	if typedInput.Action != nil {
		var action1 RulesEngineAction_STATUS
		err := action1.PopulateFromARM(owner, *typedInput.Action)
		if err != nil {
			return err
		}
		action := action1
		rule.Action = &action
	}

	// Set property "MatchConditions":
	for _, item := range typedInput.MatchConditions {
		var item1 RulesEngineMatchCondition_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		rule.MatchConditions = append(rule.MatchConditions, item1)
	}

	// Set property "MatchProcessingBehavior":
	if typedInput.MatchProcessingBehavior != nil {
		matchProcessingBehavior := *typedInput.MatchProcessingBehavior
		rule.MatchProcessingBehavior = &matchProcessingBehavior
	}

	// Set property "Name":
	if typedInput.Name != nil {
		name := *typedInput.Name
		rule.Name = &name
	}

	// Set property "Priority":
	if typedInput.Priority != nil {
		priority := *typedInput.Priority
		rule.Priority = &priority
	}

	// No error
	return nil
}

// AssignProperties_From_RulesEngineRule_STATUS populates our RulesEngineRule_STATUS from the provided source RulesEngineRule_STATUS
func (rule *RulesEngineRule_STATUS) AssignProperties_From_RulesEngineRule_STATUS(source *v20210601s.RulesEngineRule_STATUS) error {

	// Action
	if source.Action != nil {
		var action RulesEngineAction_STATUS
		err := action.AssignProperties_From_RulesEngineAction_STATUS(source.Action)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RulesEngineAction_STATUS() to populate field Action")
		}
		rule.Action = &action
	} else {
		rule.Action = nil
	}

	// MatchConditions
	if source.MatchConditions != nil {
		matchConditionList := make([]RulesEngineMatchCondition_STATUS, len(source.MatchConditions))
		for matchConditionIndex, matchConditionItem := range source.MatchConditions {
			// Shadow the loop variable to avoid aliasing
			matchConditionItem := matchConditionItem
			var matchCondition RulesEngineMatchCondition_STATUS
			err := matchCondition.AssignProperties_From_RulesEngineMatchCondition_STATUS(&matchConditionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_RulesEngineMatchCondition_STATUS() to populate field MatchConditions")
			}
			matchConditionList[matchConditionIndex] = matchCondition
		}
		rule.MatchConditions = matchConditionList
	} else {
		rule.MatchConditions = nil
	}

	// MatchProcessingBehavior
	if source.MatchProcessingBehavior != nil {
		matchProcessingBehavior := RulesEngineRule_MatchProcessingBehavior_STATUS(*source.MatchProcessingBehavior)
		rule.MatchProcessingBehavior = &matchProcessingBehavior
	} else {
		rule.MatchProcessingBehavior = nil
	}

	// Name
	rule.Name = genruntime.ClonePointerToString(source.Name)

	// Priority
	rule.Priority = genruntime.ClonePointerToInt(source.Priority)

	// No error
	return nil
}

// AssignProperties_To_RulesEngineRule_STATUS populates the provided destination RulesEngineRule_STATUS from our RulesEngineRule_STATUS
func (rule *RulesEngineRule_STATUS) AssignProperties_To_RulesEngineRule_STATUS(destination *v20210601s.RulesEngineRule_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// Action
	if rule.Action != nil {
		var action v20210601s.RulesEngineAction_STATUS
		err := rule.Action.AssignProperties_To_RulesEngineAction_STATUS(&action)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RulesEngineAction_STATUS() to populate field Action")
		}
		destination.Action = &action
	} else {
		destination.Action = nil
	}

	// MatchConditions
	if rule.MatchConditions != nil {
		matchConditionList := make([]v20210601s.RulesEngineMatchCondition_STATUS, len(rule.MatchConditions))
		for matchConditionIndex, matchConditionItem := range rule.MatchConditions {
			// Shadow the loop variable to avoid aliasing
			matchConditionItem := matchConditionItem
			var matchCondition v20210601s.RulesEngineMatchCondition_STATUS
			err := matchConditionItem.AssignProperties_To_RulesEngineMatchCondition_STATUS(&matchCondition)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_RulesEngineMatchCondition_STATUS() to populate field MatchConditions")
			}
			matchConditionList[matchConditionIndex] = matchCondition
		}
		destination.MatchConditions = matchConditionList
	} else {
		destination.MatchConditions = nil
	}

	// MatchProcessingBehavior
	if rule.MatchProcessingBehavior != nil {
		matchProcessingBehavior := string(*rule.MatchProcessingBehavior)
		destination.MatchProcessingBehavior = &matchProcessingBehavior
	} else {
		destination.MatchProcessingBehavior = nil
	}

	// Name
	destination.Name = genruntime.ClonePointerToString(rule.Name)

	// Priority
	destination.Priority = genruntime.ClonePointerToInt(rule.Priority)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// One or more actions that will execute, modifying the request and/or response.
type RulesEngineAction struct {
	// RequestHeaderActions: A list of header actions to apply from the request from AFD to the origin.
	RequestHeaderActions []HeaderAction `json:"requestHeaderActions,omitempty"`

	// ResponseHeaderActions: A list of header actions to apply from the response from AFD to the client.
	ResponseHeaderActions []HeaderAction `json:"responseHeaderActions,omitempty"`

	// RouteConfigurationOverride: Override the route configuration.
	RouteConfigurationOverride *RouteConfiguration `json:"routeConfigurationOverride,omitempty"`
}

var _ genruntime.ARMTransformer = &RulesEngineAction{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action *RulesEngineAction) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action == nil {
		return nil, nil
	}
	result := &RulesEngineAction_ARM{}

	// Set property "RequestHeaderActions":
	for _, item := range action.RequestHeaderActions {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.RequestHeaderActions = append(result.RequestHeaderActions, *item_ARM.(*HeaderAction_ARM))
	}

	// Set property "ResponseHeaderActions":
	for _, item := range action.ResponseHeaderActions {
		item_ARM, err := item.ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		result.ResponseHeaderActions = append(result.ResponseHeaderActions, *item_ARM.(*HeaderAction_ARM))
	}

	// Set property "RouteConfigurationOverride":
	if action.RouteConfigurationOverride != nil {
		routeConfigurationOverride_ARM, err := (*action.RouteConfigurationOverride).ConvertToARM(resolved)
		if err != nil {
			return nil, err
		}
		routeConfigurationOverride := *routeConfigurationOverride_ARM.(*RouteConfiguration_ARM)
		result.RouteConfigurationOverride = &routeConfigurationOverride
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *RulesEngineAction) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RulesEngineAction_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *RulesEngineAction) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RulesEngineAction_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RulesEngineAction_ARM, got %T", armInput)
	}

	// Set property "RequestHeaderActions":
	for _, item := range typedInput.RequestHeaderActions {
		var item1 HeaderAction
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		action.RequestHeaderActions = append(action.RequestHeaderActions, item1)
	}

	// Set property "ResponseHeaderActions":
	for _, item := range typedInput.ResponseHeaderActions {
		var item1 HeaderAction
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		action.ResponseHeaderActions = append(action.ResponseHeaderActions, item1)
	}

	// Set property "RouteConfigurationOverride":
	if typedInput.RouteConfigurationOverride != nil {
		var routeConfigurationOverride1 RouteConfiguration
		err := routeConfigurationOverride1.PopulateFromARM(owner, *typedInput.RouteConfigurationOverride)
		if err != nil {
			return err
		}
		routeConfigurationOverride := routeConfigurationOverride1
		action.RouteConfigurationOverride = &routeConfigurationOverride
	}

	// No error
	return nil
}

// AssignProperties_From_RulesEngineAction populates our RulesEngineAction from the provided source RulesEngineAction
func (action *RulesEngineAction) AssignProperties_From_RulesEngineAction(source *v20210601s.RulesEngineAction) error {

	// RequestHeaderActions
	if source.RequestHeaderActions != nil {
		requestHeaderActionList := make([]HeaderAction, len(source.RequestHeaderActions))
		for requestHeaderActionIndex, requestHeaderActionItem := range source.RequestHeaderActions {
			// Shadow the loop variable to avoid aliasing
			requestHeaderActionItem := requestHeaderActionItem
			var requestHeaderAction HeaderAction
			err := requestHeaderAction.AssignProperties_From_HeaderAction(&requestHeaderActionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_HeaderAction() to populate field RequestHeaderActions")
			}
			requestHeaderActionList[requestHeaderActionIndex] = requestHeaderAction
		}
		action.RequestHeaderActions = requestHeaderActionList
	} else {
		action.RequestHeaderActions = nil
	}

	// ResponseHeaderActions
	if source.ResponseHeaderActions != nil {
		responseHeaderActionList := make([]HeaderAction, len(source.ResponseHeaderActions))
		for responseHeaderActionIndex, responseHeaderActionItem := range source.ResponseHeaderActions {
			// Shadow the loop variable to avoid aliasing
			responseHeaderActionItem := responseHeaderActionItem
			var responseHeaderAction HeaderAction
			err := responseHeaderAction.AssignProperties_From_HeaderAction(&responseHeaderActionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_HeaderAction() to populate field ResponseHeaderActions")
			}
			responseHeaderActionList[responseHeaderActionIndex] = responseHeaderAction
		}
		action.ResponseHeaderActions = responseHeaderActionList
	} else {
		action.ResponseHeaderActions = nil
	}

	// RouteConfigurationOverride
	if source.RouteConfigurationOverride != nil {
		var routeConfigurationOverride RouteConfiguration
		err := routeConfigurationOverride.AssignProperties_From_RouteConfiguration(source.RouteConfigurationOverride)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RouteConfiguration() to populate field RouteConfigurationOverride")
		}
		action.RouteConfigurationOverride = &routeConfigurationOverride
	} else {
		action.RouteConfigurationOverride = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RulesEngineAction populates the provided destination RulesEngineAction from our RulesEngineAction
func (action *RulesEngineAction) AssignProperties_To_RulesEngineAction(destination *v20210601s.RulesEngineAction) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// RequestHeaderActions
	if action.RequestHeaderActions != nil {
		requestHeaderActionList := make([]v20210601s.HeaderAction, len(action.RequestHeaderActions))
		for requestHeaderActionIndex, requestHeaderActionItem := range action.RequestHeaderActions {
			// Shadow the loop variable to avoid aliasing
			requestHeaderActionItem := requestHeaderActionItem
			var requestHeaderAction v20210601s.HeaderAction
			err := requestHeaderActionItem.AssignProperties_To_HeaderAction(&requestHeaderAction)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_HeaderAction() to populate field RequestHeaderActions")
			}
			requestHeaderActionList[requestHeaderActionIndex] = requestHeaderAction
		}
		destination.RequestHeaderActions = requestHeaderActionList
	} else {
		destination.RequestHeaderActions = nil
	}

	// ResponseHeaderActions
	if action.ResponseHeaderActions != nil {
		responseHeaderActionList := make([]v20210601s.HeaderAction, len(action.ResponseHeaderActions))
		for responseHeaderActionIndex, responseHeaderActionItem := range action.ResponseHeaderActions {
			// Shadow the loop variable to avoid aliasing
			responseHeaderActionItem := responseHeaderActionItem
			var responseHeaderAction v20210601s.HeaderAction
			err := responseHeaderActionItem.AssignProperties_To_HeaderAction(&responseHeaderAction)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_HeaderAction() to populate field ResponseHeaderActions")
			}
			responseHeaderActionList[responseHeaderActionIndex] = responseHeaderAction
		}
		destination.ResponseHeaderActions = responseHeaderActionList
	} else {
		destination.ResponseHeaderActions = nil
	}

	// RouteConfigurationOverride
	if action.RouteConfigurationOverride != nil {
		var routeConfigurationOverride v20210601s.RouteConfiguration
		err := action.RouteConfigurationOverride.AssignProperties_To_RouteConfiguration(&routeConfigurationOverride)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RouteConfiguration() to populate field RouteConfigurationOverride")
		}
		destination.RouteConfigurationOverride = &routeConfigurationOverride
	} else {
		destination.RouteConfigurationOverride = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_RulesEngineAction_STATUS populates our RulesEngineAction from the provided source RulesEngineAction_STATUS
func (action *RulesEngineAction) Initialize_From_RulesEngineAction_STATUS(source *RulesEngineAction_STATUS) error {

	// RequestHeaderActions
	if source.RequestHeaderActions != nil {
		requestHeaderActionList := make([]HeaderAction, len(source.RequestHeaderActions))
		for requestHeaderActionIndex, requestHeaderActionItem := range source.RequestHeaderActions {
			// Shadow the loop variable to avoid aliasing
			requestHeaderActionItem := requestHeaderActionItem
			var requestHeaderAction HeaderAction
			err := requestHeaderAction.Initialize_From_HeaderAction_STATUS(&requestHeaderActionItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_HeaderAction_STATUS() to populate field RequestHeaderActions")
			}
			requestHeaderActionList[requestHeaderActionIndex] = requestHeaderAction
		}
		action.RequestHeaderActions = requestHeaderActionList
	} else {
		action.RequestHeaderActions = nil
	}

	// ResponseHeaderActions
	if source.ResponseHeaderActions != nil {
		responseHeaderActionList := make([]HeaderAction, len(source.ResponseHeaderActions))
		for responseHeaderActionIndex, responseHeaderActionItem := range source.ResponseHeaderActions {
			// Shadow the loop variable to avoid aliasing
			responseHeaderActionItem := responseHeaderActionItem
			var responseHeaderAction HeaderAction
			err := responseHeaderAction.Initialize_From_HeaderAction_STATUS(&responseHeaderActionItem)
			if err != nil {
				return errors.Wrap(err, "calling Initialize_From_HeaderAction_STATUS() to populate field ResponseHeaderActions")
			}
			responseHeaderActionList[responseHeaderActionIndex] = responseHeaderAction
		}
		action.ResponseHeaderActions = responseHeaderActionList
	} else {
		action.ResponseHeaderActions = nil
	}

	// RouteConfigurationOverride
	if source.RouteConfigurationOverride != nil {
		var routeConfigurationOverride RouteConfiguration
		err := routeConfigurationOverride.Initialize_From_RouteConfiguration_STATUS(source.RouteConfigurationOverride)
		if err != nil {
			return errors.Wrap(err, "calling Initialize_From_RouteConfiguration_STATUS() to populate field RouteConfigurationOverride")
		}
		action.RouteConfigurationOverride = &routeConfigurationOverride
	} else {
		action.RouteConfigurationOverride = nil
	}

	// No error
	return nil
}

// One or more actions that will execute, modifying the request and/or response.
type RulesEngineAction_STATUS struct {
	// RequestHeaderActions: A list of header actions to apply from the request from AFD to the origin.
	RequestHeaderActions []HeaderAction_STATUS `json:"requestHeaderActions,omitempty"`

	// ResponseHeaderActions: A list of header actions to apply from the response from AFD to the client.
	ResponseHeaderActions []HeaderAction_STATUS `json:"responseHeaderActions,omitempty"`

	// RouteConfigurationOverride: Override the route configuration.
	RouteConfigurationOverride *RouteConfiguration_STATUS `json:"routeConfigurationOverride,omitempty"`
}

var _ genruntime.FromARMConverter = &RulesEngineAction_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *RulesEngineAction_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RulesEngineAction_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *RulesEngineAction_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RulesEngineAction_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RulesEngineAction_STATUS_ARM, got %T", armInput)
	}

	// Set property "RequestHeaderActions":
	for _, item := range typedInput.RequestHeaderActions {
		var item1 HeaderAction_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		action.RequestHeaderActions = append(action.RequestHeaderActions, item1)
	}

	// Set property "ResponseHeaderActions":
	for _, item := range typedInput.ResponseHeaderActions {
		var item1 HeaderAction_STATUS
		err := item1.PopulateFromARM(owner, item)
		if err != nil {
			return err
		}
		action.ResponseHeaderActions = append(action.ResponseHeaderActions, item1)
	}

	// Set property "RouteConfigurationOverride":
	if typedInput.RouteConfigurationOverride != nil {
		var routeConfigurationOverride1 RouteConfiguration_STATUS
		err := routeConfigurationOverride1.PopulateFromARM(owner, *typedInput.RouteConfigurationOverride)
		if err != nil {
			return err
		}
		routeConfigurationOverride := routeConfigurationOverride1
		action.RouteConfigurationOverride = &routeConfigurationOverride
	}

	// No error
	return nil
}

// AssignProperties_From_RulesEngineAction_STATUS populates our RulesEngineAction_STATUS from the provided source RulesEngineAction_STATUS
func (action *RulesEngineAction_STATUS) AssignProperties_From_RulesEngineAction_STATUS(source *v20210601s.RulesEngineAction_STATUS) error {

	// RequestHeaderActions
	if source.RequestHeaderActions != nil {
		requestHeaderActionList := make([]HeaderAction_STATUS, len(source.RequestHeaderActions))
		for requestHeaderActionIndex, requestHeaderActionItem := range source.RequestHeaderActions {
			// Shadow the loop variable to avoid aliasing
			requestHeaderActionItem := requestHeaderActionItem
			var requestHeaderAction HeaderAction_STATUS
			err := requestHeaderAction.AssignProperties_From_HeaderAction_STATUS(&requestHeaderActionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_HeaderAction_STATUS() to populate field RequestHeaderActions")
			}
			requestHeaderActionList[requestHeaderActionIndex] = requestHeaderAction
		}
		action.RequestHeaderActions = requestHeaderActionList
	} else {
		action.RequestHeaderActions = nil
	}

	// ResponseHeaderActions
	if source.ResponseHeaderActions != nil {
		responseHeaderActionList := make([]HeaderAction_STATUS, len(source.ResponseHeaderActions))
		for responseHeaderActionIndex, responseHeaderActionItem := range source.ResponseHeaderActions {
			// Shadow the loop variable to avoid aliasing
			responseHeaderActionItem := responseHeaderActionItem
			var responseHeaderAction HeaderAction_STATUS
			err := responseHeaderAction.AssignProperties_From_HeaderAction_STATUS(&responseHeaderActionItem)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_From_HeaderAction_STATUS() to populate field ResponseHeaderActions")
			}
			responseHeaderActionList[responseHeaderActionIndex] = responseHeaderAction
		}
		action.ResponseHeaderActions = responseHeaderActionList
	} else {
		action.ResponseHeaderActions = nil
	}

	// RouteConfigurationOverride
	if source.RouteConfigurationOverride != nil {
		var routeConfigurationOverride RouteConfiguration_STATUS
		err := routeConfigurationOverride.AssignProperties_From_RouteConfiguration_STATUS(source.RouteConfigurationOverride)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_From_RouteConfiguration_STATUS() to populate field RouteConfigurationOverride")
		}
		action.RouteConfigurationOverride = &routeConfigurationOverride
	} else {
		action.RouteConfigurationOverride = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RulesEngineAction_STATUS populates the provided destination RulesEngineAction_STATUS from our RulesEngineAction_STATUS
func (action *RulesEngineAction_STATUS) AssignProperties_To_RulesEngineAction_STATUS(destination *v20210601s.RulesEngineAction_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// RequestHeaderActions
	if action.RequestHeaderActions != nil {
		requestHeaderActionList := make([]v20210601s.HeaderAction_STATUS, len(action.RequestHeaderActions))
		for requestHeaderActionIndex, requestHeaderActionItem := range action.RequestHeaderActions {
			// Shadow the loop variable to avoid aliasing
			requestHeaderActionItem := requestHeaderActionItem
			var requestHeaderAction v20210601s.HeaderAction_STATUS
			err := requestHeaderActionItem.AssignProperties_To_HeaderAction_STATUS(&requestHeaderAction)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_HeaderAction_STATUS() to populate field RequestHeaderActions")
			}
			requestHeaderActionList[requestHeaderActionIndex] = requestHeaderAction
		}
		destination.RequestHeaderActions = requestHeaderActionList
	} else {
		destination.RequestHeaderActions = nil
	}

	// ResponseHeaderActions
	if action.ResponseHeaderActions != nil {
		responseHeaderActionList := make([]v20210601s.HeaderAction_STATUS, len(action.ResponseHeaderActions))
		for responseHeaderActionIndex, responseHeaderActionItem := range action.ResponseHeaderActions {
			// Shadow the loop variable to avoid aliasing
			responseHeaderActionItem := responseHeaderActionItem
			var responseHeaderAction v20210601s.HeaderAction_STATUS
			err := responseHeaderActionItem.AssignProperties_To_HeaderAction_STATUS(&responseHeaderAction)
			if err != nil {
				return errors.Wrap(err, "calling AssignProperties_To_HeaderAction_STATUS() to populate field ResponseHeaderActions")
			}
			responseHeaderActionList[responseHeaderActionIndex] = responseHeaderAction
		}
		destination.ResponseHeaderActions = responseHeaderActionList
	} else {
		destination.ResponseHeaderActions = nil
	}

	// RouteConfigurationOverride
	if action.RouteConfigurationOverride != nil {
		var routeConfigurationOverride v20210601s.RouteConfiguration_STATUS
		err := action.RouteConfigurationOverride.AssignProperties_To_RouteConfiguration_STATUS(&routeConfigurationOverride)
		if err != nil {
			return errors.Wrap(err, "calling AssignProperties_To_RouteConfiguration_STATUS() to populate field RouteConfigurationOverride")
		}
		destination.RouteConfigurationOverride = &routeConfigurationOverride
	} else {
		destination.RouteConfigurationOverride = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Define a match condition
type RulesEngineMatchCondition struct {
	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// +kubebuilder:validation:Required
	// RulesEngineMatchValue: Match values to match against. The operator will apply to each value in here with OR semantics.
	// If any of them match the variable with the given operator this match condition is considered a match.
	RulesEngineMatchValue []string `json:"rulesEngineMatchValue,omitempty"`

	// +kubebuilder:validation:Required
	// RulesEngineMatchVariable: Match Variable
	RulesEngineMatchVariable *RulesEngineMatchCondition_RulesEngineMatchVariable `json:"rulesEngineMatchVariable,omitempty"`

	// +kubebuilder:validation:Required
	// RulesEngineOperator: Describes operator to apply to the match condition.
	RulesEngineOperator *RulesEngineMatchCondition_RulesEngineOperator `json:"rulesEngineOperator,omitempty"`

	// Selector: Name of selector in RequestHeader or RequestBody to be matched
	Selector *string `json:"selector,omitempty"`

	// Transforms: List of transforms
	Transforms []Transform `json:"transforms,omitempty"`
}

var _ genruntime.ARMTransformer = &RulesEngineMatchCondition{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (condition *RulesEngineMatchCondition) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if condition == nil {
		return nil, nil
	}
	result := &RulesEngineMatchCondition_ARM{}

	// Set property "NegateCondition":
	if condition.NegateCondition != nil {
		negateCondition := *condition.NegateCondition
		result.NegateCondition = &negateCondition
	}

	// Set property "RulesEngineMatchValue":
	for _, item := range condition.RulesEngineMatchValue {
		result.RulesEngineMatchValue = append(result.RulesEngineMatchValue, item)
	}

	// Set property "RulesEngineMatchVariable":
	if condition.RulesEngineMatchVariable != nil {
		rulesEngineMatchVariable := *condition.RulesEngineMatchVariable
		result.RulesEngineMatchVariable = &rulesEngineMatchVariable
	}

	// Set property "RulesEngineOperator":
	if condition.RulesEngineOperator != nil {
		rulesEngineOperator := *condition.RulesEngineOperator
		result.RulesEngineOperator = &rulesEngineOperator
	}

	// Set property "Selector":
	if condition.Selector != nil {
		selector := *condition.Selector
		result.Selector = &selector
	}

	// Set property "Transforms":
	for _, item := range condition.Transforms {
		result.Transforms = append(result.Transforms, item)
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *RulesEngineMatchCondition) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RulesEngineMatchCondition_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *RulesEngineMatchCondition) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RulesEngineMatchCondition_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RulesEngineMatchCondition_ARM, got %T", armInput)
	}

	// Set property "NegateCondition":
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		condition.NegateCondition = &negateCondition
	}

	// Set property "RulesEngineMatchValue":
	for _, item := range typedInput.RulesEngineMatchValue {
		condition.RulesEngineMatchValue = append(condition.RulesEngineMatchValue, item)
	}

	// Set property "RulesEngineMatchVariable":
	if typedInput.RulesEngineMatchVariable != nil {
		rulesEngineMatchVariable := *typedInput.RulesEngineMatchVariable
		condition.RulesEngineMatchVariable = &rulesEngineMatchVariable
	}

	// Set property "RulesEngineOperator":
	if typedInput.RulesEngineOperator != nil {
		rulesEngineOperator := *typedInput.RulesEngineOperator
		condition.RulesEngineOperator = &rulesEngineOperator
	}

	// Set property "Selector":
	if typedInput.Selector != nil {
		selector := *typedInput.Selector
		condition.Selector = &selector
	}

	// Set property "Transforms":
	for _, item := range typedInput.Transforms {
		condition.Transforms = append(condition.Transforms, item)
	}

	// No error
	return nil
}

// AssignProperties_From_RulesEngineMatchCondition populates our RulesEngineMatchCondition from the provided source RulesEngineMatchCondition
func (condition *RulesEngineMatchCondition) AssignProperties_From_RulesEngineMatchCondition(source *v20210601s.RulesEngineMatchCondition) error {

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		condition.NegateCondition = &negateCondition
	} else {
		condition.NegateCondition = nil
	}

	// RulesEngineMatchValue
	condition.RulesEngineMatchValue = genruntime.CloneSliceOfString(source.RulesEngineMatchValue)

	// RulesEngineMatchVariable
	if source.RulesEngineMatchVariable != nil {
		rulesEngineMatchVariable := RulesEngineMatchCondition_RulesEngineMatchVariable(*source.RulesEngineMatchVariable)
		condition.RulesEngineMatchVariable = &rulesEngineMatchVariable
	} else {
		condition.RulesEngineMatchVariable = nil
	}

	// RulesEngineOperator
	if source.RulesEngineOperator != nil {
		rulesEngineOperator := RulesEngineMatchCondition_RulesEngineOperator(*source.RulesEngineOperator)
		condition.RulesEngineOperator = &rulesEngineOperator
	} else {
		condition.RulesEngineOperator = nil
	}

	// Selector
	condition.Selector = genruntime.ClonePointerToString(source.Selector)

	// Transforms
	if source.Transforms != nil {
		transformList := make([]Transform, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = Transform(transformItem)
		}
		condition.Transforms = transformList
	} else {
		condition.Transforms = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RulesEngineMatchCondition populates the provided destination RulesEngineMatchCondition from our RulesEngineMatchCondition
func (condition *RulesEngineMatchCondition) AssignProperties_To_RulesEngineMatchCondition(destination *v20210601s.RulesEngineMatchCondition) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// NegateCondition
	if condition.NegateCondition != nil {
		negateCondition := *condition.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// RulesEngineMatchValue
	destination.RulesEngineMatchValue = genruntime.CloneSliceOfString(condition.RulesEngineMatchValue)

	// RulesEngineMatchVariable
	if condition.RulesEngineMatchVariable != nil {
		rulesEngineMatchVariable := string(*condition.RulesEngineMatchVariable)
		destination.RulesEngineMatchVariable = &rulesEngineMatchVariable
	} else {
		destination.RulesEngineMatchVariable = nil
	}

	// RulesEngineOperator
	if condition.RulesEngineOperator != nil {
		rulesEngineOperator := string(*condition.RulesEngineOperator)
		destination.RulesEngineOperator = &rulesEngineOperator
	} else {
		destination.RulesEngineOperator = nil
	}

	// Selector
	destination.Selector = genruntime.ClonePointerToString(condition.Selector)

	// Transforms
	if condition.Transforms != nil {
		transformList := make([]string, len(condition.Transforms))
		for transformIndex, transformItem := range condition.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_RulesEngineMatchCondition_STATUS populates our RulesEngineMatchCondition from the provided source RulesEngineMatchCondition_STATUS
func (condition *RulesEngineMatchCondition) Initialize_From_RulesEngineMatchCondition_STATUS(source *RulesEngineMatchCondition_STATUS) error {

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		condition.NegateCondition = &negateCondition
	} else {
		condition.NegateCondition = nil
	}

	// RulesEngineMatchValue
	condition.RulesEngineMatchValue = genruntime.CloneSliceOfString(source.RulesEngineMatchValue)

	// RulesEngineMatchVariable
	if source.RulesEngineMatchVariable != nil {
		rulesEngineMatchVariable := RulesEngineMatchCondition_RulesEngineMatchVariable(*source.RulesEngineMatchVariable)
		condition.RulesEngineMatchVariable = &rulesEngineMatchVariable
	} else {
		condition.RulesEngineMatchVariable = nil
	}

	// RulesEngineOperator
	if source.RulesEngineOperator != nil {
		rulesEngineOperator := RulesEngineMatchCondition_RulesEngineOperator(*source.RulesEngineOperator)
		condition.RulesEngineOperator = &rulesEngineOperator
	} else {
		condition.RulesEngineOperator = nil
	}

	// Selector
	condition.Selector = genruntime.ClonePointerToString(source.Selector)

	// Transforms
	if source.Transforms != nil {
		transformList := make([]Transform, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transform := Transform(transformItem)
			transformList[transformIndex] = transform
		}
		condition.Transforms = transformList
	} else {
		condition.Transforms = nil
	}

	// No error
	return nil
}

// Define a match condition
type RulesEngineMatchCondition_STATUS struct {
	// NegateCondition: Describes if this is negate condition or not
	NegateCondition *bool `json:"negateCondition,omitempty"`

	// RulesEngineMatchValue: Match values to match against. The operator will apply to each value in here with OR semantics.
	// If any of them match the variable with the given operator this match condition is considered a match.
	RulesEngineMatchValue []string `json:"rulesEngineMatchValue,omitempty"`

	// RulesEngineMatchVariable: Match Variable
	RulesEngineMatchVariable *RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS `json:"rulesEngineMatchVariable,omitempty"`

	// RulesEngineOperator: Describes operator to apply to the match condition.
	RulesEngineOperator *RulesEngineMatchCondition_RulesEngineOperator_STATUS `json:"rulesEngineOperator,omitempty"`

	// Selector: Name of selector in RequestHeader or RequestBody to be matched
	Selector *string `json:"selector,omitempty"`

	// Transforms: List of transforms
	Transforms []Transform_STATUS `json:"transforms,omitempty"`
}

var _ genruntime.FromARMConverter = &RulesEngineMatchCondition_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (condition *RulesEngineMatchCondition_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &RulesEngineMatchCondition_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (condition *RulesEngineMatchCondition_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(RulesEngineMatchCondition_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected RulesEngineMatchCondition_STATUS_ARM, got %T", armInput)
	}

	// Set property "NegateCondition":
	if typedInput.NegateCondition != nil {
		negateCondition := *typedInput.NegateCondition
		condition.NegateCondition = &negateCondition
	}

	// Set property "RulesEngineMatchValue":
	for _, item := range typedInput.RulesEngineMatchValue {
		condition.RulesEngineMatchValue = append(condition.RulesEngineMatchValue, item)
	}

	// Set property "RulesEngineMatchVariable":
	if typedInput.RulesEngineMatchVariable != nil {
		rulesEngineMatchVariable := *typedInput.RulesEngineMatchVariable
		condition.RulesEngineMatchVariable = &rulesEngineMatchVariable
	}

	// Set property "RulesEngineOperator":
	if typedInput.RulesEngineOperator != nil {
		rulesEngineOperator := *typedInput.RulesEngineOperator
		condition.RulesEngineOperator = &rulesEngineOperator
	}

	// Set property "Selector":
	if typedInput.Selector != nil {
		selector := *typedInput.Selector
		condition.Selector = &selector
	}

	// Set property "Transforms":
	for _, item := range typedInput.Transforms {
		condition.Transforms = append(condition.Transforms, item)
	}

	// No error
	return nil
}

// AssignProperties_From_RulesEngineMatchCondition_STATUS populates our RulesEngineMatchCondition_STATUS from the provided source RulesEngineMatchCondition_STATUS
func (condition *RulesEngineMatchCondition_STATUS) AssignProperties_From_RulesEngineMatchCondition_STATUS(source *v20210601s.RulesEngineMatchCondition_STATUS) error {

	// NegateCondition
	if source.NegateCondition != nil {
		negateCondition := *source.NegateCondition
		condition.NegateCondition = &negateCondition
	} else {
		condition.NegateCondition = nil
	}

	// RulesEngineMatchValue
	condition.RulesEngineMatchValue = genruntime.CloneSliceOfString(source.RulesEngineMatchValue)

	// RulesEngineMatchVariable
	if source.RulesEngineMatchVariable != nil {
		rulesEngineMatchVariable := RulesEngineMatchCondition_RulesEngineMatchVariable_STATUS(*source.RulesEngineMatchVariable)
		condition.RulesEngineMatchVariable = &rulesEngineMatchVariable
	} else {
		condition.RulesEngineMatchVariable = nil
	}

	// RulesEngineOperator
	if source.RulesEngineOperator != nil {
		rulesEngineOperator := RulesEngineMatchCondition_RulesEngineOperator_STATUS(*source.RulesEngineOperator)
		condition.RulesEngineOperator = &rulesEngineOperator
	} else {
		condition.RulesEngineOperator = nil
	}

	// Selector
	condition.Selector = genruntime.ClonePointerToString(source.Selector)

	// Transforms
	if source.Transforms != nil {
		transformList := make([]Transform_STATUS, len(source.Transforms))
		for transformIndex, transformItem := range source.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = Transform_STATUS(transformItem)
		}
		condition.Transforms = transformList
	} else {
		condition.Transforms = nil
	}

	// No error
	return nil
}

// AssignProperties_To_RulesEngineMatchCondition_STATUS populates the provided destination RulesEngineMatchCondition_STATUS from our RulesEngineMatchCondition_STATUS
func (condition *RulesEngineMatchCondition_STATUS) AssignProperties_To_RulesEngineMatchCondition_STATUS(destination *v20210601s.RulesEngineMatchCondition_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// NegateCondition
	if condition.NegateCondition != nil {
		negateCondition := *condition.NegateCondition
		destination.NegateCondition = &negateCondition
	} else {
		destination.NegateCondition = nil
	}

	// RulesEngineMatchValue
	destination.RulesEngineMatchValue = genruntime.CloneSliceOfString(condition.RulesEngineMatchValue)

	// RulesEngineMatchVariable
	if condition.RulesEngineMatchVariable != nil {
		rulesEngineMatchVariable := string(*condition.RulesEngineMatchVariable)
		destination.RulesEngineMatchVariable = &rulesEngineMatchVariable
	} else {
		destination.RulesEngineMatchVariable = nil
	}

	// RulesEngineOperator
	if condition.RulesEngineOperator != nil {
		rulesEngineOperator := string(*condition.RulesEngineOperator)
		destination.RulesEngineOperator = &rulesEngineOperator
	} else {
		destination.RulesEngineOperator = nil
	}

	// Selector
	destination.Selector = genruntime.ClonePointerToString(condition.Selector)

	// Transforms
	if condition.Transforms != nil {
		transformList := make([]string, len(condition.Transforms))
		for transformIndex, transformItem := range condition.Transforms {
			// Shadow the loop variable to avoid aliasing
			transformItem := transformItem
			transformList[transformIndex] = string(transformItem)
		}
		destination.Transforms = transformList
	} else {
		destination.Transforms = nil
	}

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// An action that can manipulate an http header.
type HeaderAction struct {
	// +kubebuilder:validation:Required
	// HeaderActionType: Which type of manipulation to apply to the header.
	HeaderActionType *HeaderAction_HeaderActionType `json:"headerActionType,omitempty"`

	// +kubebuilder:validation:Required
	// HeaderName: The name of the header this action will apply to.
	HeaderName *string `json:"headerName,omitempty"`

	// Value: The value to update the given header name with. This value is not used if the actionType is Delete.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.ARMTransformer = &HeaderAction{}

// ConvertToARM converts from a Kubernetes CRD object to an ARM object
func (action *HeaderAction) ConvertToARM(resolved genruntime.ConvertToARMResolvedDetails) (interface{}, error) {
	if action == nil {
		return nil, nil
	}
	result := &HeaderAction_ARM{}

	// Set property "HeaderActionType":
	if action.HeaderActionType != nil {
		headerActionType := *action.HeaderActionType
		result.HeaderActionType = &headerActionType
	}

	// Set property "HeaderName":
	if action.HeaderName != nil {
		headerName := *action.HeaderName
		result.HeaderName = &headerName
	}

	// Set property "Value":
	if action.Value != nil {
		value := *action.Value
		result.Value = &value
	}
	return result, nil
}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *HeaderAction) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HeaderAction_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *HeaderAction) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HeaderAction_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HeaderAction_ARM, got %T", armInput)
	}

	// Set property "HeaderActionType":
	if typedInput.HeaderActionType != nil {
		headerActionType := *typedInput.HeaderActionType
		action.HeaderActionType = &headerActionType
	}

	// Set property "HeaderName":
	if typedInput.HeaderName != nil {
		headerName := *typedInput.HeaderName
		action.HeaderName = &headerName
	}

	// Set property "Value":
	if typedInput.Value != nil {
		value := *typedInput.Value
		action.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_HeaderAction populates our HeaderAction from the provided source HeaderAction
func (action *HeaderAction) AssignProperties_From_HeaderAction(source *v20210601s.HeaderAction) error {

	// HeaderActionType
	if source.HeaderActionType != nil {
		headerActionType := HeaderAction_HeaderActionType(*source.HeaderActionType)
		action.HeaderActionType = &headerActionType
	} else {
		action.HeaderActionType = nil
	}

	// HeaderName
	action.HeaderName = genruntime.ClonePointerToString(source.HeaderName)

	// Value
	action.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_HeaderAction populates the provided destination HeaderAction from our HeaderAction
func (action *HeaderAction) AssignProperties_To_HeaderAction(destination *v20210601s.HeaderAction) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// HeaderActionType
	if action.HeaderActionType != nil {
		headerActionType := string(*action.HeaderActionType)
		destination.HeaderActionType = &headerActionType
	} else {
		destination.HeaderActionType = nil
	}

	// HeaderName
	destination.HeaderName = genruntime.ClonePointerToString(action.HeaderName)

	// Value
	destination.Value = genruntime.ClonePointerToString(action.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

// Initialize_From_HeaderAction_STATUS populates our HeaderAction from the provided source HeaderAction_STATUS
func (action *HeaderAction) Initialize_From_HeaderAction_STATUS(source *HeaderAction_STATUS) error {

	// HeaderActionType
	if source.HeaderActionType != nil {
		headerActionType := HeaderAction_HeaderActionType(*source.HeaderActionType)
		action.HeaderActionType = &headerActionType
	} else {
		action.HeaderActionType = nil
	}

	// HeaderName
	action.HeaderName = genruntime.ClonePointerToString(source.HeaderName)

	// Value
	action.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// An action that can manipulate an http header.
type HeaderAction_STATUS struct {
	// HeaderActionType: Which type of manipulation to apply to the header.
	HeaderActionType *HeaderAction_HeaderActionType_STATUS `json:"headerActionType,omitempty"`

	// HeaderName: The name of the header this action will apply to.
	HeaderName *string `json:"headerName,omitempty"`

	// Value: The value to update the given header name with. This value is not used if the actionType is Delete.
	Value *string `json:"value,omitempty"`
}

var _ genruntime.FromARMConverter = &HeaderAction_STATUS{}

// NewEmptyARMValue returns an empty ARM value suitable for deserializing into
func (action *HeaderAction_STATUS) NewEmptyARMValue() genruntime.ARMResourceStatus {
	return &HeaderAction_STATUS_ARM{}
}

// PopulateFromARM populates a Kubernetes CRD object from an Azure ARM object
func (action *HeaderAction_STATUS) PopulateFromARM(owner genruntime.ArbitraryOwnerReference, armInput interface{}) error {
	typedInput, ok := armInput.(HeaderAction_STATUS_ARM)
	if !ok {
		return fmt.Errorf("unexpected type supplied for PopulateFromARM() function. Expected HeaderAction_STATUS_ARM, got %T", armInput)
	}

	// Set property "HeaderActionType":
	if typedInput.HeaderActionType != nil {
		headerActionType := *typedInput.HeaderActionType
		action.HeaderActionType = &headerActionType
	}

	// Set property "HeaderName":
	if typedInput.HeaderName != nil {
		headerName := *typedInput.HeaderName
		action.HeaderName = &headerName
	}

	// Set property "Value":
	if typedInput.Value != nil {
		value := *typedInput.Value
		action.Value = &value
	}

	// No error
	return nil
}

// AssignProperties_From_HeaderAction_STATUS populates our HeaderAction_STATUS from the provided source HeaderAction_STATUS
func (action *HeaderAction_STATUS) AssignProperties_From_HeaderAction_STATUS(source *v20210601s.HeaderAction_STATUS) error {

	// HeaderActionType
	if source.HeaderActionType != nil {
		headerActionType := HeaderAction_HeaderActionType_STATUS(*source.HeaderActionType)
		action.HeaderActionType = &headerActionType
	} else {
		action.HeaderActionType = nil
	}

	// HeaderName
	action.HeaderName = genruntime.ClonePointerToString(source.HeaderName)

	// Value
	action.Value = genruntime.ClonePointerToString(source.Value)

	// No error
	return nil
}

// AssignProperties_To_HeaderAction_STATUS populates the provided destination HeaderAction_STATUS from our HeaderAction_STATUS
func (action *HeaderAction_STATUS) AssignProperties_To_HeaderAction_STATUS(destination *v20210601s.HeaderAction_STATUS) error {
	// Create a new property bag
	propertyBag := genruntime.NewPropertyBag()

	// HeaderActionType
	if action.HeaderActionType != nil {
		headerActionType := string(*action.HeaderActionType)
		destination.HeaderActionType = &headerActionType
	} else {
		destination.HeaderActionType = nil
	}

	// HeaderName
	destination.HeaderName = genruntime.ClonePointerToString(action.HeaderName)

	// Value
	destination.Value = genruntime.ClonePointerToString(action.Value)

	// Update the property bag
	if len(propertyBag) > 0 {
		destination.PropertyBag = propertyBag
	} else {
		destination.PropertyBag = nil
	}

	// No error
	return nil
}

func init() {
	SchemeBuilder.Register(&RulesEngine{}, &RulesEngineList{})
}
